<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Catel.Extensions.Controls</name>
    </assembly>
    <members>
        <member name="T:Catel.Windows.Media.Effects.EmptyEffect">
            <summary>
            Empty effect that simply copies the pixel color (so it doesn't make ANY changes to pixels).
            </summary>
            <remarks>
            Implemented to be able to disable pixel shaders in Catel.
            <para />
            During the build of Catel, this pixel shader effect will not be recompiled to prevent all users to install the
            DirectX SDK. If you want to make changes, take a look at the readme of Catel.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Media.Effects.EmptyEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Media.Effects.EmptyEffect"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.EmptyEffect.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="T:Catel.Windows.Media.Effects.GrayscaleEffect">
            <summary>
            Grayscale effect to convert objects to a grayscale mode.
            </summary>
            <remarks>
            This code is originally taken from http://bursjootech.blogspot.com/2008/06/grayscale-effect-pixel-shader-effect-in.html.
            <para />
            During the build of Catel, this pixel shader effect will not be recompiled to prevent all users to install the
            DirectX SDK. If you want to make changes, take a look at the readme of Catel.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Media.Effects.GrayscaleEffect"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactor">
            <summary>
            Gets or sets the desaturation factor.
            </summary>
            <value>The desaturation factor.</value>
        </member>
        <member name="F:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactorProperty">
            <summary>
            Property definition for <see cref="P:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactor"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.OnDesaturationFactorChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactor"/> property has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <remarks>
            This method is required because Silverlight does not support coerce callback values for dependency properties.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.CoerceDesaturationFactor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the desaturation factor.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="value">The value.</param>
            <returns>New factor.</returns>
        </member>
        <member name="T:Catel.Windows.Media.Effects.ShaderEffectBase">
            <summary>
            Base class for shader effects in Catel.
            </summary>
        </member>
        <member name="F:Catel.Windows.Media.Effects.ShaderEffectBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.Media.Effects.ShaderEffectBase"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.ShaderEffect"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Media.Effects.ShaderEffectBase.IsEnabled">
            <summary>
            Gets a value indicating whether this shader effect is enabled.
            </summary>
            <value>
            	<c>true</c> if this shader effect is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Media.Effects.ShaderEffectBase.Input">
            <summary>
            Gets or sets the input brush.
            </summary>
            <value>The input.</value>
        </member>
        <member name="F:Catel.Windows.Media.Effects.ShaderEffectBase.InputProperty">
            <summary>
            Property definition for <see cref="P:Catel.Windows.Media.Effects.ShaderEffectBase.Input"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.InitializePixelShader">
            <summary>
            Initializes the pixel shader.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.OnPixelShaderInvalidPixelShaderEncountered(System.Object,System.EventArgs)">
            <summary>
            Handles the InvalidPixelShaderEncountered event of the PixelShader control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This is added to prevent a real crash on the app because of an invalid pixel shader.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Media.ImageSourceExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Media.ImageSource"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.ImageSourceExtensions.ConvertByteArrayToImageSource(System.Byte[])">
            <summary>
            Converts an array of bytes to a <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="bytes">Bytes to convert.</param>
            <returns><see cref="T:System.Windows.Media.ImageSource"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bytes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.ImageSourceExtensions.ConvertImageSourceToByteArray(System.Windows.Media.ImageSource)">
            <summary>
            Converts an <see cref="T:System.Windows.Media.ImageSource"/> to an array of bytes.
            </summary>
            <param name="image"><see creConvertImageSourceToByteArrayf="ImageSource"/> to convert.</param>
            <returns>Array of bytes.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="image"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Media.VisualExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Media.Visual"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.VisualExtensions.GetParentWindow(System.Windows.Media.Visual)">
            <summary>
            Get the parent window for this visual object or null when not exists.
            </summary>
            <param name="visualObject">Reference to visual object.</param>
            <returns>Reference to partent window or null when not exists.</returns>
        </member>
        <member name="T:Catel.Windows.Media.Imaging.ImagingExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertBitmapToBitmapSource(System.Drawing.Bitmap)">
            <summary>
            Converts a <see cref="T:System.Drawing.Bitmap"/> to a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> object.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> to convert.</param>
            <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> or null if an error occurs.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.Resize(System.Windows.Media.Imaging.BitmapImage,System.Int32,System.Int32)">
            <summary>
            Resizes the specified bitmap. It resizes the bitmap, but keeps the scale.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="maxHeight">Height of the max.</param>
            <returns>
            	<see cref="T:System.Windows.Media.Imaging.BitmapImage"/> with the right size.
            </returns>
            <remarks>If the original image is 1000x100 px and you specify a new dimension of 100x100 px the resized image is 100x10px</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertToImage(System.Windows.Media.Imaging.BitmapImage)">
            <summary>
            Converts to image.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertToBitmapImage(System.Drawing.Image)">
            <summary>
            Converts to bitmap image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="image"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Controls.MultiLineInput">
            <summary>
            Interaction logic for MultiLineInput.xaml
            </summary>
            <summary>
            MultiLineInput
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MultiLineInput.#ctor">
            <summary>
            Initializes a new instance of this control.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.Caption">
            <summary>
            Gets or sets Caption.
            </summary>
            <remarks>
            Wrapper for the Caption dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.CaptionProperty">
            <summary>
            DependencyProperty definition as the backing store for Caption.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.Text">
            <summary>
            Gets or sets Text.
            </summary>
            <remarks>
            Wrapper for the Text dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.MaxTextLength">
            <summary>
            Gets or sets MaxTextLength.
            </summary>
            <remarks>
            Wrapper for the MaxTextLength dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.MaxTextLengthProperty">
            <summary>
            DependencyProperty definition as the backing store for MaxTextLength.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.IsReadOnly">
            <summary>
            Gets or sets IsReadOnly.
            </summary>
            <remarks>
            Wrapper for the IsReadOnly dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.IsReadOnlyProperty">
            <summary>
            DependencyProperty definition as the backing store for IsReadOnly.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.TextBoxBackground">
            <summary>
            Gets or sets TextBoxBackground.
            </summary>
            <remarks>
            Wrapper for the TextBoxBackground dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.TextBoxBackgroundProperty">
            <summary>
            DependencyProperty definition as the backing store for TextBoxBackground.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MultiLineInput.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.TraceOutputControl">
            <summary>
            Interaction logic for TraceOutputControl.xaml
            </summary>
            <summary>
            TraceOutputControl
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.Controls.TraceOutputControl"/> class.
            </summary>
            <remarks>This method is required for design time support.</remarks>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.TraceOutputControl"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.IgnoreCatelLogging">
            <summary>
            Gets or sets whether the Catel logging should be ignored.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.TraceOutputControl.IgnoreCatelLoggingProperty">
            <summary>
            Using a DependencyProperty as the backing store for IgnoreCatelLogging.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.SelectedLevel">
            <summary>
            Gets or sets the selected level.
            </summary>
            <value>The selected level.</value>
        </member>
        <member name="F:Catel.Windows.Controls.TraceOutputControl.SelectedLevelProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedLevel.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.Clear">
            <summary>
            Clears all messages from the control.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.AnimatedGif">
            <summary>
            User control supporting animated gif.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.AnimatedGif.OnFrameChangedDelegate">
            <summary>
            OnFrameChanged delegate.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.AnimatedGif.IsAnimating">
            <summary>
            Gets or sets a value indicating whether this instance is animating.
            </summary>
            <value>
            	<c>true</c> if this instance is animating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.AnimatedGif.CurrentFrame">
            <summary>
            Gets or sets the current frame.
            </summary>
            <value>The current frame.</value>
        </member>
        <member name="P:Catel.Windows.Controls.AnimatedGif.GifSource">
            <summary>
            Gets or sets GifSource.
            </summary>
            <remarks>
            Wrapper for the GifSource dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.AnimatedGif.GifSourceProperty">
            <summary>
            DependencyProperty definition as the backing store for GifSource.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.GifSource_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the GifSource dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.SetImageGifSource">
            <summary>
            Sets the image gif source.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.GetBitmapResourceFromAssembly(System.Reflection.Assembly)">
            <summary>
            Gets the bitmap resource from a specific assembly.
            </summary>
            <param name="assemblyToSearch">The assembly to search.</param>
            <returns><see cref="T:System.Drawing.Bitmap"/> or null if resource is not found.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.OnFrameChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a frame has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.OnFrameChangedInMainThread">
            <summary>
            Called when a frame changed in the main thread.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.GetBitmapSource(System.Drawing.Bitmap)">
            <summary>
            Gets the bitmap source.
            </summary>
            <param name="gdiBitmap">The GDI bitmap.</param>
            <returns></returns>
        </member>
        <member name="T:Catel.Windows.Controls.DropDownButton">
            <summary>
            DropDownButton, which is unfortunately missing in the controls library of WPF.
            </summary>
            <remarks>
            The code for this control is based on the code found at http://andyonwpf.blogspot.com/2006/10/dropdownbuttons-in-wpf.html.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.DropDownButton"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.DropDownButton.DropDownContent">
            <summary>
            Gets or sets DropDownContent.
            </summary>
            <remarks>
            Wrapper for the DropDownContent dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.DropDownButton.DropDownContentProperty">
            <summary>
            DependencyProperty definition as the backing store for DropDownContent.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.OnDropDownContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the DropDownContent dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.OnPopupLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the popup has lost its focus.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.OnDispatcherTimerTick(System.Object,System.EventArgs)">
            <summary>
            Called when the dispatcher timer has invoked the tick event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.OnClick">
            <summary>
            Called when a control is clicked by the mouse or the keyboard.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.ResetTimer">
            <summary>
            Resets the timer.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.FrameRateCounter">
            <summary>
            A counter to show the frame rate inside an application.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.FrameRateCounter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.FrameRateCounter"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.FrameRateCounter.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="F:Catel.Windows.Controls.FrameRateCounter.PrefixProperty">
            <summary>
            The prefix dependency property definition.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.BindableRun">
            <summary>
            Bindable run class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.BindableRun.BoundText">
            <summary>
            Wrapper for the BoundText dependency property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.BindableRun.BoundTextProperty">
            <summary>
            DependencyProperty definition as the backing store for BoundText
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BindableRun.OnBoundTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the BoundText dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Catel.Windows.Controls.LinkLabel">
            <summary>
            A label looking like the known hyperlink.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.Log">
            <summary>
            The <see cref="T:Catel.Logging.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.Controls.LinkLabel"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.LinkLabel"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.UrlProperty">
            <summary>
            DependencyProperty definition as the backing store for Url
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.HasUrl">
            <summary>
            Indicates whether url has a value.
            </summary>
            <value><c>true</c> if this instance has URL; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.HasUrlProperty">
            <summary>
            DependencyProperty definition as the backing store for HasUrl
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.HyperlinkStyleProperty">
            <summary>
            DependencyProperty definition as the backing store for HyperlinkStyle
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.HyperlinkStyle">
            <summary>
            Gets or sets the hyperlink style.
            </summary>
            <value>The hyperlink style.</value>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.HoverForegroundProperty">
            <summary>
            DependencyProperty definition as the backing store for HoverForeground
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.HoverForeground">
            <summary>
            Gets or sets the hover foreground.
            </summary>
            <value>The hover foreground.</value>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.LinkLabelBehaviorProperty">
            <summary>
            DependencyProperty definition as the backing store for LinkLabelBehavior
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.LinkLabelBehavior">
            <summary>
            Gets or sets the link label behavior.
            </summary>
            <value>The link label behavior.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.ClickBehavior">
            <summary>
            Wrapper for the ClickBehavior dependency property.
            </summary>
            <value>The click behavior.</value>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.ClickBehaviorProperty">
            <summary>
            DependencyProperty definition as the backing store for ClickBehavior
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.CommandParameterProperty">
            <summary>
            DependencyProperty definition as the backing store for CommandParameter
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.CommandProperty">
            <summary>
            DependencyProperty definition as the backing store for Command
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.CommandTargetProperty">
            <summary>
            DependencyProperty definition as the backing store for CommandTarget
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.CommandTarget">
            <summary>
            Gets or sets the command target.
            </summary>
            <value>The command target.</value>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.ClickEvent">
            <summary>
            ClickEvent
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.LinkLabel.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.RequestNavigateEvent">
            <summary>
            RequestNavigateEvent
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.LinkLabel.RequestNavigate">
            <summary>
            Occurs when [request navigate].
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OnLinkLabelUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unloaded event of the LinkLabel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OnUrlPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles change of property Url.
            </summary>
            <param name="sender">A sender.</param>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OnClickBehaviorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles a change of the ClickBehavior property.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OnInnerHyperlinkRequestNavigate(System.Object,System.Windows.Navigation.RequestNavigateEventArgs)">
            <summary>
            Handles the RequestNavigate event of the InnerHyperlink control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Navigation.RequestNavigateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OnInnerHyperlinkClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the InnerHyperlink control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OpenBrowserBehaviorImpl(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click event of the default linklabel.
            </summary>
            <param name="sender">Event sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Catel.Windows.Controls.LinkLabelBehavior">
            <summary>
            Available <see cref="T:Catel.Windows.Controls.LinkLabel"/> behaviors.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelBehavior.SystemDefault">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelBehavior.AlwaysUnderline">
            <summary>
            Always underline.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelBehavior.HoverUnderline">
            <summary>
            Hover underline.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelBehavior.NeverUnderline">
            <summary>
            Never underline.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.LinkLabelClickBehavior">
            <summary>
            Available <see cref="T:Catel.Windows.Controls.LinkLabel"/> clickevent behaviors.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelClickBehavior.Undefined">
            <summary>
            No explicit behavior defined, will use the set-click-event.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelClickBehavior.OpenUrlInBrowser">
            <summary>
            Opens the set url in the systems webbrowser.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.RadioButtonEx">
            <summary>
            A radio button that solves the 2-way binding issue of the <c>RadioButton.IsChecked</c> property in WPF 3.5.
            <para />
            To solve the issue, use this <see cref="T:System.Windows.Controls.RadioButton"/> implementation and bind to the <see cref="P:Catel.Windows.Controls.RadioButtonEx.IsCheckedReal"/> instead of
            <c>RadioButton.IsChecked</c>.
            <para />
            For more information about the issue, see this forum thread:
            http://social.msdn.microsoft.com/forums/en-US/wpf/thread/8eb8280a-19c4-4502-8260-f74633a9e2f2/
            </summary>
            <remarks>
            This code is originally found at http://pstaev.blogspot.com/2008/10/binding-ischecked-property-of.html.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.RadioButtonEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.RadioButtonEx"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.RadioButtonEx.IsCheckedReal">
            <summary>
            Gets or sets IsCheckedReal.
            </summary>
            <remarks>
            Wrapper for the IsCheckedReal dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.RadioButtonEx.IsCheckedRealProperty">
            <summary>
            DependencyProperty definition as the backing store for IsCheckedReal.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RadioButtonEx.OnIsCheckedRealChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.RadioButtonEx.IsCheckedReal"/> property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RadioButtonEx.OnRadioButtonExtendedUnchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unchecked event of the RadioButtonExtended control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.RadioButtonEx.OnRadioButtonExtendedChecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Checked event of the RadioButtonExtended control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.Controls.RichToolTip">
            <summary>
            A kind-of Tooltip implementation that stays open once element is hovered and the content inside is responsive
            <para />
            It corresponds to most of the TooltipService attached properties so use them as you wish
            <para />
            Usage: (Like Tooltip)
            <![CDATA[
            <Control ToolTipService.Placement="Right">
                <xmlns-pfx:RichToolTip.PopupContent>
                    <TextBlock Text="This will be displayed in the popup" />
                </xmlns-pfx:RichToolTip.PopupContent>
            </Control>
            
            <Control ToolTipService.Placement="Right">
                <xmlns-pfx:RichToolTip.PopupContent>
                    <RichToolTip Placement="..." PlacementTarget="..." HorizontalOffset=".." and so on>
                        <TextBlock Text="This will be displayed in the popup" />
                    </RichToolTip>
                </xmlns-pfx:RichToolTip.PopupContent>
            </Control>
            ]]>
            <para />
            Known Issues:
            1 - I didn't have the time nor the strength to care about repositioning. I simply hide the popup whenever it would need repositioning. (Window movement, etc..) But it's ok since it's the default behavior of popup overall.
            2 - XBap mode sets transparency through a hack! supported only in full trust.
            3 - In XBap mode, moving the mouse slowly towards the popup will cause it to hide
            4 - In XBap mode, moving the mouse over the element shows the tooltip even when the browser isn't the active window
            </summary>
            <remarks>
            Originally found at http://blogs.microsoft.co.il/blogs/zuker/archive/2009/01/18/wpf-popups-and-tooltip-behavior-solution.aspx
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.RelatedObject">
            <summary>
            Gets the related object.
            </summary>
            <value>The related object.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.EnableAnimation">
            <summary>
            Gets or sets a value indicating whether to enable animation or not
            </summary>
            <value><c>true</c> if animation should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
            <param name="relatedObject">The related object.</param>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Load(System.Windows.UIElement)">
            <summary>
            Loads the specified related object.
            </summary>
            <param name="relatedObject">The related object.</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.CloseCommand">
            <summary>
            Close command.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementProperty">
            <summary>
            Placement property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.Placement">
            <summary>
            Gets or sets the placement.
            </summary>
            <value>The placement.</value>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementTargetProperty">
            <summary>
            Placement target property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.PlacementTarget">
            <summary>
            Gets or sets the placement target.
            </summary>
            <value>The placement target.</value>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementRectangleProperty">
            <summary>
            Placement rectangle property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.PlacementRectangle">
            <summary>
            Gets or sets the placement rectangle.
            </summary>
            <value>The placement rectangle.</value>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.HorizontalOffsetProperty">
            <summary>
            Horizontal offset property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset.
            </summary>
            <value>The horizontal offset.</value>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.VerticalOffsetProperty">
            <summary>
            Vertical offset property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.VerticalOffset">
            <summary>
            Gets or sets the vertical offset.
            </summary>
            <value>The vertical offset.</value>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.IsOpenProperty">
            <summary>
            IsOpen property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.IsOpen">
            <summary>
            Gets or sets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.GetHideOnClick(System.Windows.DependencyObject)">
            <summary>
            Gets the hide on click.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.SetHideOnClick(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the hide on click.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.HideOnClickProperty">
            <summary>
            Hide on click property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.GetPopupContent(System.Windows.DependencyObject)">
            <summary>
            Gets the content of the popup.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.SetPopupContent(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the content of the popup.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PopupContentProperty">
            <summary>
            Popup content property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Show(System.Boolean)">
            <summary>
            Shows the specified animate.
            </summary>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Hide(System.Boolean)">
            <summary>
            Hides the specified animate.
            </summary>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="T:Catel.Windows.Controls.ScrollViewerProperties">
            <summary>
            Container class for custom Attached properties for ScrollViewer.
            </summary>
            <remarks>
            Source : http://serialseb.blogspot.com/2007/09/wpf-tips-6-preventing-scrollviewer-from.html
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.GetFixScrolling(System.Windows.DependencyObject)">
            <summary>
            Gets the fix scrolling.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.SetFixScrolling(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the fix scrolling.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="F:Catel.Windows.Controls.ScrollViewerProperties.FixScrollingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.OnFixScrollingPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [fix scrolling property changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.HandlePreviewMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the preview mouse wheel.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyCell">
             <summary>
             Control to fill up a row in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control will use an entire row to fill up.
             </summary>
             <example>
             <code>
             <![CDATA[
             <StackGrid>
               <StackGrid.RowDefinitions>
                 <RowDefinition Height="Auto" />
                 <RowDefinition Height="*" />
                 <RowDefinition Height="Auto" />
               </StackGrid.RowDefinitions>
             
               <StackGrid.ColumnDefinitions>
                 <ColumnDefinition Width="Auto" />
                 <ColumnDefinition Width="*" />
               </StackGrid.ColumnDefinitions>
             
               <Label Content="Title" />
               <EmptyCell />
             
               <!-- Name, will be set to row 1, column 1 and 2 -->
               <Label Content="Name" />
               <TextBox Text="{Bindng Name}" />
            
               <!-- Wrappanel, will span 2 columns -->
               <WrapPanel StackGrid.ColumnSpan="2">
                 <Button Command="{Binding OK}" />
               </WrapPanel>
             </StackGrid>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyCell"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyColumn">
            <summary>
            Control to fill up a column in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control is just a placeholder for a grid cell.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row, will in this case use 2 columns -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyColumn"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyRow">
            <summary>
            Control to fill up a row in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control will use an entire row to fill up.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
            	<ColumnDefinition Width="Auto" />
            	<ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row, will in this case use 2 columns -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyRow"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.StackGrid">
            <summary>
            A grid-like control that allows a developer to specify the rows and columns, but gives the freedom
            not to define the actual grid and row numbers of the controls inside the <see cref="T:Catel.Windows.Controls.StackGrid"/>.
            <para />
            The <see cref="T:Catel.Windows.Controls.StackGrid"/> automatically builds up the internal grid.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.StackGrid"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnInitialized(System.Object,System.EventArgs)">
            <summary>
            Called when the control is initialized.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            In the non-WPF implementation, this event is actually hooked to the <c>LayoutUpdated</c> event.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.FinalInitialize">
            <summary>
            Final initialize so the <see cref="T:Catel.Windows.Controls.StackGrid"/> is actually created.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.SetColumnsAndRows">
            <summary>
            Sets the columns and rows.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.LoadTabItemsBehavior">
            <summary>
            Load behavior of the tabs in the <see cref="T:Catel.Windows.Controls.TabControl"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LoadTabItemsBehavior.LazyLoading">
            <summary>
            Load all tabs using lazy loading, but keeps the tabs in memory afterwards.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LoadTabItemsBehavior.LazyLoadingUnloadOthers">
            <summary>
            Load all tabs using lazy loading. As soon as a tab is loaded, all other loaded tabs will be unloaded.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LoadTabItemsBehavior.EagerLoading">
            <summary>
            Load all tabs as soon as the tab control is loaded.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LoadTabItemsBehavior.EagerLoadingOnFirstUse">
            <summary>
            Load all tabs when any of the tabs is used for the first time.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LoadTabItemsBehavior.Single">
            <summary>
            Obsolete, use <see cref="F:Catel.Windows.Controls.LoadTabItemsBehavior.LazyLoading"/> instead.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LoadTabItemsBehavior.SingleUnloadOthers">
            <summary>
            Obsolete, use <see cref="F:Catel.Windows.Controls.LoadTabItemsBehavior.LazyLoadingUnloadOthers"/> instead.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LoadTabItemsBehavior.AllOnStartUp">
            <summary>
            Obsolete, use <see cref="F:Catel.Windows.Controls.LoadTabItemsBehavior.EagerLoading"/> instead.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LoadTabItemsBehavior.AllOnFirstUse">
            <summary>
            Obsolete, use <see cref="F:Catel.Windows.Controls.LoadTabItemsBehavior.EagerLoadingOnFirstUse"/> instead.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.TabControlItemData">
            <summary>
            Item data for a tab control item.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TabControlItemData.#ctor(System.Object,System.Object,System.Windows.DataTemplate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.TabControlItemData" /> class.
            </summary>
            <param name="container">The container.</param>
            <param name="content">The content.</param>
            <param name="contentTemplate">The content template.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:Catel.Windows.Controls.TabControlItemData.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TabControlItemData.TabItem">
            <summary>
            Gets the tab item.
            </summary>
            <value>The tab item.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TabControlItemData.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TabControlItemData.ContentTemplate">
            <summary>
            Gets the content template.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TabControlItemData.Item">
            <summary>
            The item from which it was generated.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Catel.Windows.Controls.TabControl">
            <summary>
            TabControl that will not remove the tab items from the visual tree. This way, views can be re-used.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.TabControl"/>.class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TabControl"/>.class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.Controls.TabControl.LoadTabItems">
            <summary>
            Gets or sets the load tab items.
            <para />
            The default value is <see cref="F:Catel.Windows.Controls.LoadTabItemsBehavior.LazyLoading"/>.
            </summary>
            <value>
            The load tab items.
            </value>
        </member>
        <member name="F:Catel.Windows.Controls.TabControl.LoadTabItemsProperty">
            <summary>
            Dependency property registration for the <see cref="P:Catel.Windows.Controls.TabControl.LoadTabItems"/> property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TabControl.IsLazyLoading">
            <summary>
            Gets or sets a value indicating whether this tab control uses any of the lazy loading options.
            </summary>
            <value><c>true</c> if this instance is lazy loading; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.OnTabControlLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the tab control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.OnItemContainerGeneratorStatusChanged(System.Object,System.EventArgs)">
            <summary>
            If containers are done, generate the selected item.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.OnApplyTemplate">
            <summary>
            Get the ItemsHolder and generate any children.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            When the items change we remove any generated panel children and add any new ones as necessary
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged"/> event.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.CreateChildContentPresenter(System.Object)">
            <summary>
            Create the child ContentPresenter for the given item (could be data or a TabItem)
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.FindChildContentPresenter(System.Object)">
            <summary>
            Find the CP for the given object.  data could be a TabItem or a piece of data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.TabControl.GetSelectedTabItem">
            <summary>
            Copied from TabControl; wish it were protected in that class instead of private.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Catel.Windows.Controls.Filters.TraceEntryFilter">
            <summary>
            Class TraceEntryFilter.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.Filters.TraceEntryFilter.#ctor(System.String,Catel.Logging.LogEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.Filters.TraceEntryFilter" /> class.
            </summary>
            <param name="filterText">The filter text.</param>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:Catel.Windows.Controls.TraceEntry">
            <summary>
            Class containing a log entry as it will be used in the output control.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceEntry.#ctor(Catel.Logging.LogEntry)">
            <summary>
            Initializes a new log entry for the current date/time.
            </summary>
            <param name="entry">The inner log entry.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceEntry.#ctor(Catel.Logging.LogEntry,System.DateTime)">
            <summary>
            Initializes a new instance that can be fully customized.
            </summary>
            <param name="entry">The inner log entry.</param>
            <param name="time"><see cref="T:System.DateTime"/> when the entry was created.</param>
        </member>
        <member name="P:Catel.Windows.Controls.TraceEntry.Message">
            <summary>
            Actual message.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceEntry.LogEvent">
            <summary>
            Log event.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceEntry.Time">
            <summary>
            Date/time of the log message.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.OutputLogListener">
            <summary>
            The output log listener.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.OutputLogListener.#ctor">
            <summary>
            The output log listener.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.TraceOutputViewModel">
            <summary>
            TraceOutput view model.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.TraceOutputViewModel._dispatcherService">
            <summary>
            The dispatcher service.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputViewModel.#ctor(Catel.Services.IDispatcherService)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.TraceOutputViewModel" /> class.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dispatcherService"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.Title">
            <summary>
            Gets the title of the view model.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.IgnoreCatelLogging">
            <summary>
            <c>true</c> if the Catel logging should be ignored.
            <para />
            The default is <c>true</c>.
            </summary>
            <remarks>
            Note that this is a wrapper property and does not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.Levels">
            <summary>
            Gets or sets the available levels.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.SelectedLevel">
            <summary>
            Gets or sets the selected level.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.TraceEntries">
            <summary>
            Gets the list of trace entries.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.TraceEntriesSourceList">
            <summary>
            Gets the trace entries source list.
            </summary>
            <value>The trace entries source list.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.TraceEntriesList">
            <summary>
            Gets the trace entries list.
            </summary>
            <value>The trace entries list.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.SelectedTraceEntries">
            <summary>
            Gets or sets the selected trace entries.
            </summary>
            <value>The selected trace entries.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.ClearOutput">
            <summary>
            Gets the ClearOutput command.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.ClearFilter">
            <summary>
            Gets the clear filter command.
            </summary>
            <value>The clear filter.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputViewModel.CopyToClipboard">
            <summary>
            Gets the CopyToClipboard command.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputViewModel.TraceEntriesToString(System.Collections.Generic.IEnumerable{Catel.Windows.Controls.TraceEntry})">
            <summary>
            Converts a list of trace entries to a string.
            </summary>
            <param name="entries">The entries.</param>
            <returns>STring representing the trace entries.</returns>
        </member>
        <member name="T:Catel.Windows.Controls.WatermarkTextBox">
            <summary>
            WatermarkTextBox which is a simple <see cref="T:System.Windows.Controls.TextBox"/> that is able to show simple and complex watermarks.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WatermarkTextBox.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBox"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WatermarkTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBox"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.WatermarkTextBox.SelectAllOnGotFocus">
            <summary>
            Gets or sets a value indicating whether all text should be selected when the control receives the focus.
            </summary>
            <value><c>true</c> if all text should be selected when the control receives the focus; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="F:Catel.Windows.Controls.WatermarkTextBox.SelectAllOnGotFocusProperty">
            <summary>
            Dependency property registration for the <see cref="P:Catel.Windows.Controls.WatermarkTextBox.SelectAllOnGotFocus"/> property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.WatermarkTextBox.Watermark">
            <summary>
            Gets or sets the watermark to show.
            </summary>
            <value>The watermark.</value>
            <remarks></remarks>
        </member>
        <member name="F:Catel.Windows.Controls.WatermarkTextBox.WatermarkProperty">
            <summary>
            Dependency property registration for the <see cref="P:Catel.Windows.Controls.WatermarkTextBox.Watermark"/> property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.WatermarkTextBox.WatermarkTemplate">
            <summary>
            Gets or sets the watermark template to show.
            </summary>
            <value>The watermark template.</value>
            <remarks></remarks>
        </member>
        <member name="F:Catel.Windows.Controls.WatermarkTextBox.WatermarkTemplateProperty">
            <summary>
            Dependency property registration for the <see cref="P:Catel.Windows.Controls.WatermarkTextBox.WatermarkTemplate"/> property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WatermarkTextBox.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Invoked whenever an unhandled <c>System.Windows.Input.Keyboard.GotKeyboardFocus</c> attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event.
            </summary>
            <param name="e">Provides data about the event.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Windows.Controls.WatermarkTextBox.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was pressed.</param>
            <remarks></remarks>
        </member>
        <member name="T:Catel.Windows.MultiLineInputWindow">
            <summary>
            Window that contains a <see cref="T:Catel.Windows.Controls.MultiLineInput"/> control so the user is able
            to edit a multiline text value.
            </summary>
            <summary>
            MultiLineInputWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.MultiLineInputWindow.#ctor">
            <summary>
            Initializes a new instance of this window.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultiLineInputWindow.Explanation">
            <summary>
            Gets or sets Explanation (textbox caption).
            </summary>
            <remarks>
            Wrapper for the Explanation dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.MultiLineInputWindow.ExplanationProperty">
            <summary>
            DependencyProperty definition as the backing store for Explanation.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultiLineInputWindow.Text">
            <summary>
            Gets or sets Text.
            </summary>
            <remarks>
            Wrapper for the Text dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.MultiLineInputWindow.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultiLineInputWindow.IsTextMandatory">
            <summary>
            Gets or sets IsTextMandatory.
            </summary>
            <remarks>
            Wrapper for the IsTextMandatory dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.MultiLineInputWindow.IsTextMandatoryProperty">
            <summary>
            DependencyProperty definition as the backing store for IsTextMandatory.
            </summary>
        </member>
        <member name="M:Catel.Windows.MultiLineInputWindow.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.MultiLineInputWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Catel.Windows.MultipleChoiceWindow">
            <summary>
            Interaction logic for MultipleChoiceWindow.xaml
            </summary>
            <summary>
            MultipleChoiceWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.#ctor(System.Collections.Generic.IEnumerable{Catel.Windows.Choice})">
            <summary>
            Creates a new instance of the mutliple choice window where specify is allowed.
            </summary>
            <param name="choiceCollection">Collection of <see cref="P:Catel.Windows.MultipleChoiceWindow.Choice"/> objects to display.</param>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.#ctor(System.Collections.Generic.IEnumerable{Catel.Windows.Choice},System.Boolean)">
            <summary>
            Creates a new instance of the mutliple choice window.
            </summary>
            <param name="choiceCollection">Collection of <see cref="P:Catel.Windows.MultipleChoiceWindow.Choice"/> objects to display.</param>
            <param name="allowSpecify">If true, a custom specification is allowed.</param>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.AllowSpecify">
            <summary>
            Gets or sets whether a custom specification is allowed.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.ChoiceCollection">
            <summary>
            Gets or sets the collection of <see cref="P:Catel.Windows.MultipleChoiceWindow.Choice"/> objects.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.ChoiceSpecify">
            <summary>
            Gets or sets ChoiceSpecify.
            </summary>
            <remarks>
            Wrapper for the ChoiceSpecify dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.MultipleChoiceWindow.ChoiceSpecifyProperty">
            <summary>
            DependencyProperty definition as the backing store for ChoiceSpecify.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.SelectedChoice">
            <summary>
            Gets or sets SelectedChoice.
            </summary>
            <remarks>
            Wrapper for the SelectedChoice dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.MultipleChoiceWindow.SelectedChoiceProperty">
            <summary>
            DependencyProperty definition as the backing store for SelectedChoice.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.Choice">
            <summary>
            Gets or sets Choice.
            </summary>
            <remarks>
            Wrapper for the Choice dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.MultipleChoiceWindow.ChoiceProperty">
            <summary>
            DependencyProperty definition as the backing store for Choice.
            </summary>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.OnChoiceSpecifyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the ChoiceSpecify dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.OnSelectedChoiceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the SelectedChoice dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.UpdateChoices">
            <summary>
            Updates the available choices.
            </summary>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.ApplyChangesAsync">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.DiscardChangesAsync">
            <summary>
            Discards all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Catel.Windows.Choice">
            <summary>
            Class representing a choice that can be used in the <see cref="T:Catel.Windows.MultipleChoiceWindow"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Choice.#ctor(System.String)">
            <summary>
            Creates a new choice where the text displayed is the same
            as the value of the choice comment when this choice is chosen.
            </summary>
            <param name="header">Text to display.</param>
        </member>
        <member name="M:Catel.Windows.Choice.#ctor(System.String,System.String)">
            <summary>
            Creates a new reason where the text displayed is different
            then the value of the reason when this reason is chosen.
            </summary>
            <param name="header">Text to display.</param>
            <param name="explanation">Text to set to reason when this reason is chosen.</param>
        </member>
        <member name="M:Catel.Windows.Choice.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new reason where the text displayed is different
            then the value of the reason when this reason is chosen.
            
            This constructor also allows to specify whether customization is allowed.
            </summary>
            <param name="header">Text to display.</param>
            <param name="explanation">Text to set to reason when this reason is chosen.</param>
            <param name="allowCustomization">If true, customization is allowed for this reason.</param>
        </member>
        <member name="P:Catel.Windows.Choice.AllowCustomization">
            <summary>
            Gets whether this reason allows customization.
            </summary>
        </member>
        <member name="P:Catel.Windows.Choice.Header">
            <summary>
            Gets the reason header. This text will be used to display the reason in
            the list of available reasons.
            </summary>
        </member>
        <member name="P:Catel.Windows.Choice.Explanation">
            <summary>
            Gets the explanation of the reason. This text will be used to
            fill the reason text when this reason is chosen.
            </summary>
        </member>
        <member name="P:Catel.Windows.Choice.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Catel.Windows.Data.Converters.OutputTypeConverter">
            <summary>
            Converts an output type to a status that is displayable to the user.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.OutputTypeConverter.AssemblyName">
            <summary>
            Assembly name of the assembly containing the images.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.OutputTypeConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.Windows.PixelShaderMode">
            <summary>
            Sets the available pixel shader modes of Catel.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Off">
            <summary>
            Disable all pixel shaders.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Auto">
            <summary>
            Automatically determine the best option.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Hardware">
            <summary>
            Use hardware for the pixel shaders.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Software">
            <summary>
            Use software for the pixel shaders.
            </summary>
        </member>
        <member name="T:Catel.Windows.StyleHelper">
            <summary>
            Helper class for WPF styles and themes.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.DefaultKeyPrefix">
            <summary>
            Prefix of a default style key.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.DefaultKeyPostfix">
            <summary>
            Postfix of a default style key.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper._resourceDictionaryCache">
            <summary>
            Cached decompiled XAML resource dictionaries.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper._styleToFrameworkElementTypeCache">
            <summary>
            Cached types of <see cref="T:System.Windows.FrameworkElement"/> belonging to the string representation of the type.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.PixelShaderMode">
            <summary>
            This property allows you to disable all pixel shaders in Catel.
            <para />
            By default, all pixel shaders are enabled.
            </summary>
        </member>
        <member name="P:Catel.Windows.StyleHelper.IsStyleForwardingEnabled">
            <summary>
            Gets or sets a value indicating whether style forwarding is enabled. Style forwarding can be
            enabled by calling one of the <see cref="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.String)"/> overloads.
            </summary>
            <value>
            	<c>true</c> if this instance is style forwarding enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Windows.StyleHelper.EnsureApplicationResourcesAndCreateStyleForwarders(System.Uri,System.String)">
            <summary>
            Ensures that an application instance exists and the styles are applied to the application. This method is extremely useful
            to apply when WPF is hosted (for example, when loaded as plugin of a non-WPF application).
            </summary>
            <param name="applicationResourceDictionary">The application resource dictionary.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="applicationResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the current application to retrieve the resources. The forwarders will be written to the same dictionary.
            </summary>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources, but the forwarders will be written to the same dictionary as
            the source dictionary.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            <para/>
            This method will use the passed resources.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="forceForwarders">if set to <c>true</c>, styles will not be completed but only forwarders are created.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <param name="recreateStylesBasedOnTheme">if set to <c>true</c>, the styles will be recreated with BasedOn on the current theme.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix" /> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindResourceDictionaryDeclaringType(System.Windows.ResourceDictionary,System.Type)">
            <summary>
            Finds the <see cref="T:System.Windows.ResourceDictionary"/> declaring the real style for the target type.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="targetType">Type of the target.</param>
            <returns><see cref="T:System.Windows.ResourceDictionary"/> in which the style is defined, or <c>null</c> if not found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindDefaultStyles(System.Windows.ResourceDictionary,System.String)">
            <summary>
            Finds all the the default styles definitions
            </summary>
            <param name="sourceResources">The source resources.</param>
            <param name="defaultPrefix">The default prefix.</param>
            <returns>An enumerable of default styles.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CompleteStyleWithAdditionalInfo(System.Windows.Style,System.Windows.Style)">
            <summary>
            Completes a style with additional info.
            </summary>
            <param name="style">The style.</param>
            <param name="styleWithAdditionalInfo">The style with additional info.</param>
            <returns>New completed style.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="styleWithAdditionalInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.RecreateDefaultStylesBasedOnTheme(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)">
            <summary>
            Recreates the default styles based on theme.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="resources">The resources to fix.</param>
            <param name="defaultPrefix">The default prefix.</param>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CloneStyleIfBasedOnControl(System.Windows.ResourceDictionary,System.Windows.Style,System.Type)">
            <summary>
            Clones a style when the style is based on a control.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="style">The style.</param>
            <param name="basedOnType">Type which the style is based on.</param>
            <returns><see cref="T:System.Windows.Style"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="basedOnType"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            <para />
            Should be used in combination with the <c>RecreateDefaultStylesBasedOnTheme</c> method.
            </remarks>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindFrameworkElementStyleIsBasedOn(System.Uri,System.String)">
            <summary>
            Finds the <see cref="T:System.Windows.FrameworkElement"/> a specific style is based on.
            </summary>
            <param name="resourceDictionaryUri">The resource dictionary URI.</param>
            <param name="styleKey">The style key.</param>
            <returns>
            <see cref="T:System.Type"/> or <c>null</c> if the style is not based on a <see cref="T:System.Windows.FrameworkElement"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resourceDictionaryUri"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="styleKey"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            Should be used in combination with the <see cref="M:Catel.Windows.StyleHelper.RecreateDefaultStylesBasedOnTheme(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)"/> method.
            </remarks>
        </member>
        <member name="T:Catel.ExtensionsControlsModule">
            <summary>
            Extensions.Controls module which allows the registration of default services in the service locator.
            </summary>
        </member>
        <member name="M:Catel.ExtensionsControlsModule.Initialize(Catel.IoC.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Catel.Extensions.Controls.ModuleInitializer">
            <summary>
            Class that gets called as soon as the module is loaded.
            </summary>
            <remarks>
            This is made possible thanks to Fody.
            </remarks>
        </member>
        <member name="M:Catel.Extensions.Controls.ModuleInitializer.Initialize">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.BamlFile">
            <summary>
            Rappresenta un singole file Baml all'interno di un assembly
            </summary>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.LoadContent">
            <summary>
            Carica il Baml attraverso il motore di WPF con Application.LoadComponent
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.Stream">
            <summary>
            Restituisce lo stream originale contenente il Baml
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.Uri">
            <summary>
            Restituisce l'indirizzo secondo lo schema pack://
            </summary>
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.IType">
            <summary>
            Interface rappresenting a DotNet type
            </summary>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.String)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.
            </summary>
            
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned.
            </returns>
            
            <param name="name">The qualified name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.String,System.String)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.
            </summary>
            
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.
            </returns>
            
            <param name="namespaceURI">The namespace URI of the attribute. </param>
            <param name="name">The local name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.Int32)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified index.
            </summary>
            
            <returns>
            The value of the specified attribute. This method does not move the reader.
            </returns>
            
            <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToAttribute(System.String)">
            <summary>
            When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.
            </summary>
            
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
            
            <param name="name">The qualified name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.
            </summary>
            
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
            
            <param name="name">The local name of the attribute. </param>
            <param name="ns">The namespace URI of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToFirstAttribute">
            <summary>
            When overridden in a derived class, moves to the first attribute.
            </summary>
            
            <returns>
            true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToNextAttribute">
            <summary>
            When overridden in a derived class, moves to the next attribute.
            </summary>
            
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToElement">
            <summary>
            When overridden in a derived class, moves to the element that contains the current attribute node.
            </summary>
            
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadAttributeValue">
            <summary>
            When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            
            <returns>
            true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Read">
            <summary>
            When overridden in a derived class, reads the next node from the stream.
            </summary>
            
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Close">
            <summary>
            When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState"></see> to Closed.
            </summary>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.LookupNamespace(System.String)">
            <summary>
            When overridden in a derived class, resolves a namespace prefix in the current element's scope.
            </summary>
            
            <returns>
            The namespace URI to which the prefix maps or null if no matching prefix is found.
            </returns>
            
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ResolveEntity">
            <summary>
            When overridden in a derived class, resolves the entity reference for EntityReference nodes.
            </summary>
            
            <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity"></see> returns false). </exception>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NodeType">
            <summary>
            When overridden in a derived class, gets the type of the current node.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Xml.XmlNodeType"></see> values representing the type of the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.LocalName">
            <summary>
            When overridden in a derived class, gets the local name of the current node.
            </summary>
            
            <returns>
            The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NamespaceURI">
            <summary>
            When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
            
            <returns>
            The namespace URI of the current node; otherwise an empty string.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Prefix">
            <summary>
            When overridden in a derived class, gets the namespace prefix associated with the current node.
            </summary>
            
            <returns>
            The namespace prefix associated with the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.HasValue">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value"></see>.
            </summary>
            
            <returns>
            true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Resolver">
            <summary>
            Returns object used to resolve types
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Value">
            <summary>
            When overridden in a derived class, gets the text value of the current node.
            </summary>
            
            <returns>
            The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType"></see> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. 
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.RootNamespaces">
            <summary>
            Return root namespaces
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Depth">
            <summary>
            When overridden in a derived class, gets the depth of the current node in the XML document.
            </summary>
            
            <returns>
            The depth of the current node in the XML document.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.BaseURI">
            <summary>
            When overridden in a derived class, gets the base URI of the current node.
            </summary>
            
            <returns>
            The base URI of the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.IsEmptyElement">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
            
            <returns>
            true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType"></see> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.AttributeCount">
            <summary>
            When overridden in a derived class, gets the number of attributes on the current node.
            </summary>
            
            <returns>
            The number of attributes on the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.EOF">
            <summary>
            When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            
            <returns>
            true if the reader is positioned at the end of the stream; otherwise, false.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadState">
            <summary>
            When overridden in a derived class, gets the state of the reader.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Xml.ReadState"></see> values.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NameTable">
            <summary>
            When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.
            </summary>
            
            <returns>
            The XmlNameTable enabling you to get the atomized version of a string within the node.
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
            <summary>
            Gets a collection of defined prefix-namespace Mappings that are currently in scope.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IDictionary"></see> that contains the current in-scope namespaces.
            </returns>
            
            <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value that specifies the type of namespace nodes to return.</param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
            <summary>
            Gets the namespace URI mapped to the specified prefix.
            </summary>
            
            <returns>
            The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.
            </returns>
            
            <param name="prefix">The prefix whose namespace URI you wish to find.</param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
            <summary>
            Gets the prefix that is mapped to the specified namespace URI.
            </summary>
            
            <returns>
            The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.
            </returns>
            
            <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping">
            <summary>
            Rappresenta la mappatura tra namespace XML e namespace CLR con relativo assembly
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.XmlNamespace">
            <summary>
            Restituisce o imposta il namespace XML
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.AssemblyId">
            <summary>
            Restituisce l'id dell'assembly
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.ClrNamespace">
            <summary>
            Restituisce il namespace clr
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.Presentation">
            <summary>
            Restituisce il mapping di default di WPF
            </summary>
        </member>
    </members>
</doc>
