<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Catel.Extensions.Controls</name>
    </assembly>
    <members>
        <member name="T:Catel.ExtensionsControlsModule">
            <summary>
            Extensions.Controls module which allows the registration of default services in the service locator.
            </summary>
        </member>
        <member name="M:Catel.ExtensionsControlsModule.Initialize(Catel.IoC.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Catel.Extensions.Controls.ModuleInitializer">
            <summary>
            Class that gets called as soon as the module is loaded.
            </summary>
            <remarks>
            This is made possible thanks to Fody.
            </remarks>
        </member>
        <member name="M:Catel.Extensions.Controls.ModuleInitializer.Initialize">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyCell">
             <summary>
             Control to fill up a row in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control will use an entire row to fill up.
             </summary>
             <example>
             <code>
             <![CDATA[
             <StackGrid>
               <StackGrid.RowDefinitions>
                 <RowDefinition Height="Auto" />
                 <RowDefinition Height="*" />
                 <RowDefinition Height="Auto" />
               </StackGrid.RowDefinitions>
             
               <StackGrid.ColumnDefinitions>
                 <ColumnDefinition Width="Auto" />
                 <ColumnDefinition Width="*" />
               </StackGrid.ColumnDefinitions>
             
               <Label Content="Title" />
               <EmptyCell />
             
               <!-- Name, will be set to row 1, column 1 and 2 -->
               <Label Content="Name" />
               <TextBox Text="{Bindng Name}" />
            
               <!-- Wrappanel, will span 2 columns -->
               <WrapPanel StackGrid.ColumnSpan="2">
                 <Button Command="{Binding OK}" />
               </WrapPanel>
             </StackGrid>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyCell"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyColumn">
            <summary>
            Control to fill up a column in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control is just a placeholder for a grid cell.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row, will in this case use 2 columns -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyColumn"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyRow">
            <summary>
            Control to fill up a row in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control will use an entire row to fill up.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
            	<ColumnDefinition Width="Auto" />
            	<ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row, will in this case use 2 columns -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyRow"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.StackGrid">
            <summary>
            A grid-like control that allows a developer to specify the rows and columns, but gives the freedom
            not to define the actual grid and row numbers of the controls inside the <see cref="T:Catel.Windows.Controls.StackGrid"/>.
            <para />
            The <see cref="T:Catel.Windows.Controls.StackGrid"/> automatically builds up the internal grid.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.StackGrid"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnInitialized(System.Object,System.EventArgs)">
            <summary>
            Called when the control is initialized.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            In the non-WPF implementation, this event is actually hooked to the <c>LayoutUpdated</c> event.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.FinalInitialize">
            <summary>
            Final initialize so the <see cref="T:Catel.Windows.Controls.StackGrid"/> is actually created.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.SetColumnsAndRows">
            <summary>
            Sets the columns and rows.
            </summary>
        </member>
        <member name="T:Catel.Windows.PixelShaderMode">
            <summary>
            Sets the available pixel shader modes of Catel.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Off">
            <summary>
            Disable all pixel shaders.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Auto">
            <summary>
            Automatically determine the best option.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Hardware">
            <summary>
            Use hardware for the pixel shaders.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Software">
            <summary>
            Use software for the pixel shaders.
            </summary>
        </member>
        <member name="T:Catel.Windows.StyleHelper">
            <summary>
            Helper class for WPF styles and themes.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.DefaultKeyPrefix">
            <summary>
            Prefix of a default style key.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.DefaultKeyPostfix">
            <summary>
            Postfix of a default style key.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.PixelShaderMode">
            <summary>
            This property allows you to disable all pixel shaders in Catel.
            <para />
            By default, all pixel shaders are enabled.
            </summary>
        </member>
        <member name="P:Catel.Windows.StyleHelper.IsStyleForwardingEnabled">
            <summary>
            Gets or sets a value indicating whether style forwarding is enabled. Style forwarding can be
            enabled by calling one of the <see cref="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.String)"/> overloads.
            </summary>
            <value>
            	<c>true</c> if this instance is style forwarding enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the current application to retrieve the resources. The forwarders will be written to the same dictionary.
            </summary>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources, but the forwarders will be written to the same dictionary as
            the source dictionary.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            <para/>
            This method will use the passed resources.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="forceForwarders">if set to <c>true</c>, styles will not be completed but only forwarders are created.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <param name="recreateStylesBasedOnTheme">if set to <c>true</c>, the styles will be recreated with BasedOn on the current theme.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix" /> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindResourceDictionaryDeclaringType(System.Windows.ResourceDictionary,System.Type)">
            <summary>
            Finds the <see cref="T:System.Windows.ResourceDictionary"/> declaring the real style for the target type.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="targetType">Type of the target.</param>
            <returns><see cref="T:System.Windows.ResourceDictionary"/> in which the style is defined, or <c>null</c> if not found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindDefaultStyles(System.Windows.ResourceDictionary,System.String)">
            <summary>
            Finds all the the default styles definitions
            </summary>
            <param name="sourceResources">The source resources.</param>
            <param name="defaultPrefix">The default prefix.</param>
            <returns>An enumerable of default styles.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CompleteStyleWithAdditionalInfo(System.Windows.Style,System.Windows.Style)">
            <summary>
            Completes a style with additional info.
            </summary>
            <param name="style">The style.</param>
            <param name="styleWithAdditionalInfo">The style with additional info.</param>
            <returns>New completed style.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="styleWithAdditionalInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CloneStyleIfBasedOnControl(System.Windows.ResourceDictionary,System.Windows.Style,System.Type)">
            <summary>
            Clones a style when the style is based on a control.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="style">The style.</param>
            <param name="basedOnType">Type which the style is based on.</param>
            <returns><see cref="T:System.Windows.Style"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="basedOnType"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            <para />
            Should be used in combination with the <c>RecreateDefaultStylesBasedOnTheme</c> method.
            </remarks>
        </member>
    </members>
</doc>
