<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Catel.MVVM</name>
    </assembly>
    <members>
        <member name="T:Catel.CatelEnvironment">
            <summary>
            Class containing environment information.
            </summary>
        </member>
        <member name="F:Catel.CatelEnvironment.DefaultMultiLingualDependencyPropertyValue">
            <summary>
            The default value for dependency properties that use a Properties.Resources value. Such values should be set in the constructor
            of the control instead of the dependency property to allow runtime switching of languages.
            </summary>
        </member>
        <member name="F:Catel.CatelEnvironment.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="P:Catel.CatelEnvironment.IsInDesignMode">
            <summary>
            Gets or sets a value indicating whether the environment is currently in design mode.
            </summary>
            <value>
            <c>true</c> if the environment is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.CatelEnvironment.BypassDevEnvCheck">
            <summary>
            Gets or sets a value indicating whether the "devenv.exe" check should be bypassed. By default, the <see cref="P:Catel.CatelEnvironment.IsInDesignMode"/>
            also checks whether the current process is "devenv.exe".
            <para />
            This behavior is not very useful when using Catel in Visual Studio extensions, so it is possible to bypass that specific check.
            </summary>
            <value><c>true</c> if the check should be bypassed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.CatelEnvironment.DisablePropertyChangeNotifications">
            <summary>
            Gets or sets a value indicating whether property change notifications are currently disabled for all instances.
            </summary>
            <value><c>true</c> if property change notifications should be disabled for all instances; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.CatelEnvironment.RegisterDefaultViewModelServices">
            <summary>
            Registers the default view model services in the default <see cref="T:Catel.IoC.ServiceLocator"/>. This call can come in handy when the 
            services should be accessed before any view model is created.
            </summary>
        </member>
        <member name="P:Catel.CatelEnvironment.MainWindow">
            <summary>
            Gets the main window of the application. This is a convenience call to easily allow the retrieval of the main window
            for each target framework (WPF, Silverlight, Windows Phone, etc).
            </summary>
        </member>
        <member name="M:Catel.CatelEnvironment.GetIsInDesignMode">
            <summary>
            Gets whether the software is currently in design mode.
            <para />
            Note that unless the <see cref="P:Catel.CatelEnvironment.IsInDesignMode"/>, the value is not cached but always determined at runtime.
            </summary>
            <returns><c>true</c> if the software is in design mode, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.CatelEnvironment.GetIsInDesignMode(System.Boolean)">
            <summary>
            Gets whether the software is currently in design mode.
            <para />
            Note that unless the <see cref="P:Catel.CatelEnvironment.IsInDesignMode" />, the value is not cached but always determined at runtime.
            </summary>
            <param name="initializeDesignTime">if set to <c>true</c>, automatically call <see cref="M:Catel.DesignTimeHelper.InitializeDesignTime"/> if in design mode.</param>
            <returns><c>true</c> if the software is in design mode, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Catel.Collections.NotifyRangedCollectionChangedEventArgs">
            <summary>
            The ranged notify collection changed event args.
            </summary>
        </member>
        <member name="M:Catel.Collections.NotifyRangedCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Collections.NotifyRangedCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Catel.Collections.NotifyRangedCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Collections.NotifyRangedCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="changedItems">The changed items.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="P:Catel.Collections.NotifyRangedCollectionChangedEventArgs.Indices">
            <summary>
            Gets the indices.
            </summary>
        </member>
        <member name="T:Catel.Collections.FastObservableCollection`1">
            <summary>
            Fast implementation of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> where the change notifications
            can be suspended.
            </summary>
            <typeparam name="T">Type of the elements contained by this collection.</typeparam>
        </member>
        <member name="F:Catel.Collections.FastObservableCollection`1._suspensionContext">
            <summary>
            The current suspension context.
            </summary>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Collections.FastObservableCollection`1" /> class.
            </summary>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Collections.FastObservableCollection`1" /> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Collections.FastObservableCollection`1" /> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Catel.Collections.FastObservableCollection`1.IsDirty">
            <summary>
            Gets or sets a value indicating whether change to the collection is made when
            its notifications are suspended.
            </summary>
            <value><c>true</c> if this instance is has been changed while notifications are
            suspended; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Collections.FastObservableCollection`1.NotificationsSuspended">
            <summary>
            Gets a value indicating whether change notifications are suspended.
            </summary>
            <value>
            <c>True</c> if notifications are suspended, otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Collections.FastObservableCollection`1.AutomaticallyDispatchChangeNotifications">
            <summary>
            Gets or sets a value indicating whether events should automatically be dispatched to the UI thread.
            </summary>
            <value><c>true</c> if events should automatically be dispatched to the UI thread; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.InsertItems(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Inserts the elements of the specified collection at the specified index.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The start index.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.InsertItems(System.Collections.Generic.IEnumerable{`0},System.Int32,Catel.Collections.SuspensionMode)">
            <summary>
            Inserts the elements of the specified collection at the specified index.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The start index.</param>
            <param name="mode">The suspension mode.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.InsertItems(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Inserts the elements of the specified collection at the specified index.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The start index.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.InsertItems(System.Collections.IEnumerable,System.Int32,Catel.Collections.SuspensionMode)">
            <summary>
            Inserts the elements of the specified collection at the specified index.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The start index.</param>
            <param name="mode">The suspension mode.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.Reset">
            <summary>
            Raises <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> with 
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> changed action.
            </summary>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.AddItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified items to the collection without causing a change notification for all items.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.AddItems(System.Collections.Generic.IEnumerable{`0},Catel.Collections.SuspensionMode)">
            <summary>
            Adds the specified items to the collection without causing a change notification for all items.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <param name="mode">The suspension mode.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.AddItems(System.Collections.IEnumerable)">
            <summary>
            Adds the specified items to the collection without causing a change notification for all items.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.AddItems(System.Collections.IEnumerable,Catel.Collections.SuspensionMode)">
            <summary>
            Adds the specified items to the collection without causing a change notification for all items.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <param name="mode">The suspension mode.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.RemoveItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified items from the collection without causing a change notification for all items.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.RemoveItems(System.Collections.Generic.IEnumerable{`0},Catel.Collections.SuspensionMode)">
            <summary>
            Removes the specified items from the collection without causing a change notification for all items.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <param name="mode">The suspension mode.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.RemoveItems(System.Collections.IEnumerable)">
            <summary>
            Removes the specified items from the collection without causing a change notification for all items.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.RemoveItems(System.Collections.IEnumerable,Catel.Collections.SuspensionMode)">
            <summary>
            Removes the specified items from the collection without causing a change notification for all items.
            <para />
            This method will raise a change notification at the end.
            </summary>
            <param name="collection">The collection.</param>
            <param name="mode">The suspension mode.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.SuspendChangeNotifications">
            <summary>
            Suspends the change notifications until the returned <see cref="T:System.IDisposable"/> is disposed.
            <example>
            <code>
            <![CDATA[
            var fastCollection = new FastObservableCollection<int>();
            using (fastCollection.SuspendChangeNotificaftions())
            {
                // Adding or removing events inside here will not raise events
                fastCollection.Add(1);
                fastCollection.Add(2);
                fastCollection.Add(3);
            
                fastCollection.Remove(3);
                fastCollection.Remove(2);
                fastCollection.Remove(1);
            }
            ]]>
            </code>
            </example>
            </summary>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.SuspendChangeNotifications(Catel.Collections.SuspensionMode)">
            <summary>
            Suspends the change notifications until the returned <see cref="T:System.IDisposable"/> is disposed.
            <example>
            <code>
            <![CDATA[
            var fastCollection = new FastObservableCollection<int>();
            using (fastCollection.SuspendChangeNotificaftions())
            {
                // Adding or removing events inside here will not raise events
                fastCollection.Add(1);
                fastCollection.Add(2);
                fastCollection.Add(3);
            
                fastCollection.Remove(3);
                fastCollection.Remove(2);
                fastCollection.Remove(1);
            }
            ]]>
            </code>
            </example>
            </summary>
            <param name="mode">The suspension Mode.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.NotifyChanges">
            <summary>
            Notifies external classes of property changes.
            </summary>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> event, but also makes sure the event is dispatched to the UI thread.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <c>ObservableCollection{T}.PropertyChanged</c> event, but also makes sure the event is dispatched to the UI thread.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert.</param>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param><param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Catel.Collections.FastObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param><param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="T:Catel.Collections.SuspensionContext`1">
            <summary>
            Context class the hold all relevant data while notifications are suspended.
            </summary>
            <typeparam name="T">Type of the elements contained by the suspending collection.</typeparam>
        </member>
        <member name="M:Catel.Collections.SuspensionContext`1.#ctor(Catel.Collections.SuspensionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Collections.SuspensionContext`1" /> class.
            </summary>
            <param name="mode">The suspension mode.</param>
        </member>
        <member name="P:Catel.Collections.SuspensionContext`1.Count">
            <summary>
            Gets or sets the suspension count.
            </summary>
        </member>
        <member name="P:Catel.Collections.SuspensionContext`1.Mode">
            <summary>
            Gets the suspension mode.
            </summary>
        </member>
        <member name="P:Catel.Collections.SuspensionContext`1.NewItemIndices">
            <summary>
            Gets the indices od the added items while change notifications were suspended.
            </summary>
        </member>
        <member name="P:Catel.Collections.SuspensionContext`1.NewItems">
            <summary>
            Gets the added items while change notifications were suspended.
            </summary>
        </member>
        <member name="P:Catel.Collections.SuspensionContext`1.OldItemIndices">
            <summary>
            Gets the indices od the removed items while change notifications were suspended.
            </summary>
        </member>
        <member name="P:Catel.Collections.SuspensionContext`1.OldItems">
            <summary>
            Gets the removed items while change notifications were suspended.
            </summary>
        </member>
        <member name="T:Catel.Data.DispatcherObservableObject">
            <summary>
            Implementation of the <see cref="T:Catel.Data.ObservableObject"/> class that will dispatch all change notifications
            to the UI thread using the <see cref="T:Catel.Services.IDispatcherService"/>.
            </summary>
        </member>
        <member name="F:Catel.Data.DispatcherObservableObject._dispatcherService">
            <summary>
            The dispatcher service used to dispatch all calls.
            </summary>
        </member>
        <member name="M:Catel.Data.DispatcherObservableObject.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Data.DispatcherObservableObject"/> class.
            </summary>
        </member>
        <member name="M:Catel.Data.DispatcherObservableObject.RaisePropertyChanging(System.Object,Catel.Data.AdvancedPropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Data.ObservableObject.PropertyChanging"/> event.
            <para/>
            This is the one and only method that actually raises the <see cref="E:Catel.Data.ObservableObject.PropertyChanging"/> event. All other
            methods are (and should be) just overloads that eventually call this method.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Data.DispatcherObservableObject.RaisePropertyChanged(System.Object,Catel.Data.AdvancedPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Data.ObservableObject.PropertyChanged"/> event.
            <para/>
            This is the one and only method that actually raises the <see cref="E:Catel.Data.ObservableObject.PropertyChanged"/> event. All other
            methods are (and should be) just overloads that eventually call this method.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.DesignTimeCodeAttribute">
            <summary>
            Attribute to support code at design time.
            </summary>
        </member>
        <member name="M:Catel.DesignTimeCodeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.DesignTimeCodeAttribute"/> class.
            </summary>
            <param name="typeToConstruct">The type to construct.</param>
        </member>
        <member name="T:Catel.DesignTimeInitializer">
            <summary>
            Initializes design-time code.
            </summary>
        </member>
        <member name="M:Catel.DesignTimeInitializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.DesignTimeInitializer"/> class.
            </summary>
        </member>
        <member name="P:Catel.DesignTimeInitializer.CanInitialize">
            <summary>
            Gets a value indicating whether this instance can be initialized.
            </summary>
            <value><c>true</c> if this instance can be initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.DesignTimeInitializer.InternalInitialize">
            <summary>
            Initializes the design time data.
            </summary>
        </member>
        <member name="M:Catel.DesignTimeInitializer.Initialize">
            <summary>
            Initializes the design time data.
            </summary>
        </member>
        <member name="T:Catel.DesignTimeHelper">
            <summary>
            Design time helper.
            </summary>
        </member>
        <member name="M:Catel.DesignTimeHelper.InitializeDesignTime">
            <summary>
            Initializes the designer options.
            </summary>
        </member>
        <member name="T:Catel.INotifyPropertyChangedExtensions">
            <summary>
            Extension methods for the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="M:Catel.INotifyPropertyChangedExtensions.SubscribeToPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Subscribes to the specified property.
            </summary>
            <param name="notifyPropertyChanged">The notify property changed.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="notifyPropertyChanged"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.StringExtensions">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:Catel.StringExtensions.GetUniqueControlName(System.String)">
            <summary>
            Gets the a unique name for a control. This is sometimes required in some frameworks.
            <para />
            The name is made unique by appending a unique guid.
            </summary>
            <param name="controlName">Name of the control.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Catel.ThemeHelper">
            <summary>
            Theme helper to ensure themes are loaded upon usage.
            </summary>
        </member>
        <member name="M:Catel.ThemeHelper.EnsureCatelMvvmThemeIsLoaded">
            <summary>
            Ensures that the Catel.MVVM theme is loaded.
            </summary>
        </member>
        <member name="M:Catel.ThemeHelper.EnsureThemeIsLoaded(System.Uri)">
            <summary>
            Ensures that the specified theme is loaded.
            </summary>
            <param name="resourceUri">The resource URI.</param>
        </member>
        <member name="M:Catel.ThemeHelper.EnsureThemeIsLoaded(System.Uri,System.Func{System.Boolean})">
            <summary>
            Ensures that the specified theme is loaded.
            </summary>
            <param name="resourceUri">The resource URI.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="T:Catel.MVVM.ModuleInitializer">
            <summary>
            Class that gets called as soon as the module is loaded.
            </summary>
            <remarks>
            This is made possible thanks to Fody.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ModuleInitializer.Initialize">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="T:Catel.MVVM.Auditing.AuditingManager">
            <summary>
            Handles the auditing for MVVM inside Catel.
            <para/>
            Use this manager to register custom auditors.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Auditing.AuditingManager._instance">
            <summary>
            Instance of this singleton class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Auditing.AuditingManager._auditors">
            <summary>
            List of currently registered auditors.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Auditing.AuditingManager.IsAuditingEnabled">
            <summary>
            Gets a value indicating whether auditing is enabled. Auditing is enabled when at least 1 auditor is registered.
            </summary>
            <value><c>true</c> if auditing is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Auditing.AuditingManager.RegisteredAuditorsCount">
            <summary>
            Gets the number of registered auditors.
            </summary>
            <value>The number of registered auditors.</value>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.Clear">
            <summary>
            Clears all the current auditors.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.RegisterAuditor``1">
            <summary>
            Registers a auditor and automatically instantiates it by using the <see cref="T:Catel.IoC.ITypeFactory"/>.
            </summary>
            <typeparam name="TAuditor">The type of the auditor.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.RegisterAuditor(Catel.MVVM.Auditing.IAuditor)">
            <summary>
            Registers a specific auditor.
            </summary>
            <param name="auditor">The auditor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="auditor"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.UnregisterAuditor(Catel.MVVM.Auditing.IAuditor)">
            <summary>
            Unregisters a specific auditor.
            <para />
            If the auditor is not registered, nothing happens.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="auditor"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCreating(System.Type)">
            <summary>
            Must be called when a specific view model type is being created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCreated(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a specific view model type is created.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnPropertyChanging(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Must be called when the property of a view model is about to change.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnPropertyChanged(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Must be called when the property of a view model has just changed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnCommandExecuted(Catel.MVVM.IViewModel,System.String,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Must be called when a command of a view model has just been executed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="commandName">Name of the command, which is the name of the command property.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelSaving(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model is about to be saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelSaved(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model has just been saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCanceling(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model is about to be canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCanceled(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model has just been canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelClosing(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model is about to be closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelClosed(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model has just been closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.UpdateState">
            <summary>
            Updates the state.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Auditing.AuditorBase">
            <summary>
            Convenience implementation of the <see cref="T:Catel.MVVM.Auditing.IAuditor"/> interface so not all interface members
            have to be implemented by the developer.
            <para />
            This auditor also ignores the default properties such as <c>IsDirty</c> since hardly anyone
            would be interested in such changes. To enable the notification, clear the <see cref="P:Catel.MVVM.Auditing.AuditorBase.PropertiesToIgnore"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Auditing.AuditorBase"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Auditing.AuditorBase.PropertiesToIgnore">
            <summary>
            Gets a list of properties that should be ignored.
            </summary>
            <value>The list of properties to ignore.</value>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelCreating(System.Type)">
            <summary>
            Called when a specific view model type is being created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelCreated(Catel.MVVM.IViewModel)">
            <summary>
            Called when a specific view model type is created.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnPropertyChanging(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Called when the property of a view model is about to change.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnPropertyChanged(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Called when the property of a view model has just changed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnCommandExecuted(Catel.MVVM.IViewModel,System.String,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command of a view model has just been executed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="commandName">Name of the command, which is the name of the command property.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelSaving(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelSaved(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelCanceling(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelCanceled(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelClosing(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelClosed(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="T:Catel.MVVM.Auditing.AuditingHelper">
            <summary>
            Helper for auditing which handles the complete subscription of an <see cref="T:Catel.MVVM.IViewModel"/> instance
            to the current auditing manager.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.MVVM.Auditing.AuditingHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingHelper.RegisterViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Registers the view model to the <see cref="T:Catel.MVVM.Auditing.AuditingManager"/>.
            <para />
            This helper will automatically unsubscribe from all events when the view model is closed.
            </summary>
            <param name="viewModel">The view model to register.</param>
            <remarks>
            This helper will call the <see cref="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCreating(System.Type)"/> and <see cref="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCreated(Catel.MVVM.IViewModel)"/>
            automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingHelper.SubscribeEvents(Catel.MVVM.IViewModel)">
            <summary>
            Subscribes to all events of the view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingHelper.UnsubscribeEvents(Catel.MVVM.IViewModel)">
            <summary>
            Unsubscribes from all events of the view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.Auditing.IAuditor">
            <summary>
            Interface for auditors that can register itself with the <see cref="T:Catel.MVVM.Auditing.AuditingManager"/>.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Auditing.IAuditor.PropertiesToIgnore">
            <summary>
            Gets a list of properties that should be ignored.
            </summary>
            <value>The list of properties to ignore.</value>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelCreating(System.Type)">
            <summary>
            Called when a specific view model type is being created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelCreated(Catel.MVVM.IViewModel)">
            <summary>
            Called when a specific view model type is created.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnPropertyChanging(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Called when the property of a view model is about to change.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnPropertyChanged(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Called when the property of a view model has just changed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnCommandExecuted(Catel.MVVM.IViewModel,System.String,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command of a view model has just been executed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="commandName">Name of the command, which is the name of the command property.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelSaving(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelSaved(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelCanceling(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelCanceled(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelClosing(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelClosed(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="T:Catel.MVVM.AsynchronousCommand`2">
            <summary>
            Command that allows an action to be exceuted asynchronous. This way, it can be canceled and will not block the
            UI thread.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.#ctor(System.Action{`0},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.#ctor(System.Action{`0},System.Action,System.Func{`1,System.Boolean},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="executeWithParameter">The action to execute with parameter.</param>
            <param name="executeWithoutParameter">The action to execute without parameter.</param>
            <param name="canExecuteWithParameter">The function to call to determine wether the command can be executed with parameter.</param>
            <param name="canExecuteWithoutParameter">The function to call to determine wether the command can be executed without parameter.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="P:Catel.MVVM.AsynchronousCommand`2.IsExecuting">
            <summary>
            Gets or sets a value indicating whether this instance is executing.
            </summary>
            <value>
            	<c>true</c> if this instance is executing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.AsynchronousCommand`2.IsCancelationRequested">
            <summary>
            Gets or sets a value indicating whether this instance is cancelation requested.
            </summary>
            <value>
            	<c>true</c> if this instance is cancelation requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.AsynchronousCommand`2.ShouldCancel">
            <summary>
            Gets a value indicating whether the command should cancel itself.
            </summary>
            <value>
              <c>true</c> if the command should be canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.AsynchronousCommand`2.CancelCommand">
            <summary>
            Gets the cancel command.
            </summary>
        </member>
        <member name="E:Catel.MVVM.AsynchronousCommand`2.Executing">
            <summary>
            Occurs when the command is about to execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.AsynchronousCommand`2.Canceled">
            <summary>
            Occurs when the command is canceled.
            </summary>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.ReportProgress(System.Action)">
            <summary>
            Reports progress on the UI thread.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c></exception>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.Execute(`0,System.Boolean)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <param name="ignoreCanExecuteCheck">if set to <c>true</c>, the check on <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> will be used before actually executing the action.</param>
        </member>
        <member name="T:Catel.MVVM.AsynchronousCommand`1">
            <summary>
            Implements the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class with only the <typeparamref name="TExecuteParameter"/> 
            as generic type.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`1.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.AsynchronousCommand">
            <summary>
            Implements the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class with <see cref="T:System.Object"/> as generic types.
            </summary>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.CommandBase">
            <summary>
            Base class for generic command classes. Contains protected static services for using in derived classes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.CommandBase.AuthenticationProvider">
            <summary>
            Authentication provider.
            </summary>
        </member>
        <member name="F:Catel.MVVM.CommandBase.DispatcherService">
            <summary>
            Dispatcher service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.MVVM.CommandBase"/> class.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Command`2">
            <summary>
            Class to implement commands in the <see cref="T:Catel.MVVM.ViewModelBase"/>.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Action,System.Func{`1,System.Boolean},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="executeWithParameter">The action to execute with parameter.</param>
            <param name="executeWithoutParameter">The action to execute without parameter.</param>
            <param name="canExecuteWithParameter">The function to call to determine wether the command can be executed with parameter.</param>
            <param name="canExecuteWithoutParameter">The function to call to determine wether the command can be executed without parameter.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="E:Catel.MVVM.Command`2.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Command`2.Executed">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Command`2.ExecutedAsync">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Command`2.Tag">
            <summary>
            Gets the tag for this command. A tag is a way to link any object to a command so you can use your own
            methods to recognize the commands, for example by ID or string.
            <para/>
            By default, the value is <c>null</c>.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:Catel.MVVM.Command`2.AutomaticallyDispatchEvents">
            <summary>
            Gets or sets a value indicating whether events should automatically be dispatched to the UI thread.
            <para />
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.InitializeActions(System.Action{`0},System.Action,System.Func{`1,System.Boolean},System.Func{System.Boolean})">
            <summary>
            Initializes the actions.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Not a default parameter value because the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> has no default parameter value.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute(`1)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            <c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <remarks>
            Not a default parameter value because the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> has no default parameter value.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(`0,System.Boolean)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <param name="ignoreCanExecuteCheck">if set to <c>true</c>, the check on <see cref="M:Catel.MVVM.Command`2.CanExecute"/> will be used before actually executing the action.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.RaiseExecuted(System.Object)">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.Executed"/> event.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.RaiseExecutedAsync(System.Object)">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.Executed" /> event.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Catel.MVVM.Command`1">
            <summary>
            Implements the <see cref="T:Catel.MVVM.Command`2"/> class with only the <typeparamref name="TExecuteParameter"/> as generic type.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.Command">
            <summary>
            Implements the <see cref="T:Catel.MVVM.Command`2"/> class with <see cref="T:System.Object"/> as generic types.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.CommandContainerBase">
            <summary>
            Container for application-wide commands.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase.#ctor(System.String,Catel.MVVM.ICommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandContainerBase"/> class.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="commandManager">The command manager.</param>
        </member>
        <member name="T:Catel.MVVM.CommandContainerBase`1">
            <summary>
            Container for application-wide commands.
            </summary>
            <typeparam name="TParameter">The type of the command parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase`1.#ctor(System.String,Catel.MVVM.ICommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandContainerBase`1"/> class.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="commandManager">The command manager.</param>
        </member>
        <member name="T:Catel.MVVM.CommandContainerBase`2">
            <summary>
            Container for application-wide commands.
            </summary>
            <typeparam name="TExecuteParameter">The type of the command execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the command can execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase`2.#ctor(System.String,Catel.MVVM.ICommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandContainerBase`2"/> class.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="commandManager">The command manager.</param>
        </member>
        <member name="T:Catel.MVVM.CommandContainerBase`3">
            <summary>
            Container for application-wide commands.
            </summary>
            <typeparam name="TExecuteParameter">The type of the command execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the command can execute parameter.</typeparam>
            <typeparam name="TPogress">The type of the pogress.</typeparam>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase`3.#ctor(System.String,Catel.MVVM.ICommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandContainerBase`3"/> class.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="commandManager">The command manager.</param>
        </member>
        <member name="P:Catel.MVVM.CommandContainerBase`3.CommandName">
            <summary>
            Gets the name of the command.
            </summary>
            <value>The name of the command.</value>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase`3.InvalidateCommand">
            <summary>
            Invalidates the command.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase`3.CanExecute(`1)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase`3.ExecuteInternalAsync(`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase`3.ExecuteAsync(`0)">
            <summary>
            Execute the command as an asynchronous operation.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Catel.MVVM.CommandContainerBase`3.Execute(`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="T:Catel.MVVM.CommandManager">
            <summary>
            Manager that takes care of application-wide commands and can dynamically forward
            them to the right view models.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandManager"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.CommandManager.IsKeyboardEventsSuspended">
            <summary>
            Gets or sets a value indicating whether the keyboard events are suspended.
            </summary>
            <value><c>true</c> if the keyboard events are suspended; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Catel.MVVM.CommandManager.CommandCreated">
            <summary>
            Occurs when a command has been created.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)">
            <summary>
            Creates the command inside the command manager.
            <para />
            If the <paramref name="throwExceptionWhenCommandIsAlreadyCreated"/> is <c>false</c> and the command is already created, only
            the input gesture is updated for the existing command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="inputGesture">The input gesture.</param>
            <param name="compositeCommand">The composite command. If <c>null</c>, this will default to a new instance of <see cref="T:Catel.MVVM.CompositeCommand" />.</param>
            <param name="throwExceptionWhenCommandIsAlreadyCreated">if set to <c>true</c>, this method will throw an exception when the command is already created.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName" /> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is already created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)" /> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.InvalidateCommands">
            <summary>
            Invalidates the all the currently registered commands.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandManager.GetCommands">
            <summary>
            Gets all the registered commands.
            </summary>
            <returns>The names of the commands.</returns>
        </member>
        <member name="M:Catel.MVVM.CommandManager.GetCommand(System.String)">
            <summary>
            Gets the command created with the command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>The <see cref="T:System.Windows.Input.ICommand"/> or <c>null</c> if the command is not created.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.IsCommandCreated(System.String)">
            <summary>
            Determines whether the specified command name is created.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns><c>true</c> if the specified command name is created; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.ExecuteCommand(System.String)">
            <summary>
            Executes the command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.RegisterCommand(System.String,System.Windows.Input.ICommand,Catel.MVVM.IViewModel)">
            <summary>
            Registers a command with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="command">The command.</param>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.RegisterAction(System.String,System.Action)">
            <summary>
            Registers the action with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.RegisterAction(System.String,System.Action{System.Object})">
            <summary>
            Registers the action with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.UnregisterCommand(System.String,System.Windows.Input.ICommand)">
            <summary>
            Unregisters a command with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.UnregisterAction(System.String,System.Action)">
            <summary>
            Unregisters the action with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.UnregisterAction(System.String,System.Action{System.Object})">
            <summary>
            Unregisters the action with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.GetOriginalInputGesture(System.String)">
            <summary>
            Gets the original input gesture with which the command was initially created.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>The input gesture or <c>null</c> if there is no input gesture for the specified command.</returns>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.GetInputGesture(System.String)">
            <summary>
            Gets the input gesture for the specified command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>The input gesture or <c>null</c> if there is no input gesture for the specified command.</returns>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.UpdateInputGesture(System.String,Catel.Windows.Input.InputGesture)">
            <summary>
            Updates the input gesture for the specified command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="inputGesture">The new input gesture.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandManager.ResetInputGestures">
            <summary>
            Resets the input gestures to the original input gestures with which the commands were registered.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandManager.SubscribeToKeyboardEvents">
            <summary>
            Subscribes to keyboard events.
            </summary>
        </member>
        <member name="T:Catel.MVVM.CommandManagerWrapper">
            <summary>
            Wrapper class to support key down events and automatically invoke commands on the <see cref="T:Catel.MVVM.ICommandManager" />.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandManagerWrapper.#ctor(Windows.UI.Xaml.FrameworkElement,Catel.MVVM.ICommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandManagerWrapper" /> class.
            </summary>
            <param name="view">The view.</param>
            <param name="commandManager">The command manager.</param>
        </member>
        <member name="P:Catel.MVVM.CommandManagerWrapper.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="T:Catel.MVVM.CompositeCommand">
            <summary>
            Composite command which allows several commands inside a single command being exposed to a view.
            </summary>
        </member>
        <member name="F:Catel.MVVM.CompositeCommand.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2" /> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.CompositeCommand.CheckCanExecuteOfAllCommandsToDetermineCanExecuteForCompositeCommand">
            <summary>
            Gets or sets whether this command should check the can execute of all commands to determine can execute for composite command.
            <para />
            The default value is <c>true</c> which means the composite command can only be executed if all commands can be executed. If
            there is a requirement to allow partial invocation, set this property to false.
            </summary>
            <value>The check can execute of all commands to determine can execute for composite command.</value>
        </member>
        <member name="P:Catel.MVVM.CompositeCommand.AllowPartialExecution">
            <summary>
            Gets or sets a value indicating whether partial execution of commands is allowed. If this value is <c>true</c>, this composite
            command will always be executable and only invoke the internal commands that are executable.
            <para />
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if partial execution is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.CompositeCommand.AtLeastOneMustBeExecutable">
            <summary>
            Gets or sets a value indicating whether at least one command must be executable. This will prevent the command to be 
            executed without any commands.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if at least one command must be executed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.GetCommands">
            <summary>
            Gets the commands currently registered to this composite command.
            </summary>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.GetActions">
            <summary>
            Gets the actions currently registered to this composite command.
            </summary>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.GetActionsWithParameter">
            <summary>
            Gets the actions with parameters currently registered to this composite command.
            </summary>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.RegisterCommand(System.Windows.Input.ICommand,Catel.MVVM.IViewModel)">
            <summary>
            Registers the specified command.
            </summary>
            <param name="command">The command.</param>
            <param name="viewModel">The view model. If specified, the command will automatically be unregistered when the view model is closed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
            <remarks>
            Note that if the view model is not specified, the command must be unregistered manually in order to prevent memory leaks.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.RegisterAction(System.Action)">
            <summary>
            Registers the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.RegisterAction(System.Action{System.Object})">
            <summary>
            Registers the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.UnregisterCommand(System.Windows.Input.ICommand)">
            <summary>
            Unregisters the specified command.
            </summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.UnregisterAction(System.Action)">
            <summary>
            Unregisters the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CompositeCommand.UnregisterAction(System.Action{System.Object})">
            <summary>
            Unregisters the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.CommandCanceledEventArgs">
            <summary>
            CommandCanceledEventArgs, just like above but allows the event to 
            be cancelled.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandCanceledEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandCanceledEventArgs"/> class.
            </summary>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="P:Catel.MVVM.CommandCanceledEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Catel.MVVM.CommandCanceledEventArgs"/> command should be cancelled.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.MVVM.CommandCreatedEventArgs">
            <summary>
            Event args when a command is created.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandCreatedEventArgs.#ctor(System.Windows.Input.ICommand,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandCreatedEventArgs" /> class.
            </summary>
            <param name="command">The command.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Catel.MVVM.CommandCreatedEventArgs.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.MVVM.CommandCreatedEventArgs.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Catel.MVVM.CommandEventArgs">
            <summary>
            CommandEventArgs, simply holds the command parameter.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandEventArgs"/> class.
            </summary>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="P:Catel.MVVM.CommandEventArgs.CommandParameter">
            <summary>
            Gets the command parameter used for the execution.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="T:Catel.MVVM.CommandExecutedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation for the event when an <see cref="T:Catel.MVVM.ICatelCommand"/> has been executed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandExecutedEventArgs.#ctor(Catel.MVVM.ICatelCommand,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandExecutedEventArgs"/> class.
            </summary>
            <param name="command">The command that just has been executed.</param>
            <param name="commandParameter">The command parameter that was used for the execution.</param>
            <param name="commandPropertyName">The property name under which the command is registered.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.CommandExecutedEventArgs.Command">
            <summary>
            Gets the command that just has been executed.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.MVVM.CommandExecutedEventArgs.CommandParameter">
            <summary>
            Gets the command parameter used for the execution.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="P:Catel.MVVM.CommandExecutedEventArgs.CommandPropertyName">
            <summary>
            Gets the property name under which the command is registered
            </summary>
            <value>The name of the command property.</value>
        </member>
        <member name="T:Catel.MVVM.CommandProgressChangedEventArgs`1">
            <summary>
            Event args for event when <see cref="T:Catel.MVVM.TaskCommand"/> progress changes.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandProgressChangedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandProgressChangedEventArgs`1"/> class.
            </summary>
            <param name="progress"></param>
        </member>
        <member name="P:Catel.MVVM.CommandProgressChangedEventArgs`1.Progress">
            <summary>
            Progress info.
            </summary>
        </member>
        <member name="T:Catel.MVVM.CommandHelper">
            <summary>
            Helper class for the <see cref="T:Catel.MVVM.Command"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandHelper.CreateCommand(System.Action,System.Linq.Expressions.Expression{System.Func{Catel.Data.IValidationSummary}},System.Object)">
            <summary>
            Creates a new <see cref="T:Catel.MVVM.Command"/> that automatically determines whether it can be executed. It does this
            by checking the right validation summary, which should be in a property..
            </summary>
            <param name="execute">The action to execute when the command is being invoked.</param>
            <param name="validationSummaryPropertyExpression">The validation summary property expression.</param>
            <param name="tag">The tag for the command.</param>
            <returns>The created command.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="execute"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationSummaryPropertyExpression"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandHelper.CreateCommand``1(System.Action{``0},System.Linq.Expressions.Expression{System.Func{Catel.Data.IValidationSummary}},System.Object)">
            <summary>
            Creates a new <see cref="T:Catel.MVVM.Command`1"/> that automatically determines whether it can be executed. It does this
            by checking the right validation summary, which should be in a property..
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <param name="execute">The action to execute when the command is being invoked.</param>
            <param name="validationSummaryPropertyExpression">The validation summary property expression.</param>
            <param name="tag">The tag for the command.</param>
            <returns>The created command.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="execute"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationSummaryPropertyExpression"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandHelper.CreateTaskCommand(System.Func{System.Threading.Tasks.Task},System.Linq.Expressions.Expression{System.Func{Catel.Data.IValidationSummary}},System.Object)">
            <summary>
            Creates a new <see cref="T:Catel.MVVM.TaskCommand"/> that automatically determines whether it can be executed. It does this
            by checking the right validation summary, which should be in a property..
            </summary>
            <param name="execute">The action to execute when the command is being invoked.</param>
            <param name="validationSummaryPropertyExpression">The validation summary property expression.</param>
            <param name="tag">The tag for the command.</param>
            <returns>The created command.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="execute"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationSummaryPropertyExpression"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandHelper.CreateTaskCommand``1(System.Func{``0,System.Threading.Tasks.Task},System.Linq.Expressions.Expression{System.Func{Catel.Data.IValidationSummary}},System.Object)">
            <summary>
            Creates a new <see cref="T:Catel.MVVM.TaskCommand`1"/> that automatically determines whether it can be executed. It does this
            by checking the right validation summary, which should be in a property..
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <param name="execute">The action to execute when the command is being invoked.</param>
            <param name="validationSummaryPropertyExpression">The validation summary property expression.</param>
            <param name="tag">The tag for the command.</param>
            <returns>The created command.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="execute"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationSummaryPropertyExpression"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.IAuthenticationProvider">
            <summary>
            Interface to allow an authentication mechanism to control the CanExecute state of a command.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IAuthenticationProvider.CanCommandBeExecuted(Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Determines whether the specified <paramref name="command"/> can be executed. The class implementing this interface
            can use any required method to check the command.
            <para />
            It is recommended to use the <see cref="P:Catel.MVVM.ICatelCommand.Tag"/> property to identify a command.
            </summary>
            <param name="command">The command that is requested.</param>
            <param name="commandParameter">The command parameter.</param>
            <returns>
            	<c>true</c> if the specified command can be excecuted; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The <c>CanExecute</c> state of a command is queried a lot. The command itself does not cache any results because
            it is not aware of role or identity changes. If caching is required, this must be implemented in the class implementing
            the <see cref="T:Catel.MVVM.IAuthenticationProvider"/> interface.a
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IAuthenticationProvider.HasAccessToUIElement(Windows.UI.Xaml.FrameworkElement,System.Object,System.Object)">
            <summary>
            Determines whether the user has access to the specified <paramref name="element"/>. This method is invoked
            by the <c>Authentication</c> behavior, and can be used to disable or hide UI elements based on a role or any
            other authentication mechanism.
            <para />
            This method will only be called for UI elements with the <c>Authentication</c> behavior.
            </summary>
            <param name="element">The element.</param>
            <param name="tag">The tag, retrieved from <c>FrameworkElement.Tag</c>.</param>
            <param name="authenticationTag">The authentication tag specified by the calling object.</param>
            <returns>
            	<c>true</c> if the user has access to the specified UI element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.MVVM.ICatelCommand">
            <summary>
            Advanced <see cref="T:System.Windows.Input.ICommand"/> interface definition to provide advanced functionality.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ICatelCommand.Tag">
            <summary>
            Gets the tag for this command. A tag is a way to link any object to a command so you can use your own
            methods to recognize the commands, for example by ID or string.
            <para />
            By default, the value is <c>null</c>.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="E:Catel.MVVM.ICatelCommand.Executed">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ICatelCommand.ExecutedAsync">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand.CanExecute">
            <summary>
            Invokes the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" /> with <c>null</c> as parameter.
            </summary>
            <returns><c>true</c> if this instance can execute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand.Execute">
            <summary>
            Invokes the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" /> with <c>null</c> as parameter.
            </summary>
            <returns><c>true</c> if this instance can execute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Catel.MVVM.ICatelCommand`2">
            <summary>
            Advanced <see cref="T:System.Windows.Input.ICommand" /> interface definition to provide advanced functionality.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand`2.CanExecute(`1)">
            <summary>
            Invokes the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" /> with <c>null</c> as parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if this instance can execute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand`2.Execute(`0)">
            <summary>
            Invokes the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" /> with <c>null</c> as parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if this instance can execute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Catel.MVVM.ICatelTaskCommand`1">
            <summary>
            Advanced <see cref="T:System.Windows.Input.ICommand" /> interface definition to provide advanced functionality.
            Supports async/await/Task methods for commands with progress reporting and cancellation token.
            </summary>
            <typeparam name="TProgress">The type of the progress.</typeparam>
        </member>
        <member name="P:Catel.MVVM.ICatelTaskCommand`1.IsExecuting">
            <summary>
            Gets or sets a value indicating whether this instance is executing.
            </summary>
            <value><c>true</c> if this instance is executing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ICatelTaskCommand`1.IsCancellationRequested">
            <summary>
            Gets or sets a value indicating whether this instance is cancellation requested.
            </summary>
            <value><c>true</c> if this instance is cancellation requested; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ICatelTaskCommand`1.CancelCommand">
            <summary>
            Gets the cancel command.
            </summary>
            <value>The cancel command.</value>
        </member>
        <member name="M:Catel.MVVM.ICatelTaskCommand`1.Cancel">
            <summary>
            Requests cancellation of the command.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ICatelTaskCommand`1.Executing">
            <summary>
            Occurs when the command is about to execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ICatelTaskCommand`1.Canceled">
            <summary>
            Occurs when the command is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ICatelTaskCommand`1.ProgressChanged">
            <summary>
            Raised for each reported progress value.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ICommandManager">
            <summary>
            Manager that takes care of application-wide commands and can dynamically forward
            them to the right view models.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ICommandManager.IsKeyboardEventsSuspended">
            <summary>
            Gets or sets a value indicating whether the keyboard events are suspended.
            </summary>
            <value><c>true</c> if the keyboard events are suspended; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)">
            <summary>
            Creates the command inside the command manager.
            <para />
            If the <paramref name="throwExceptionWhenCommandIsAlreadyCreated"/> is <c>false</c> and the command is already created, only
            the input gesture is updated for the existing command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="inputGesture">The input gesture.</param>
            <param name="compositeCommand">The composite command. If <c>null</c>, this will default to a new instance of <see cref="T:Catel.MVVM.CompositeCommand"/>.</param>
            <param name="throwExceptionWhenCommandIsAlreadyCreated">if set to <c>true</c>, this method will throw an exception when the command is already created.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is already created using the <see cref="M:Catel.MVVM.ICommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.IsCommandCreated(System.String)">
            <summary>
            Determines whether the specified command name is created.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns><c>true</c> if the specified command name is created; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.RegisterCommand(System.String,System.Windows.Input.ICommand,Catel.MVVM.IViewModel)">
            <summary>
            Registers a command with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="command">The command.</param>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.UnregisterCommand(System.String,System.Windows.Input.ICommand)">
            <summary>
            Unregisters a command with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.ExecuteCommand(System.String)">
            <summary>
            Executes the command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.GetCommands">
            <summary>
            Gets all the registered commands.
            </summary>
            <returns>The names of the commands.</returns>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.GetCommand(System.String)">
            <summary>
            Gets the command created with the command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>The <see cref="T:System.Windows.Input.ICommand"/> or <c>null</c> if the command is not created.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.GetOriginalInputGesture(System.String)">
            <summary>
            Gets the original input gesture with which the command was initially created.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>The input gesture or <c>null</c> if there is no input gesture for the specified command.</returns>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.ICommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.GetInputGesture(System.String)">
            <summary>
            Gets the input gesture for the specified command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>The input gesture or <c>null</c> if there is no input gesture for the specified command.</returns>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.UpdateInputGesture(System.String,Catel.Windows.Input.InputGesture)">
            <summary>
            Updates the input gesture for the specified command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="inputGesture">The new input gesture.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.ICommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.ResetInputGestures">
            <summary>
            Resets the input gestures to the original input gestures with which the commands were registered.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.SubscribeToKeyboardEvents">
            <summary>
            Subscribes to keyboard events.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.RegisterAction(System.String,System.Action)">
            <summary>
            Registers the action with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.UnregisterAction(System.String,System.Action)">
            <summary>
            Unregisters the action with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.InvalidateCommands">
            <summary>
            Invalidates the all the currently registered commands.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.RegisterAction(System.String,System.Action{System.Object})">
            <summary>
            Registers the action with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="M:Catel.MVVM.ICommandManager.UnregisterAction(System.String,System.Action{System.Object})">
            <summary>
            Unregisters the action with the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="commandName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The specified command is not created using the <see cref="M:Catel.MVVM.CommandManager.CreateCommand(System.String,Catel.Windows.Input.InputGesture,Catel.MVVM.ICompositeCommand,System.Boolean)"/> method.</exception>
        </member>
        <member name="E:Catel.MVVM.ICommandManager.CommandCreated">
            <summary>
            Occurs when a command has been created.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ICompositeCommand">
            <summary>
            Composite command which allows several commands inside a single command being exposed to a view.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ICompositeCommand.CheckCanExecuteOfAllCommandsToDetermineCanExecuteForCompositeCommand">
            <summary>
            Gets or sets whether this command should check the can execute of all commands to determine can execute for composite command.
            <para />
            The default value is <c>true</c> which means the composite command can only be executed if all commands can be executed. If
            there is a requirement to allow partial invocation, set this property to false.
            </summary>
            <value>The check can execute of all commands to determine can execute for composite command.</value>
        </member>
        <member name="P:Catel.MVVM.ICompositeCommand.AllowPartialExecution">
            <summary>
            Gets or sets a value indicating whether partial execution of commands is allowed. If this value is <c>true</c>, this composite
            command will always be executable and only invoke the internal commands that are executable.
            <para />
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if partial execution is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ICompositeCommand.AtLeastOneMustBeExecutable">
            <summary>
            Gets or sets a value indicating whether at least one command must be executable. This will prevent the command to be 
            executed without any commands.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if at least one command must be executed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.GetCommands">
            <summary>
            Gets the commands currently registered to this composite command.
            </summary>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.GetActions">
            <summary>
            Gets the actions currently registered to this composite command.
            </summary>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.GetActionsWithParameter">
            <summary>
            Gets the actions with parameters currently registered to this composite command.
            </summary>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.RegisterCommand(System.Windows.Input.ICommand,Catel.MVVM.IViewModel)">
            <summary>
            Registers the specified command.
            </summary>
            <param name="command">The command.</param>
            <param name="viewModel">The view model. If specified, the command will automatically be unregistered when the view model is closed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
            <remarks>
            Note that if the view model is not specified, the command must be unregistered manually in order to prevent memory leaks.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.RegisterAction(System.Action)">
            <summary>
            Registers the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.UnregisterCommand(System.Windows.Input.ICommand)">
            <summary>
            Unregisters the specified command.
            </summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.UnregisterAction(System.Action)">
            <summary>
            Unregisters the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.RegisterAction(System.Action{System.Object})">
            <summary>
            Registers the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ICompositeCommand.UnregisterAction(System.Action{System.Object})">
            <summary>
            Unregisters the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.ITaskProgressReport">
            <summary>
            Interface for task progress report.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ITaskProgressReport.Status">
            <summary>
            Status of the task progress.
            </summary>
            <value>The status.</value>
        </member>
        <member name="T:Catel.MVVM.IViewModelCommandManager">
            <summary>
            Command manager for view models.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelCommandManager.AddHandler(System.Action{Catel.MVVM.IViewModel,System.String,System.Windows.Input.ICommand,System.Object})">
            <summary>
            Adds a new handler when a command is executed on the specified view model.
            </summary>
            <param name="handler">The handler to execute when a command is executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelCommandManager.AddHandler(System.Func{Catel.MVVM.IViewModel,System.String,System.Windows.Input.ICommand,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Adds a new handler when a command is executed on the specified view model.
            </summary>
            <param name="handler">The handler to execute when a command is executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelCommandManager.InvalidateCommands(System.Boolean)">
            <summary>
            Invalidates all the commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/>.
            </summary>
            <param name="force">If <c>true</c>, the commands are re-initialized. The default value is <c>false</c>.</param>
        </member>
        <member name="T:Catel.MVVM.TaskCommand`3">
            <summary>
            Class to implement asynchronous task commands in the <see cref="T:Catel.MVVM.ViewModelBase" />.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>
            <typeparam name="TProgress">The type of the progress report value.</typeparam>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`3" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`3" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.#ctor(System.Func{System.Threading.CancellationToken,System.IProgress{`2},System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{`2},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`3" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="reportProgress">Action is executed each time task progress is reported.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`3" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`3" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.#ctor(System.Func{`0,System.Threading.CancellationToken,System.IProgress{`2},System.Threading.Tasks.Task},System.Func{`1,System.Boolean},System.Action{`2},System.Object)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Catel.MVVM.TaskCommand`3" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="reportProgress">Action is executed each time task progress is reported.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.#ctor(System.Func{`1,System.Boolean},System.Func{System.Boolean},System.Action{`2},System.Object)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Catel.MVVM.TaskCommand`3" /> class.
            </summary>
            <param name="canExecuteWithParameter">The function to call to determine whether the command can be executed with
            parameter.</param>
            <param name="canExecuteWithoutParameter">The function to call to determine whether the command can be executed without
            parameter.</param>
            <param name="reportProgress">Action is executed each time task progress is reported.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="E:Catel.MVVM.TaskCommand`3.Executing">
            <summary>
            Occurs when the command is about to execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.TaskCommand`3.Canceled">
            <summary>
            Occurs when the command is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.TaskCommand`3.ProgressChanged">
            <summary>
            Raised for each reported progress value.
            </summary>
        </member>
        <member name="P:Catel.MVVM.TaskCommand`3.IsExecuting">
            <summary>
            Gets or sets a value indicating whether this instance is executing.
            </summary>
            <value><c>true</c> if this instance is executing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.TaskCommand`3.IsCancellationRequested">
            <summary>
            Gets or sets a value indicating whether this instance is cancellation requested.
            </summary>
            <value><c>true</c> if this instance is cancellation requested; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.TaskCommand`3.CancelCommand">
            <summary>
            Gets the cancel command.
            </summary>
            <value>The cancel command.</value>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.CanExecute(`1)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.Execute(`0,System.Boolean)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can
            be set to null.</param>
            <param name="ignoreCanExecuteCheck">if set to <c>true</c>, the check on <see cref="M:Catel.MVVM.Command`2.CanExecute" /> will be used before
            actually executing the action.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.Cancel">
            <summary>
            Requests cancellation of the command.
            </summary>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`3.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.CanExecuteChanged"/> event
            and raise can-execute-changed method of the <see cref="P:Catel.MVVM.TaskCommand`3.CancelCommand"/>.
            </summary>
        </member>
        <member name="T:Catel.MVVM.TaskCommand`2">
            <summary>
            Implements the <see cref="T:Catel.MVVM.TaskCommand`3" /> class with only the
            <typeparamref name="TExecuteParameter" /> as generic type.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`2.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`1" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`2.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`1" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.TaskCommand`1">
            <summary>
            Implements the <see cref="T:Catel.MVVM.TaskCommand`3" /> class with only the
            <typeparamref name="TExecuteParameter" /> as generic type.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`1" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{`0,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`1" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.TaskCommand">
            <summary>
            Implements the <see cref="T:Catel.MVVM.TaskCommand`3" /> class with
            <see cref="T:System.Object" /> as generic types.
            </summary>
        </member>
        <member name="M:Catel.MVVM.TaskCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.TaskCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.ProgressiveTaskCommand`2">
            <summary>
            Implements the <see cref="T:Catel.MVVM.TaskCommand`3" />
            class with only the <typeparamref name="TExecuteParameter" /> and <typeparamref name="TProgress" /> as generic
            types.
            </summary>
            <typeparam name="TProgress">Type of the progress change info.</typeparam>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.ProgressiveTaskCommand`2.#ctor(System.Func{System.Threading.CancellationToken,System.IProgress{`0},System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ProgressiveTaskCommand`2" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="reportProgress">Action is executed each time task progress is reported.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.ProgressiveTaskCommand`1">
            <summary>
            Implements the <see cref="T:Catel.MVVM.TaskCommand`3" /> class with only the
            <typeparamref name="TProgress" /> as generic type.
            </summary>
            <typeparam name="TProgress">Type of the progress change info.</typeparam>
        </member>
        <member name="M:Catel.MVVM.ProgressiveTaskCommand`1.#ctor(System.Func{System.Threading.CancellationToken,System.IProgress{`0},System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.TaskCommand`1" /> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine whether the command can be executed.</param>
            <param name="reportProgress">Action is executed each time task progress is reported.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.ViewModelCommandManager">
            <summary>
            Command manager that manages the execution state of all commands of a view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager._instances">
            <summary>
            Dictionary containing all instances of all view model command managers.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager._lock">
            <summary>
            The lock object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager._commandHandlers">
            <summary>
            A list of registered command handlers.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager._asyncCommandHandlers">
            <summary>
            A list of registered command handlers.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager._commands">
            <summary>
            A list of commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/> interface.
            </summary>
            <remarks>
            Internal so the <see cref="T:Catel.MVVM.ViewModelManager"/> can subscribe to the commands. The string is the property name
            the command is registered with.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager._viewModel">
            <summary>
            The view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager._viewModelType">
            <summary>
            The view model type;
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelCommandManager._commandProperties">
            <summary>
            A list of reflection properties for the commands.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelCommandManager.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelCommandManager" /> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelCommandManager.Create(Catel.MVVM.IViewModel)">
            <summary>
            Registers the commands in a specific <see cref="T:Catel.MVVM.IViewModel" /> instance. By subscribing
            to all commands, the <see cref="E:Catel.MVVM.IViewModel.CommandExecuted" /> can be intercepted.
            <para />
            This method will automatically subscribe to the <see cref="E:Catel.MVVM.IViewModel.Closed"/> event and unsubscribe all commands
            at that time.
            </summary>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelCommandManager.RegisterCommands(System.Boolean)">
            <summary>
            Registers the commands in a specific <see cref="T:Catel.MVVM.IViewModel" /> instance. By subscribing
            to all commands, the <see cref="E:Catel.MVVM.IViewModel.CommandExecuted" /> can be intercepted.
            <para />
            This method will automatically subscribe to the <see cref="E:Catel.MVVM.IViewModel.Closed"/> event and unsubscribe all commands
            at that time.
            </summary>
            <param name="force">If <c>true</c>, the already registered commands are cleared and all are registered again.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelCommandManager.AddHandler(System.Action{Catel.MVVM.IViewModel,System.String,System.Windows.Input.ICommand,System.Object})">
            <summary>
            Adds a new handler when a command is executed on the specified view model.
            </summary>
            <param name="handler">The handler to execute when a command is executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelCommandManager.AddHandler(System.Func{Catel.MVVM.IViewModel,System.String,System.Windows.Input.ICommand,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Adds a new handler when a command is executed on the specified view model.
            </summary>
            <param name="handler">The handler to execute when a command is executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelCommandManager.InvalidateCommands(System.Boolean)">
            <summary>
            Invalidates all the commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/>.
            </summary>
            <param name="force">If <c>true</c>, the commands are re-initialized. The default value is <c>false</c>.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelCommandManager.UnregisterCommands">
            <summary>
            Unregisters the commands in the <see cref="T:Catel.MVVM.IViewModel" /> instance.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Converters.BooleanToGrayscaleConverter">
            <summary>
            Converts a boolean to a grayscale saturation value. If the input is <c>false</c>, this converter will
            return <c>0</c>, otherwise <c>1</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToGrayscaleConverter.#ctor">
            <summary>
            Initialzies the <see cref="T:Catel.MVVM.Converters.BooleanToGrayscaleConverter"/>.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Converters.BooleanToGrayscaleConverter.FalseResult">
            <summary>
            The value a input value of false will be converted to.
            <para />
            The default value is <c>0</c>.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Converters.BooleanToGrayscaleConverter.TrueResult">
            <summary>
            The value a input value of true will be converted to.<br />
            <para />
            The default value is <c>1</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToGrayscaleConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.BooleanToOppositeBooleanConverter">
            <summary>
            Convert a value to it's inverted value.
            </summary>
            <remarks>Currently only values of type bool are accepted.</remarks>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToOppositeBooleanConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToOppositeBooleanConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.BooleanToTextConverterMode">
            <summary>
            Available modes for the <see cref="T:Catel.MVVM.Converters.BooleanToTextConverter"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Converters.BooleanToTextConverterMode.YesNo">
            <summary>
            True becomes <c>Yes</c>, false becomes <c>No</c>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Converters.BooleanToTextConverterMode.X">
            <summary>
            True becomes <c>x</c>, false becomes <c></c> (thus empty).
            </summary>
        </member>
        <member name="T:Catel.MVVM.Converters.BooleanToTextConverter">
            <summary>
            BooleanToTextConverter.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Converters.BooleanToTextConverter.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToTextConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToTextConverter.ParseMode(System.String)">
            <summary>
            Parses the parameter and returns a <see cref="T:Catel.MVVM.Converters.BooleanToTextConverterMode"/> that represents the parameter. 
            </summary>
            <param name="parameter"><see cref="T:Catel.MVVM.Converters.BooleanToTextConverterMode"/> as text.</param>
            <returns><see cref="T:Catel.MVVM.Converters.BooleanToTextConverterMode"/> as it was passed as a string.</returns>
            <remarks>
            If the parameter is invalid, or the method fails to parse the parameter, <see cref="F:Catel.MVVM.Converters.BooleanToTextConverterMode.YesNo"/>
            will be returned as a default value.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.BooleanToCollapsingVisibilityConverter">
            <summary>
            Convert from bool to <see cref="T:System.Windows.Visibility" /> and back.
            The bool value true will be converted to Visibility.Visible.
            The bool value false will be converted to Visibility.Collapsed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.BooleanToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToCollapsingVisibilityConverter.#ctor(Windows.UI.Xaml.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.BooleanToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:Windows.UI.Xaml.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:Windows.UI.Xaml.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <returns>
            <c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Converters.BooleanToCollapsingVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Convert Visibility back to bool.
            </summary>
            <param name="value">A value. Only value of type <see cref="T:System.Windows.Visibility" /> is supported,</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A parameter value, currently not used.</param>
            <returns>
            When value is Visibility.Visible then true else false.
            </returns>
        </member>
        <member name="T:Catel.MVVM.Converters.CollectionToCountConverter">
            <summary>
            Converts the items inside a collection to the number of elements contained by the collection.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.CollectionToCountConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.CollectionToCollapsingVisibilityConverter">
            <summary>
            Converts the count of a collection to the visibility.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.CollectionToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.CollectionToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.CollectionToCollapsingVisibilityConverter.#ctor(Windows.UI.Xaml.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.CollectionToCollapsingVisibilityConverter" /> class.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="M:Catel.MVVM.Converters.CollectionToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object)">
            <summary>
            Determines whether the specified value is visible.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if the specified value is visible; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.ColorToBrushConverter">
            <summary>
            ColorToBrushConverter
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ColorToBrushConverter.Convert(Windows.UI.Color,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.ColorToBrushConverter.ConvertBack(Windows.UI.Xaml.Media.Brush,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.ContainsItemsConverter">
            <summary>
            Converter that converts whether a collection contains items or not.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ContainsItemsConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.CountCollapsedConverter">
            <summary>
            Convert for auto collapsing of control depending on given count.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.CountCollapsedConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.CountCollapsedConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.CountCollapsedConverter.#ctor(Windows.UI.Xaml.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.CountCollapsedConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:Windows.UI.Xaml.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:Windows.UI.Xaml.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Converters.CountCollapsedConverter.IsVisible(System.Object,System.Type,System.Object)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <returns>
            <c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.MVVM.Converters.DebugConverter">
            <summary>
            Debug converter that allows to debug bindings easily and writes the output to the log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Converters.DebugConverter.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.DebugConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.EmptyStringToCollapsingVisibilityConverter">
            <summary>
            Convert from string to <see cref="T:Windows.UI.Xaml.Visibility"/>. 
            If the string is not null or empty, Visibility.Visible will be returned. 
            If the string is null or empty, Visibility.Collapsed will be returned.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.EmptyStringToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.EmptyStringToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.EmptyStringToCollapsingVisibilityConverter.#ctor(Windows.UI.Xaml.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.EmptyStringToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:Windows.UI.Xaml.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:Windows.UI.Xaml.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Converters.EmptyStringToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.MVVM.Converters.EnumToCollapsingVisibilityConverter">
            <summary>
            Convert from an enum value to <see cref="T:Windows.UI.Xaml.Visibility"/>. The allowed values must be defined inside the <c>ConverterParameter</c> property.
            <para />
            If the <c>ConverterParameter</c> starts with a <c>!</c>, the element will not be visible for the specified enum values.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.EnumToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.EnumToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.EnumToCollapsingVisibilityConverter.#ctor(Windows.UI.Xaml.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.EnumToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:Windows.UI.Xaml.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:Windows.UI.Xaml.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Converters.EnumToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <returns>
            <c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.MVVM.Converters.FormattingConverter">
            <summary>
            Converter for formatting values.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.FormattingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.FormattingConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.FormattingConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.FormattingConverter"/> class.
            </summary>
            <param name="defaultFormatString">A default format string.</param>
        </member>
        <member name="M:Catel.MVVM.Converters.FormattingConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.ConverterHelper">
            <summary>
            Converter helper class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue">
            <summary>
            The generic <c>UnSet</c> value, compatible with WPF and Silverlight.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ConverterHelper.ShouldInvert(System.Object)">
            <summary>
            Checks whether the converted must be inverted. This checks the parameter input and checks whether
            it is a boolean.
            </summary>
            <param name="parameter">The parameter to check. Can be <c>null</c>.</param>
            <returns><c>true</c> if the converter should be inverted; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.IValueConverter">
            <summary>
            Interface for all value converters.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Converters.IntToStringConverter">
            <summary>
            Converts integer to string and back.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.IntToStringConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.IntToStringConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.IsSelectedConverter">
            <summary>
            Converts a selected value to either true of false.
            </summary>
            <remarks>
            This converter is very usefull when a mutual exclusive selection must be made
            Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Converters.IsSelectedConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.IsSelectedConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.IsSelectedValueConverter">
            <summary>
            Converts a selected value to either true of false.
            </summary>
            <remarks>
            This converter is very usefull when a mutual exclusive selection must be made
            Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Converters.IsSelectedValueConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.IsSelectedValueConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.LanguageConverter">
            <summary>
            Converts the value (the resource name) to a language string.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.LanguageConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.LanguageConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.LanguageConverter.Convert(System.String,System.Type,System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.MethodToValueConverter">
            <summary>
            Converts the result of a method to a value. This makes it possible to bind to a method.
            </summary>
            <example>
            {Binding MyObject, Converter={StaticResource MethodToValueConverter}, ConverterParameter='MyMethod'}
            </example>
            <remarks>
            Code originally comes from http://stackoverflow.com/questions/502250/bind-to-a-method-in-wpf.
            <para />
            Original license: CC BY-SA 2.5, compatible with the MIT license.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Converters.MethodToValueConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.MethodToValueConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.MultiplyConverter">
            <summary>
            Calculate the product of given value and factor in parameter.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.MultiplyConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.MultiplyConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.NullableValueConverter">
            <summary>
            Converts a value to a representive value for nullable.
            </summary>
            <remarks>Resolves problem with databinding with nullables. When textbox hasn't a value then null is expected as return value.</remarks>
        </member>
        <member name="M:Catel.MVVM.Converters.NullableValueConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.NullableValueConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.PlatformToBooleanConverter">
            <summary>
            Returns a boolean whether the currently executing platform is available.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.PlatformToBooleanConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.ReferenceToBooleanConverter">
            <summary>
            Implementation of class ReferenceToBooleanConverter
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ReferenceToBooleanConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.ReferenceToCollapsingVisibilityConverter">
            <summary>
            Convert from reference to <see cref="T:Windows.UI.Xaml.Visibility"/>. 
            If the reference contains a value, Visibility.Visible will be returned. 
            If the reference is null, Visibility.Collapsed will be returned.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ReferenceToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.ReferenceToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ReferenceToCollapsingVisibilityConverter.#ctor(Windows.UI.Xaml.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.ReferenceToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:Windows.UI.Xaml.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:Windows.UI.Xaml.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Converters.ReferenceToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.MVVM.Converters.ShortDateFormattingConverter">
            <summary>
            ShortDateFormattingConverter
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ShortDateFormattingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.ShortDateFormattingConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ShortDateFormattingConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.StringToIntConverter">
            <summary>
            Converts string to integer and back.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.StringToIntConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.StringToIntConverter.ConvertBack(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.TextToLowerCaseConverter">
            <summary>
            Converts string values to lower case.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.TextToLowerCaseConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.TextToUpperCaseConverter">
            <summary>
            Converts string values to upper case.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.TextToUpperCaseConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.ValueConverterBase">
            <summary>
            Base class for value converters which makes it compatible between .NET and WinRT.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Converters.ValueConverterBase`1">
            <summary>
            Base class for value converters which makes it compatible between .NET and WinRT.
            </summary>
            <typeparam name="TConvert">The type of the convert input.</typeparam>
        </member>
        <member name="T:Catel.MVVM.Converters.ValueConverterBase`2">
            <summary>
            Base class for value converters which makes it compatible between .NET and WinRT.
            </summary>
            <typeparam name="TConvert">The type of the convert input.</typeparam>
            <typeparam name="TConvertBack">The type of the convert back input.</typeparam>
        </member>
        <member name="P:Catel.MVVM.Converters.ValueConverterBase`2.CurrentCulture">
            <summary>
            Gets the current culture.
            </summary>
            <value>The current culture.</value>
        </member>
        <member name="P:Catel.MVVM.Converters.ValueConverterBase`2.Link">
            <summary>
            Gets or sets the linked value converter. This way it is possible to chain up several converters.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:Catel.MVVM.Converters.ValueConverterBase`2.OverrideType">
            <summary>
            Gets or sets an optional <see cref="T:System.Type"/> value to pass to the <see cref="M:Catel.MVVM.Converters.ValueConverterBase`2.Convert(`0,System.Type,System.Object)"/> method of the chained converter if the <see cref="P:Catel.MVVM.Converters.ValueConverterBase`2.Link"/>
            property is set.
            </summary>
            <remarks>
            Normally this value is ignored as it is in most implementations of <c>Convert</c>.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Converters.ValueConverterBase`2.BackOverrideType">
            <summary>
            Gets or sets an optional <see cref="T:System.Type"/> value to pass to the <see cref="M:Catel.MVVM.Converters.ValueConverterBase`2.ConvertBack(`1,System.Type,System.Object)"/> method of this instance if the <see cref="P:Catel.MVVM.Converters.ValueConverterBase`2.Link"/>
            property is set.
            </summary>
            <remarks>
            Normally this value is ignored as it is in most implementations of <c>ConvertBack</c>.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Converters.ValueConverterBase`2.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="language">The language.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.ValueConverterBase`2.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="language">The language.</param>
            <returns>The value to be passed to the source object.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.ValueConverterBase`2.GetCulture(System.String)">
            <summary>
            Gets the current culture for the specified language. If the language is <c>null</c>, this method returns the <c>CurrentCulture</c>.
            </summary>
            <param name="language">The language.</param>
            <returns>The culture info.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.ValueConverterBase`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.ValueConverterBase`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>The value to be passed to the source object.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.ValueConverterBase`2.Convert(`0,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.ValueConverterBase`2.IsConvertable``1(System.Object)">
            <summary>
            Determines whether the specified value is convertable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is convertable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.ValueConverterBase`2.ConvertBack(`1,System.Type,System.Object)">
            <summary>
            Modifies the target data before passing it to the source object.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the source object.</returns>
            <remarks>
            By default, this method returns <see cref="F:Catel.MVVM.Converters.ConverterHelper.UnsetValue"/>. This method only has
            to be overridden when it is actually used.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Converters.ViewModelToViewConverter">
            <summary>
            Converts a view model to a view. This converter is very useful to dynamically load 
            view content.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ViewModelToViewConverter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.MVVM.Converters.ViewModelToViewConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.ViewModelToViewConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.VisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.VisibilityConverterBase.#ctor(Windows.UI.Xaml.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.VisibilityConverterBase"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:Windows.UI.Xaml.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:Windows.UI.Xaml.Visibility.Visible"/>.</exception>
        </member>
        <member name="P:Catel.MVVM.Converters.VisibilityConverterBase.NotVisibleVisibility">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.Visibility"/> state when not visibible should be returned.
            </summary>
            <value>The not visible visibility.</value>
        </member>
        <member name="M:Catel.MVVM.Converters.VisibilityConverterBase.IsVisible(System.Object,System.Type,System.Object)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <returns><c>true</c> if the specified value is visible; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Converters.VisibilityConverterBase.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Catel.MVVM.Converters.CollapsingVisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            <para />
            This converter returns <see cref="F:Windows.UI.Xaml.Visibility.Collapsed"/> when a non-visible state should be returned.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Converters.CollapsingVisibilityConverterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Converters.CollapsingVisibilityConverterBase"/> class.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ObjectToDisplayNameConverter">
            <summary>
            Converts elements to a display name. This supports classes, member info, enums, etc.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ObjectToDisplayNameConverter.LanguageService">
            <summary>
            Gets or sets the language service. If this value is set, it will be used inside the <see cref="T:Catel.ComponentModel.DisplayNameAttribute"/>.
            </summary>
            <value>The language service.</value>
        </member>
        <member name="M:Catel.MVVM.ObjectToDisplayNameConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Catel.MVVM.ObjectToDisplayNameConverter.GetDisplayName(Catel.ComponentModel.DisplayNameAttribute)">
            <summary>
            Gets the display name from the attribute.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Catel.MVVM.InvalidViewModelException">
            <summary>
            Exception in case there is an invalid view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.InvalidViewModelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.InvalidViewModelException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Catel.MVVM.ModelNotRegisteredException">
            <summary>
            Exception for when a model is not registered on a class, but a <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> is used with the model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelNotRegisteredException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelNotRegisteredException"/> class.
            </summary>
            <param name="modelName">Name of the model.</param>
            <param name="propertyDeclaringViewModelToModelAttribute">The property declaring the view model to model attribute.</param>
        </member>
        <member name="P:Catel.MVVM.ModelNotRegisteredException.ModelName">
            <summary>
            Gets the name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="P:Catel.MVVM.ModelNotRegisteredException.PropertyDeclaringViewModelToModelAttribute">
            <summary>
            Gets the property declaring the view model to model attribute.
            </summary>
            <value>The property declaring the view model to model attribute.</value>
        </member>
        <member name="T:Catel.MVVM.PropertyNotFoundInModelException">
            <summary>
            Exception in case a mapped property is not found on the model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.PropertyNotFoundInModelException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.PropertyNotFoundInModelException"/> class.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="modelName">Name of the model.</param>
            <param name="modelPropertyName">Name of the model property.</param>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ViewModelPropertyName">
            <summary>
            Gets the name of the view model property.
            </summary>
            <value>The name of the view model property.</value>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ModelName">
            <summary>
            Gets the name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ModelPropertyName">
            <summary>
            Gets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelNotRegisteredException">
            <summary>
            Exception in case a view model is not registered, but still being used.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelNotRegisteredException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelNotRegisteredException"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelNotRegisteredException.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.WrongViewModelTypeException">
            <summary>
            Exception in case that a wrong type is used for a view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.WrongViewModelTypeException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.WrongViewModelTypeException"/> class.
            </summary>
            <param name="actualType">The actual type.</param>
            <param name="expectedType">The expected type.</param>
        </member>
        <member name="P:Catel.MVVM.WrongViewModelTypeException.ActualType">
            <summary>
            Gets the actual type.
            </summary>
            <value>The actual type.</value>
        </member>
        <member name="P:Catel.MVVM.WrongViewModelTypeException.ExpectedType">
            <summary>
            Gets the expected type.
            </summary>
            <value>The expected type.</value>
        </member>
        <member name="T:Catel.MVVM.ObjectExtensions">
            <summary>
            Object extensions class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ObjectExtensions.IsSentinelBindingObject(System.Object)">
            <summary>
            Determines whether the specified object is a sentinel.
            <para />
            For more information, see http://stackoverflow.com/questions/3868786/wpf-sentinel-objects-and-how-to-check-for-an-internal-type.
            <para />
            Original license: CC BY-SA 2.5, compatible with the MIT license.
            </summary>
            <param name="dataContext">The data context.</param>
            <returns><c>true</c> if the data context is a sentinel; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Catel.MVVM.ViewHelper">
            <summary>
            View helper class for MVVM scenarios.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewHelper.ConstructViewWithViewModel``1(System.Type,System.Object)">
            <summary>
            Constructs the view with the view model. First, this method tries to inject the specified DataContext into the
            view. If the view does not contain a constructor with this parameter type, it will try to use the default constructor
            and set the DataContext manually.
            </summary>
            <typeparam name="T">The type of the view to return.</typeparam>
            <param name="viewType">Type of the view to instantiate.</param>
            <param name="dataContext">The data context to inject into the view. In most cases, this will be a view model.</param>
            <returns>The constructed view or <c>null</c> if it was not possible to construct the view.</returns>
            <remarks>Internally uses the <see cref="M:Catel.MVVM.ViewHelper.ConstructViewWithViewModel(System.Type,System.Object)"/> method and casts the result.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewHelper.ConstructViewWithViewModel(System.Type,System.Object)">
            <summary>
            Constructs the view with the view model. First, this method tries to inject the specified DataContext into the
            view. If the view does not contain a constructor with this parameter type, it will try to use the default constructor
            and set the DataContext manually.
            </summary>
            <param name="viewType">Type of the view to instantiate.</param>
            <param name="dataContext">The data context to inject into the view. In most cases, this will be a view model.</param>
            <returns>The constructed view or <c>null</c> if it was not possible to construct the view.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.ViewModelServiceHelper">
            <summary>
            Helper class that registers all default services to a <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelServiceHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelServiceHelper.RegisterDefaultViewModelServices(Catel.IoC.IServiceLocator)">
            <summary>
            Registers the default view model services.
            </summary>
            <param name="serviceLocator">The service locator to add the services to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceLocator"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.IViewModelLocatorExtensions">
            <summary>
            Extension methods for the <see cref="T:Catel.MVVM.IViewModelLocator"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelLocatorExtensions.Register``2(Catel.MVVM.IViewModelLocator)">
            <summary>
            Registers the specified view model in the local cache. This cache will also be used by the
            <see cref="M:Catel.MVVM.IViewModelLocatorExtensions.ResolveViewModel``1(Catel.MVVM.IViewModelLocator)" /> method.
            </summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="viewModelLocator">The view model locator.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelLocator" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelLocatorExtensions.ResolveViewModel``1(Catel.MVVM.IViewModelLocator)">
            <summary>
            Resolves a view model type by the view and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions" />.
            </summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <param name="viewModelLocator">The view model locator.</param>
            <returns>The resolved view model or <c>null</c> if the view model could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelLocator" /> is <c>null</c>.</exception>
            <remarks>Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions" /> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions" /> are changed,
            the cache must be cleared manually.</remarks>
        </member>
        <member name="T:Catel.MVVM.ILocator">
            <summary>
            Interface defining shared information about locators. This way, any locator can be casted
            to this interface and be used to locate something by naming convention.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ILocator.NamingConventions">
            <summary>
            Gets or sets the naming conventions to use to locate types.
            <para />
            By adding or removing conventions to this property, the service can use custom resolving of types.
            <para />
            Each implementation should add its own default naming convention.
            </summary>
            <value>The naming conventions.</value>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ILocator.ClearCache">
            <summary>
            Clears the cache of the resolved naming conventions.
            </summary>
            <remarks>
            Note that clearing the cache will also clear all manually registered types
            registered via the <c>Register</c> method.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.IUrlLocator">
            <summary>
            Resolver that will resolve view types based on the view model type. For example, if a view model with the type
            name <c>MyAssembly.ViewModels.PersonViewModel</c> is inserted, this could result in the view type
            <c>MyAssembly.Views.PersonView</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IUrlLocator.Register(System.Type,System.String)">
            <summary>
            Registers the specified url in the local cache. This cache will also be used by the <see cref="M:Catel.MVVM.IUrlLocator.ResolveUrl(System.Type,System.Boolean)"/>
            method.
            </summary>
            <param name="viewModelType">The view model to resolve the url for.</param>
            <param name="url">The resolved url.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="url"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.IUrlLocator.ResolveUrl(System.Type,System.Boolean)">
            <summary>
            Resolves an url by the view model and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewModelType">Type of the view model to resolve the url for.</param>
            <param name="ensurePageExists">if set to <c>true</c>, the method checks whether the page resource actually exists.</param>
            <returns>The resolved viurlew or <c>null</c> if the view could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.IViewLocator">
            <summary>
            Resolver that will resolve view types based on the view model type. For example, if a view model with the type
            name <c>MyAssembly.ViewModels.PersonViewModel</c> is inserted, this could result in the view type
            <c>MyAssembly.Views.PersonView</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewLocator.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view in the local cache. This cache will also be used by the 
            <see cref="M:Catel.MVVM.IViewLocator.ResolveView(System.Type)"/> method.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewType">Type of the view.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewLocator.ResolveView(System.Type)">
            <summary>
            Resolves a view type by the view model and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewModelType">Type of the view model to resolve the view for.</param>
            <returns>The resolved view or <c>null</c> if the view could not be resolved.</returns>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.IViewModelLocator">
            <summary>
            Resolver that will resolve view model types based on the view type. For example, if a view with the type
            name <c>MyAssembly.Views.PersonView</c> is inserted, this could result in the view model type
            <c>MyAssembly.ViewModels.PersonViewModel</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelLocator.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model in the local cache. This cache will also be used by the 
            <see cref="M:Catel.MVVM.IViewModelLocator.ResolveViewModel(System.Type)"/> method.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelLocator.ResolveViewModel(System.Type)">
            <summary>
            Resolves a view model type by the view and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewType">Type of the view to resolve the view model for.</param>
            <returns>The resolved view model or <c>null</c> if the view model could not be resolved.</returns>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.LocatorBase">
            <summary>
            Base class for all locators. This class implements the shared logic so only custom logic has to
            be implemented by new locator classes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.LocatorBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.LocatorBase.NamingConventions">
            <summary>
            Gets or sets the naming conventions to use to locate types.
            <para/>
            By adding or removing conventions to this property, the service can use custom resolving of types.
            <para/>
            Each implementation should add its own default naming convention.
            </summary>
            <value>The naming conventions.</value>
            <remarks></remarks>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)">
            <summary>
            Registers the specified type in the local cache. This cache will also be used by the <see cref="M:Catel.MVVM.LocatorBase.Resolve(System.String)"/>
            method.
            </summary>
            <param name="valueToResolve">The value to resolve.</param>
            <param name="resolvedValue">The resolved value.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="valueToResolve"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="resolvedValue"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.Resolve(System.String)">
            <summary>
            Resolves the specified value to resolve. It uses both the <see cref="P:Catel.MVVM.LocatorBase.NamingConventions"/> and the manually registered
            values registered via the <see cref="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)"/> method to resolve the value.
            </summary>
            <param name="valueToResolve">The value to resolve.</param>
            <returns>The resolved value or <c>null</c> if the value could not be resolved.</returns>
            <remarks>
            This method can be overriden to implement custom behavior. Don't forget to register the value using the 
            <see cref="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)"/> method if the result should be cached in a custom implementation.
            <para />
            By default, this value will assume the <paramref name="valueToResolve"/> is a type and will cast it as so. If the 
            <paramref name="valueToResolve"/> is not a type, override this method and register the result using the <see cref="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)"/>
            method manually.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="valueToResolve"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.GetItemFromCache(System.String)">
            <summary>
            Gets the item from the cache.
            </summary>
            <param name="valueToResolve">The value to resolve.</param>
            <returns>The item or <c>null</c> if the item was not found in the cache.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="valueToResolve"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.AddItemToCache(System.String,System.String)">
            <summary>
            Adds the item to the cache.
            </summary>
            <param name="valueToResolve">The value to resolve.</param>
            <param name="resolvedValue">The resolved value.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="valueToResolve"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.ClearCache">
            <summary>
            Clears the cache of the resolved naming conventions.
            </summary>
            <remarks>
            Note that clearing the cache will also clear all manually registered values registered via the 
            <see cref="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.GetTypeFromString(System.String)">
            <summary>
            Gets the type from string. This is a helper method to easily 
            </summary>
            <param name="fullTypeName">Full name of the type.</param>
            <returns>The resolved type or <c>null</c> if the type could not be resolved.</returns>
            <remarks>
            Internally, this method uses <see cref="M:Catel.Reflection.TypeCache.GetType(System.String,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.ResolveNamingConvention(System.String,System.String,System.String)">
            <summary>
            Resolves a single naming convention.
            <para />
            This method is abstract because each locator should or could use its own naming convention to resolve
            the type. The <see cref="M:Catel.MVVM.LocatorBase.Resolve(System.String)"/> method has prepared all the values such as the assembly name and the
            only thing this method has to do is to actually resolve a string value based on the specified naming convention.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="typeToResolveName">The full type name of the type to resolve.</param>
            <param name="namingConvention">The naming convention to use for resolving.</param>
            <returns>The resolved naming convention.</returns>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.GetDefaultNamingConventions">
            <summary>
            Gets the default naming conventions.
            </summary>
            <returns>An enumerable of default naming conventions.</returns>
        </member>
        <member name="T:Catel.MVVM.UrlLocator">
            <summary>
            Locator for urls.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UrlLocator.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UrlLocator.Register(System.Type,System.String)">
            <summary>
            Registers the specified url in the local cache. This cache will also be used by the <see cref="M:Catel.MVVM.UrlLocator.ResolveUrl(System.Type,System.Boolean)"/>
            method.
            </summary>
            <param name="viewModelType">The view model to resolve the url for.</param>
            <param name="url">The resolved url.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="url"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.UrlLocator.ResolveUrl(System.Type,System.Boolean)">
            <summary>
            Resolves an url by the view model and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewModelType">Type of the view model to resolve the url for.</param>
            <param name="ensurePageExists">If set to <c>true</c>, the method checks whether the page resource actually exists.</param>
            <returns>The resolved url or <c>null</c> if the view could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.UrlLocator.ResolveNamingConvention(System.String,System.String,System.String)">
            <summary>
            This method is not supported.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="typeToResolveName">The full type name of the type to resolve.</param>
            <param name="namingConvention">The naming convention to use for resolving.</param>
            <returns>Nothing, this method throws a <see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.UrlLocator.GetDefaultNamingConventions">
            <summary>
            Gets the default naming conventions.
            </summary>
            <returns>An enumerable of default naming conventions.</returns>
        </member>
        <member name="T:Catel.MVVM.ViewLocator">
            <summary>
            Resolver that will resolve view types based on the view model type. For example, if a view model with the type
            name <c>MyAssembly.ViewModels.PersonViewModel</c> is inserted, this could result in the view type
            <c>MyAssembly.Views.PersonView</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewLocator.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view in the local cache. This cache will also be used by the
            <see cref="M:Catel.MVVM.ViewLocator.ResolveView(System.Type)"/> method.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewType">Type of the view.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewLocator.ResolveView(System.Type)">
            <summary>
            Resolves a view type by the view model and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewModelType">Type of the view model to resolve the view for.</param>
            <returns>The resolved view or <c>null</c> if the view could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewLocator.ResolveNamingConvention(System.String,System.String,System.String)">
            <summary>
            Resolves a single naming convention.
            <para/>
            This method is abstract because each locator should or could use its own naming convention to resolve
            the type. The <see cref="M:Catel.MVVM.LocatorBase.Resolve(System.String)"/> method has prepared all the values such as the assembly name and the
            only thing this method has to do is to actually resolve a string value based on the specified naming convention.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="typeToResolveName">The full type name of the type to resolve.</param>
            <param name="namingConvention">The naming convention to use for resolving.</param>
            <returns>The resolved naming convention.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewLocator.GetDefaultNamingConventions">
            <summary>
            Gets the default naming conventions.
            </summary>
            <returns>An enumerable of default naming conventions.</returns>
        </member>
        <member name="T:Catel.MVVM.ViewModelLocator">
            <summary>
            Resolver that will resolve view model types based on the view type. For example, if a view with the type
            name <c>MyAssembly.Views.PersonView</c> is inserted, this could result in the view model type
            <c>MyAssembly.ViewModels.PersonViewModel</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelLocator.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model in the local cache. This cache will also be used by the
            <see cref="M:Catel.MVVM.ViewModelLocator.ResolveViewModel(System.Type)"/> method.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelLocator.ResolveViewModel(System.Type)">
            <summary>
            Resolves a view model type by the view and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewType">Type of the view to resolve the view model for.</param>
            <returns>The resolved view model or <c>null</c> if the view model could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelLocator.ResolveNamingConvention(System.String,System.String,System.String)">
            <summary>
            Resolves a single naming convention.
            <para/>
            This method is abstract because each locator should or could use its own naming convention to resolve
            the type. The <see cref="M:Catel.MVVM.LocatorBase.Resolve(System.String)"/> method has prepared all the values such as the assembly name and the
            only thing this method has to do is to actually resolve a string value based on the specified naming convention.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="typeToResolveName">The full type name of the type to resolve.</param>
            <param name="namingConvention">The naming convention to use for resolving.</param>
            <returns>The resolved naming convention.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelLocator.GetDefaultNamingConventions">
            <summary>
            Gets the default naming conventions.
            </summary>
            <returns>An enumerable of default naming conventions.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigatedEventArgs">
            <summary>
            Navigated event args.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigatedEventArgs.#ctor(System.String,Catel.MVVM.Navigation.NavigationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Navigation.NavigatedEventArgs" /> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="navigationMode">The navigation mode.</param>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigatingEventArgs">
            <summary>
            Navigating event args.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigatingEventArgs.#ctor(System.String,Catel.MVVM.Navigation.NavigationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Navigation.NavigatedEventArgs"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="navigationMode">The navigation mode.</param>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigatingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the navigation should be canceled.
            </summary>
            <value><c>true</c> if the navigation should cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigationEventArgsBase">
            <summary>
            Base class for navigation event args.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsBase.#ctor(System.String,Catel.MVVM.Navigation.NavigationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Navigation.NavigationEventArgsBase"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="navigationMode">The navigation mode.</param>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigationEventArgsBase.Uri">
            <summary>
            Gets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigationEventArgsBase.NavigationMode">
            <summary>
            Gets the navigation mode.
            </summary>
            <value>The navigation mode.</value>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigationEventArgsExtensions">
            <summary>
            Navigation event args extensions.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsExtensions.IsNavigationToExternal(System.Uri)">
            <summary>
            Determines whether the specified string is a navigation to an external source.
            </summary>
            <param name="uri">The URI.</param>
            <returns><c>true</c> if the uri is a navigation to an external source; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsExtensions.IsNavigationToExternal(System.String)">
            <summary>
            Determines whether the specified string is a navigation to an external source.
            </summary>
            <param name="uriString">The URI string.</param>
            <returns><c>true</c> if the uri is a navigation to an external source; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uriString"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsExtensions.IsNavigationForView(Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs,System.Type)">
            <summary>
            Determines whether the navigation is for the specified view.
            </summary>
            <param name="e">The <see cref="T:Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs" /> instance containing the event data.</param>
            <param name="viewType">Type of the view.</param>
            <returns><c>true</c> if the navigation is for the specified view model; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="e"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsExtensions.IsNavigationForView(Windows.UI.Xaml.Navigation.NavigationEventArgs,System.Type)">
            <summary>
            Determines whether the navigation is for the specified view model.
            </summary>
            <param name="e">The <see cref="T:Windows.UI.Xaml.Navigation.NavigationEventArgs" /> instance containing the event data.</param>
            <param name="viewType">Type of the view.</param>
            <returns><c>true</c> if the navigation is for the specified view model; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="e"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsExtensions.IsNavigationForView(System.String,System.Type)">
            <summary>
            Determines whether the navigation is for the specified view model.
            </summary>
            <param name="uriString">The uri string instance containing the event data.</param>
            <param name="viewType">Type of the view.</param>
            <returns><c>true</c> if the navigation is for the specified view model; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="uriString"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsExtensions.GetUriWithoutQueryInfo(Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Gets the URI from the navigating context.
            </summary>
            <param name="e">The <see cref="T:Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs" /> instance containing the event data.</param>
            <returns>The uri.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="e"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsExtensions.GetUriWithoutQueryInfo(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            Gets the URI from the navigated context.
            </summary>
            <param name="e">The <see cref="T:Windows.UI.Xaml.Navigation.NavigationEventArgs" /> instance containing the event data.</param>
            <returns>The uri.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="e"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationEventArgsExtensions.GetUriWithoutQueryInfo(System.String)">
            <summary>
            Gets the URI from the navigated context.
            </summary>
            <param name="uri">The URI.</param>
            <returns>The uri.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri" /> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigationModeExtensions">
            <summary>
            Extension methods for navigation mode.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationModeExtensions.Convert(Windows.UI.Xaml.Navigation.NavigationMode)">
            <summary>
            Converts the specified navigation mode.
            </summary>
            <param name="navigationMode">The navigation mode.</param>
            <returns>NavigationMode.</returns>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigationAdapter">
            <summary>
            Navigation adapter class because everyone seems to be implementing their own :-(
            </summary>
        </member>
        <member name="F:Catel.MVVM.Navigation.NavigationAdapter.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.#ctor(Catel.MVVM.Views.IView,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Navigation.NavigationAdapter" /> class.
            </summary>
            <param name="navigationTarget">The navigation target.</param>
            <param name="navigationRoot">The navigation root.</param>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigationAdapter.HandleNavigatedOnLoaded">
            <summary>
            Gets or sets a value indicating whether the navigated event should be invoked on the loaded event.
            </summary>
            <value>
            <c>true</c> if navigation should be handled on loaded event; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigationAdapter.NavigationTarget">
            <summary>
            Gets the navigation target.
            </summary>
            <value>The navigation target.</value>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigationAdapter.NavigationTargetType">
            <summary>
            Gets the type of the navigation target.
            </summary>
            <value>The type of the navigation target.</value>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigationAdapter.NavigationRoot">
            <summary>
            Gets the navigation root.
            </summary>
            <value>The navigation root.</value>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigationAdapter.NavigationContext">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
        </member>
        <member name="E:Catel.MVVM.Navigation.NavigationAdapter.NavigatedTo">
            <summary>
            Occurs when the app has navigated to this view.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Navigation.NavigationAdapter.NavigatingAway">
            <summary>
            Occurs when the app is about to navigate away from this view.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Navigation.NavigationAdapter.NavigatedAway">
            <summary>
            Occurs when the app has navigated away from this view.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.UninitializeNavigationService">
            <summary>
            Uninitializes the navigation service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.GetNavigationUriForTargetPage">
            <summary>
            Gets the navigation URI for the target page.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.GetNavigationTarget``1">
            <summary>
            Gets the navigation target as a type.
            </summary>
            <typeparam name="T">The type of the navigation target.</typeparam>
            <returns>The type.</returns>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.GetUriWithoutParameters(System.Uri)">
            <summary>
            Gets the URI without parameters, thus <c>/Pages/MyView.xaml?id=1</c> will be returned as
            <c>/Pages/MyView.xaml</c>/
            </summary>
            <param name="uri">The URI.</param>
            <returns>The URI without parameters.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.GetUriWithoutParameters(System.String)">
            <summary>
            Gets the URI without parameters, thus <c>/Pages/MyView.xaml?id=1</c> will be returned as
            <c>/Pages/MyView.xaml</c>/
            </summary>
            <param name="uri">The URI.</param>
            <returns>The URI without parameters.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="uri"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.RaiseNavigatedTo(Catel.MVVM.Navigation.NavigatedEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Navigation.NavigationAdapter.NavigatedTo"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.MVVM.Navigation.NavigatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.RaiseNavigatingAway(Catel.MVVM.Navigation.NavigatingEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Navigation.NavigationAdapter.NavigatingAway"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.MVVM.Navigation.NavigatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.RaiseNavigatedAway(Catel.MVVM.Navigation.NavigatedEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Navigation.NavigationAdapter.NavigatedAway"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.MVVM.Navigation.NavigatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.CanHandleNavigation">
            <summary>
            Determines whether the navigation can be handled by this adapter.
            </summary>
            <returns><c>true</c> if the navigation can be handled by this adapter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapter.GetNavigationUri(System.Object)">
            <summary>
            Gets the navigation URI for the target page.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigationAdapterBase">
            <summary>
            Abstract base class to allow partial abstract methods.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapterBase.CanHandleNavigation">
            <summary>
            Determines whether the navigation can be handled by this adapter.
            </summary>
            <returns><c>true</c> if the navigation can be handled by this adapter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationAdapterBase.GetNavigationUri(System.Object)">
            <summary>
            Gets the navigation URI for the target page.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigationContext">
            <summary>
            Generic navigation context class that works for all target frameworks.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Navigation.NavigationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Navigation.NavigationContext"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Navigation.NavigationContext.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Catel.MVVM.Navigation.NavigationMode">
            <summary>
            Navigation modes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Navigation.NavigationMode.Back">
            <summary>
            Navigating back.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Navigation.NavigationMode.Forward">
            <summary>
            Navigating forward.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Navigation.NavigationMode.New">
            <summary>
            Navigating to a new page.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Navigation.NavigationMode.Refresh">
            <summary>
            Refreshing current view.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Navigation.NavigationMode.Unknown">
            <summary>
            The navigation mode is unknown at this stage.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Providers.MVVMBehaviorBase`2">
            <summary>
            A behavior base implementation that takes care of generic MVVM behavior logic.
            </summary>
            <typeparam name="TAttachedType">The type of the attached type.</typeparam>
            <typeparam name="TLogicType">The type of the logic type.</typeparam>
        </member>
        <member name="F:Catel.MVVM.Providers.MVVMBehaviorBase`2.InjectedViewModel">
            <summary>
            The injected view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Providers.MVVMBehaviorBase`2"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.Logic">
            <summary>
            Gets the logic.
            </summary>
            <value>The logic.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModelType">
            <summary>
            Gets or sets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
            <remarks>
            This is a dependency property because the <see cref="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.Logic"/> itself has no setter. Therefore, this
            can be set in xaml and will be used in derived classes to construct the logic.
            <para />
            Also, the logic is not constructed when the xaml of the behavior is parsed, so it has to be used later.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModelTypeProperty">
            <summary>
            DependencyProperty definition as the backing store for ViewModelType.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.DesignTimeViewModelType">
            <summary>
            Gets or sets the type of the design time view model.
            </summary>
            <value>The type of the design time view model.</value>
            <remarks>
            This is a dependency property because the logic is not constructed when the xaml of the behavior is 
            parsed, so it has to be used later.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Providers.MVVMBehaviorBase`2.DesignTimeViewModelTypeProperty">
            <summary>
            DependencyProperty definition as the backing store for DesignTimeViewModelType.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModel">
            <summary>
            Gets the view model attached to this behavior.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.PreventViewModelCreation">
            <summary>
            Gets or sets a value indicating whether the view model container should prevent the 
            creation of a view model.
            <para />
            This property is very useful when using views in transitions where the view model is no longer required.
            </summary>
            <value><c>true</c> if the view model container should prevent view model creation; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.DetermineViewModelInstance">
            <summary>
            Occurs when the view model is about to construct a new view model. This event can be used to
            intercept and inject a dynamically instantiated view model.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.DetermineViewModelType">
            <summary>
            Occurs when the view model is about to construct a new view model. This event can be used to
            intercept and inject a dynamically determined view model type.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModelChanged">
            <summary>
            Raised when the <see cref="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModel"/> is changed by the <see cref="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.Logic"/>.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModelPropertyChanged">
            <summary>
            Raised when a property on the <see cref="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.TargetControlPropertyChanged">
            <summary>
            Occurs when a property on the target control has changed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewLoading">
            <summary>
            Occurs when the view model container is loading.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewLoaded">
            <summary>
            Occurs when the view model container is loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewUnloading">
            <summary>
            Occurs when the view model container starts unloading.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewUnloaded">
            <summary>
            Occurs when the view model container is unloaded.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the target control is loaded.
            </summary>
            <value><c>true</c> if this instance is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.MVVM.Providers.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This implementation checks for the <see cref="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModelType"/>,
            which is mandatory.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Catel.MVVM.Providers.MVVMBehaviorBase`2.ViewModelType"/> is not set.</exception>
            <remarks>
            When this method is overriden, don't forget to call the base.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <remarks>
            When this method is overriden, don't forget to call the base.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.Uninitialize">
            <summary>
            Uninitializes this instance.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.OnDetermineViewModelInstance(System.Object,Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.Providers.LogicBase.DetermineViewModelInstance"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.OnDetermineViewModelType(System.Object,Catel.MVVM.Providers.DetermineViewModelTypeEventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.Providers.LogicBase.DetermineViewModelType"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Providers.DetermineViewModelTypeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.OnLogicViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> property has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.OnLogicViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.MVVMBehaviorBase`2.OnLogicTargetViewPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.MVVM.Providers.NavigationPageBehavior">
            <summary>
            A behavior implementation for a <see cref="T:Windows.UI.Xaml.Controls.Page"/>. 
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.NavigationPageBehavior.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.MVVM.Providers.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="T:Catel.MVVM.Providers.UserControlBehavior">
            <summary>
            A <see cref="T:Catel.Windows.Interactivity.Behavior`1"/> implementation for a user control. 
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlBehavior.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlBehavior.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:Windows.UI.Xaml.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para />
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlBehavior.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlBehavior.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.MVVM.Providers.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="T:Catel.MVVM.Providers.DetermineViewModelTypeEventArgs">
            <summary>
            EventArgs class which allows late-time dynamic view model determination.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.DetermineViewModelTypeEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Providers.DetermineViewModelTypeEventArgs"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="P:Catel.MVVM.Providers.DetermineViewModelTypeEventArgs.DataContext">
            <summary>
            Gets the data context.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.DetermineViewModelTypeEventArgs.ViewModelType">
            <summary>
            Gets or sets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs">
            <summary>
            EventArgs class which allows late-time dynamic view model determination.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="P:Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs.DataContext">
            <summary>
            Gets the data context.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs.DoNotCreateViewModel">
            <summary>
            Gets or sets a value indicating whether the logic should create a view model by itself when the
            <see cref="P:Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs.ViewModel"/> is <c>null</c>.
            <para />
            By default, this value is <c>false</c>.
            </summary>
            <value><c>true</c> if the logic should not create a view model by itself; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Catel.MVVM.Providers.DetermineViewModelInstanceEventArgs.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.Providers.LogicExtensions">
            <summary>
            Extension methods to safely interact with logic from inside views.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicExtensions.SetValue``1(Catel.MVVM.Providers.LogicBase,System.Action{``0})">
            <summary>
            Sets the value of the logic property.
            </summary>
            <param name="logic">The logic, can be <c>null</c> so the caller don't have to check for this.</param>
            <param name="action">The action that will set the actual value, will only be executed if <paramref name="logic"/> is not <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicExtensions.GetValue``2(Catel.MVVM.Providers.LogicBase,System.Func{``0,``1})">
            <summary>
            Sets the value of the logic property.
            </summary>
            <param name="logic">The logic, can be <c>null</c> so the caller don't have to check for this.</param>
            <param name="function">The function that will get the actual value, will only be executed if <paramref name="logic"/> is not <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicExtensions.GetValue``2(Catel.MVVM.Providers.LogicBase,System.Func{``0,``1},``1)">
            <summary>
            Sets the value of the logic property.
            </summary>
            <param name="logic">The logic, can be <c>null</c> so the caller don't have to check for this.</param>
            <param name="function">The function that will get the actual value, will only be executed if <paramref name="logic"/> is not <c>null</c>.</param>
            <param name="defaultValue">The default value to return if the logic is not available.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.Providers.UnloadBehavior">
            <summary>
            Available unload behaviors.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.UnloadBehavior.CloseViewModel">
            <summary>
            Closes the view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.UnloadBehavior.SaveAndCloseViewModel">
            <summary>
            Saves and closes the view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.UnloadBehavior.CancelAndCloseViewModel">
            <summary>
            Cancels and closes the view model.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Providers.LogicViewModelBehavior">
            <summary>
            The available view model behaviors.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicViewModelBehavior.Injected">
            <summary>
            View model was injected thus will be stable during the lifetime of the view.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicViewModelBehavior.Dynamic">
            <summary>
            View model is dynamic and will be automatically determined.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Providers.LogicBase">
            <summary>
            Base implementation of the behaviors, which defines all the different possible situations
            a behavior must implement / support to be a valid MVVM provider behavior.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase._viewModelFactory">
            <summary>
            The view model factory.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase._viewModelLocator">
            <summary>
            The view model locator.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase._viewManager">
            <summary>
            The view manager.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase._viewPropertySelector">
            <summary>
            The view property selector.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase._viewModel">
            <summary>
            The view model instances currently held by this provider. This value should only be used
            inside the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> property. For accessing the view model, use the 
            <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> property.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase._isFirstValidationAfterLoaded">
            <summary>
            Boolean representing whether this is the first validation after the control has been loaded.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase.ViewLoadManager">
            <summary>
            The view loaded manager.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase._lockObject">
            <summary>
            The lock object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.LogicBase._targetView">
            <summary>
            The target view.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.MVVM.Providers.LogicBase"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.#ctor(Catel.MVVM.Views.IView,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Providers.LogicBase"/> class.
            </summary>
            <param name="targetView">The target control.</param>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetView"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.ViewModelFactory">
            <summary>
            Gets the view model factory used to create the view model instances.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.LastKnownDataContext">
            <summary>
            Gets the weak reference to the last known data context.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
            <remarks>
            When a new value is set, the old view model will be disposed.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.UniqueIdentifier">
            <summary>
            Gets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.ViewModelBehavior">
            <summary>
            Gets the view model behavior.
            </summary>
            <value>The view model behavior.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.PreventViewModelCreation">
            <summary>
            Gets or sets a value indicating whether the view model container should prevent the 
            creation of a view model.
            <para />
            This property is very useful when using views in transitions where the view model is no longer required.
            </summary>
            <value><c>true</c> if the view model container should prevent view model creation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.TargetView">
            <summary>
            Gets the target control of this MVVM provider.
            </summary>
            <value>The target control.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.TargetViewType">
            <summary>
            Gets the type of the target control.
            </summary>
            <value>The type of the target control.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.IgnoreNullDataContext">
            <summary>
            Gets or sets a value indicating whether a <c>null</c> DataContext should be ignored and no new view
            model should be created.
            <para />
            This property will automatically be set to <c>true</c> when a parent view model container invokes the
            <see cref="E:Catel.MVVM.Views.IViewLoadManager.ViewUnloading"/> event. It will be set to <c>false</c> again when the parent
            view model container invokes the <see cref="E:Catel.MVVM.Views.IViewLoadManager.ViewLoading"/>.
            <para />
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if the <c>null</c> DataContext should be ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.IsTargetViewLoaded">
            <summary>
            Gets a value indicating whether the target control is loaded or not.
            </summary>
            <value>
            <c>true</c> if the target control is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.CanViewBeLoaded">
            <summary>
            Gets a value indicating whether the control can be loaded. This is very useful in non-WPF classes where
            the <c>LayoutUpdated</c> is used instead of the <c>Loaded</c> event.
            <para />
            If this value is <c>true</c>, this logic implementation can call the <see cref="M:Catel.MVVM.Providers.LogicBase.OnTargetViewLoadedAsync(System.Object,System.EventArgs)"/> when
            the control is loaded. Otherwise, the call will be ignored.
            </summary>
            <remarks>
            This value is introduced for Windows Phone because a navigation backwards still leads to a call to
            <c>LayoutUpdated</c>. To prevent new view models from being created, this property can be overridden by 
            such logic implementations.
            </remarks>
            <value><c>true</c> if this instance can control be loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.IsLoading">
            <summary>
            Gets a value indicating whether this instance is loading.
            </summary>
            <value><c>true</c> if this instance is loading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.IsUnloading">
            <summary>
            Gets a value indicating whether this instance is unloading.
            </summary>
            <value><c>true</c> if this instance is unloading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.IsClosingViewModel">
            <summary>
            Gets or sets a value indicating whether the current view model is being closed.
            </summary>
            <value><c>true</c> if this instance is closing the current view model; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.LogicBase.Catel#MVVM#Views#IViewLoadState#View">
            <summary>
            The view.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.DetermineViewModelInstance">
            <summary>
            Occurs when the view model is about to construct a new view model. This event can be used to
            intercept and inject a dynamically instantiated view model.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.DetermineViewModelType">
            <summary>
            Occurs when the view model is about to construct a new view model. This event can be used to
            intercept and inject a dynamically determined view model type.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the current <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.ViewModelCanceled">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.ViewModelCanceledAsync">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.ViewModelSaved">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.ViewModelSavedAsync">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.ViewModelClosed">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been closed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.ViewModelClosedAsync">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been closed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.TargetViewPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView"/> has changed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.Loaded">
            <summary>
            Occurs when the view model container is loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Providers.LogicBase.Unloaded">
            <summary>
            Occurs when the view model container is unloaded.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.DetermineInterestingViewProperties">
            <summary>
            Determines the interesting view properties.
            </summary>
            <returns>A list of names with view properties to subscribe to.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.SetDataContext(System.Object)">
            <summary>
            Sets the data context of the target control.
            <para />
            This method is abstract because the real logic implementation knows how to set the data context (for example,
            by using an additional data context grid).
            </summary>
            <param name="newDataContext">The new data context.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.CreateViewModelByUsingDataContextOrConstructor">
            <summary>
            Creates a view model by using data context or, if that is not possible, the constructor of the view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewModelChanging">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> property is about to change.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> property has just been changed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewLoadedManagerLoadingInternal(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is unloading.
            <para />
            This method is public because the view loaded manager must be subscribed to as a weak event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewLoadedManagerLoading(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is unloading.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewLoadedManagerLoadedInternal(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is loaded.
            <para />
            This method is public because the view loaded manager must be subscribed to as a weak event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewLoadedManagerLoaded(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewLoadedManagerUnloadingInternal(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is unloading.
            <para />
            This method is public because the view loaded manager must be subscribed to as a weak event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewLoadedManagerUnloading(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is unloading.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewLoadedManagerUnloadedInternal(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is unloaded.
            <para />
            This method is public because the view loaded manager must be subscribed to as a weak event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewLoadedManagerUnloaded(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewLoadingInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView"/> is about to be loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView"/> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This method will call the <see cref="M:Catel.MVVM.Providers.LogicBase.OnTargetViewLoadedAsync(System.Object,System.EventArgs)"/> which can be overriden for custom 
            behavior. This method is required to protect from duplicate loaded events.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewLoadedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView" /> has just been loaded.
            <para />
            The base implementation will try to create a view model based on the current DataContext and
            set it as the DataContext of the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView" />. To create custom logic for
            view model creation, override this method and do not call the base.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewUnloadingInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView"/> is about to be unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This method will call the <see cref="M:Catel.MVVM.Providers.LogicBase.OnTargetViewUnloadedAsync(System.Object,System.EventArgs)"/> which can be overriden for custom 
            behavior. This method is required to protect from duplicate unloaded events.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewUnloadedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView" /> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.IsCurrentDataContext(Catel.MVVM.Views.DataContextChangedEventArgs)">
            <summary>
            Gets a value indicating whether the specified arguments represent the current data context.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewDataContextChanged(System.Object,Catel.MVVM.Views.DataContextChangedEventArgs)">
            <summary>
            Called when the <c>DataContext</c> property of the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView" /> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewPropertyChangedInternal(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView" /> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnTargetViewPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView" /> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewModelCanceledAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been saved.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewModelSavedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been saved.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.OnViewModelClosedAsync(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.ViewModelClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.ValidateViewModel">
            <summary>
            Validates the view model.
            </summary>
            <returns><c>true</c> if the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.CancelViewModelAsync">
            <summary>
            Cancels the view model.
            </summary>
            <returns><c>true</c> if the view model is successfully canceled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.CancelAndCloseViewModelAsync">
            <summary>
            Cancels and closes the view model.
            </summary>
            <returns><c>true</c> if the view model is successfully canceled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.SaveViewModelAsync">
            <summary>
            Saves the view model.
            </summary>
            <returns><c>true</c> if the view model is successfully saved; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.SaveAndCloseViewModelAsync">
            <summary>
            Saves and closes the view model. If the saving fails, the view model is not closed.
            </summary>
            <returns><c>true</c> if the view model is successfully saved; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.CloseViewModelAsync(System.Nullable{System.Boolean})">
            <summary>
            Closes the view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.CompleteViewModelClosingAsync">
            <summary>
            Awaits until the closing of the view model is completed.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.ConstructViewModelUsingArgumentOrDefaultConstructor(System.Object)">
            <summary>
            Tries to construct the view model using the argument. If that fails, it will try to use
            the default constructor of the view model. If that is not available, <c>null</c> is returned.
            </summary>
            <param name="injectionObject">The object that is injected into the view model constructor.</param>
            <returns>
            Constructed view model or <c>null</c> if the view model could not be constructed.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Providers.LogicBase.ConstructViewModelUsingArgumentOrDefaultConstructor(System.Object,System.Type)">
            <summary>
            Tries to construct the view model using the argument. If that fails, it will try to use
            the default constructor of the view model. If that is not available, <c>null</c> is returned.
            </summary>
            <param name="injectionObject">The object that is injected into the view model constructor.</param>
            <param name="viewModelType">Type of the view model.</param>
            <returns>Constructed view model or <c>null</c> if the view model could not be constructed.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.Providers.NavigationLogicBase`1">
            <summary>
            Base class for pages or controls containing navigation logic.
            </summary>
            <typeparam name="T">Type of the control or page.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Providers.NavigationLogicBase`1.#ctor(`0,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Providers.PageLogic"/> class.
            </summary>
            <param name="targetPage">The page this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetPage"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Providers.NavigationLogicBase`1.TargetPage">
            <summary>
            Gets the target page.
            </summary>
            <value>The target page.</value>
        </member>
        <member name="M:Catel.MVVM.Providers.NavigationLogicBase`1.OnTargetViewLoadedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView"/> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.NavigationLogicBase`1.OnTargetViewUnloadedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.TargetView"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.NavigationLogicBase`1.OnNavigatedToPage(Catel.MVVM.Navigation.NavigatedEventArgs)">
            <summary>
            Called when the control has just been navigated to the page.
            </summary>
            <param name="e">The <see cref="T:Catel.MVVM.Navigation.NavigatedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.NavigationLogicBase`1.OnNavigatingAwayFromPage(Catel.MVVM.Navigation.NavigatingEventArgs)">
            <summary>
            Called when the control has just been navigated away from the page.
            </summary>
            <param name="e">The <see cref="T:Catel.MVVM.Navigation.NavigatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.NavigationLogicBase`1.OnNavigatedAwayFromPage(Catel.MVVM.Navigation.NavigatedEventArgs)">
            <summary>
            Called when the control has just been navigated away from the page.
            </summary>
            <param name="e">The <see cref="T:Catel.MVVM.Navigation.NavigatedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.NavigationLogicBase`1.EnsureViewModel">
            <summary>
            Ensures that there is a valid view model. This is a separate method because the view model can be constructed
            in the constructor, but also in the OnLoaded event because of the tombstoning capabilities of Windows Phone 7.
            <para/>
            If there already is a view model, this method will do nothing.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Providers.PageLogic">
            <summary>
            MVVM Provider behavior implementation for a navigation page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.PageLogic.#ctor(Catel.MVVM.Views.IPage,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Providers.PageLogic"/> class.
            </summary>
            <param name="targetPage">The page this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetPage"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Providers.PageLogic.SetDataContext(System.Object)">
            <summary>
            Sets the data context of the target control.
            <para />
            This method is abstract because the real logic implementation knows how to set the data context (for example,
            by using an additional data context grid).
            </summary>
            <param name="newDataContext">The new data context.</param>
        </member>
        <member name="P:Catel.MVVM.Providers.PageLogic.CanViewBeLoaded">
            <summary>
            Gets a value indicating whether the control can be loaded. This is very useful in non-WPF classes where
            the <c>LayoutUpdated</c> is used instead of the <c>Loaded</c> event.
            <para />
            If this value is <c>true</c>, this logic implementation can call the  <see cref="M:Catel.MVVM.Providers.NavigationLogicBase`1.OnTargetViewLoadedAsync(System.Object,System.EventArgs)" /> when the 
            control is loaded. Otherwise, the call will be ignored.
            </summary>
            <value><c>true</c> if this instance can control be loaded; otherwise, <c>false</c>.</value>
            <remarks>This value is introduced for Windows Phone because a navigation backwards still leads to a call to
            <c>LayoutUpdated</c>. To prevent new view models from being created, this property can be overridden by 
            such logic implementations.</remarks>
        </member>
        <member name="M:Catel.MVVM.Providers.PageLogic.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel" /> property has just been changed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Providers.UserControlLogic">
            <summary>
            MVVM Provider behavior implementation for a user control.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.UserControlLogic.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Providers.UserControlLogic.ApiCop">
            <summary>
            The API cop.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.MVVM.Providers.UserControlLogic" /> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.#ctor(Catel.MVVM.Views.IView,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Providers.UserControlLogic"/> class.
            </summary>
            <param name="targetView">The target control.</param>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetView"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            <c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface. During this search, the user control 
            will use both the visual and logical tree.
            <para />
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            <c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.DefaultSupportParentViewModelContainersValue">
            <summary>
            Gets or sets the default value for the <see cref="P:Catel.MVVM.Providers.UserControlLogic.SupportParentViewModelContainers"/> property.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>The unload behavior.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.UnloadBehavior">
            <summary>
            Gets or sets the unload behavior when the data context of the target control changes.
            </summary>
            <value>The unload behavior.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.DefaultUnloadBehaviorValue">
            <summary>
            Gets or sets the default value for the <see cref="P:Catel.MVVM.Providers.UserControlLogic.UnloadBehavior"/> property.
            <para />
            The default value is <see cref="F:Catel.MVVM.Providers.UnloadBehavior.SaveAndCloseViewModel"/>.
            </summary>
            <value>The unload behavior.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.TransferStylesAndTransitionsToViewModelGrid">
            <summary>
            Gets or sets a value indicating whether the styles and transitions from the content of the target control
            should be transfered to the view model grid which is created dynamically,.
            <para />
            The transfer is required to enable visual state transitions on root elements (which is replaced by this logic implementation).
            <para />
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if the styles and transitions should be transfered to the view model grid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.DefaultTransferStylesAndTransitionsToViewModelGridValue">
            <summary>
            Gets or sets a value for the <see cref="P:Catel.MVVM.Providers.UserControlLogic.TransferStylesAndTransitionsToViewModelGrid"/> property. This way, the behavior
            can be changed an entire application to prevent disabling it on every control.
            <para />
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            <c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.HasParentViewModelContainer">
            <summary>
            Gets a value indicating whether there is a parent view model container available.
            </summary>
            <value>
            <c>true</c> if there is a parent view model container available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.ParentViewModelContainer">
            <summary>
            Gets the parent view model container.
            </summary>
            <value>The parent view model container.</value>
            <remarks>
            For internal usage only.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Providers.UserControlLogic.IsSubscribedToParentViewModel">
            <summary>
            Gets a value indicating whether this instance is subscribed to a parent view model.
            </summary>
            <value>
            <c>true</c> if this instance is subscribed to a parent view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.SetDataContext(System.Object)">
            <summary>
            Sets the data context of the target control.
            <para />
            This method is abstract because the real logic implementation knows how to set the data context (for example,
            by using an additional data context grid).
            </summary>
            <param name="newDataContext">The new data context.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.CreateViewModelWrapper(System.Boolean)">
            <summary>
            Creates the view model wrapper.
            </summary>
            <param name="checkIfWrapped">if set to <c>true</c>, check if the view is already wrapped.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnTargetControlContentChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the content of the target control has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnTargetViewLoadedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>TargetView</c> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnTargetViewUnloadedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>TargetView</c> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnViewModelChanging">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> property is about to change.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.MVVM.Providers.LogicBase.ViewModel"/> property has just been changed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnTargetViewDataContextChanged(System.Object,Catel.MVVM.Views.DataContextChangedEventArgs)">
            <summary>
            Called when the <c>DataContext</c> property of the <c>TargetView</c> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnViewLoadedManagerLoading(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is loading.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnViewLoadedManagerUnloading(System.Object,Catel.MVVM.Views.ViewLoadEventArgs)">
            <summary>
            Called when the view manager is unloading.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.SubscribeToParentViewModelContainer">
            <summary>
            Subscribes to the parent view model container.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.UnsubscribeFromParentViewModelContainer">
            <summary>
            Unsubscribes from the parent view model container.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.SubscribeToParentViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Subscribes to a parent view model.
            </summary>
            <param name="parentViewModel">The parent view model.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.UnsubscribeFromParentViewModel">
            <summary>
            Unsubscribes from a parent view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.RegisterViewModelAsChild">
            <summary>
            Registers the view model as child on the parent view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.UnregisterViewModelAsChild">
            <summary>
            Unregisters the view model as child on the parent view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.UpdateDataContextToUseViewModelAsync(System.Object)">
            <summary>
            Updates the data context to use view model.
            </summary>
            <param name="newDataContext">The new data context.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.GetViewModelResultValueFromUnloadBehavior">
            <summary>
            Gets the view model result value based on the <see cref="P:Catel.MVVM.Providers.UserControlLogic.UnloadBehavior"/> property so it can be used for
            the <see cref="M:Catel.MVVM.Providers.UserControlLogic.CloseAndDisposeViewModelAsync(System.Nullable{System.Boolean})"/> method.
            </summary>
            <returns>The right value.</returns>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.CloseAndDisposeViewModelAsync(System.Nullable{System.Boolean})">
            <summary>
            Closes and disposes the current view model.
            </summary>
            <param name="result"><c>true</c> if the view model should be saved; <c>false</c> if the view model should be canceled; <c>null</c> if it should only be closed.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnParentViewModelContainerViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ViewModelChanged event of the parent ViewModel container.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnParentViewModelCancelingAsync(System.Object,Catel.MVVM.CancelingEventArgs)">
            <summary>
            Handles the Canceling event of the parent ViewModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Catel.MVVM.CancelingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnParentViewModelSavingAsync(System.Object,Catel.MVVM.SavingEventArgs)">
            <summary>
            Handles the Saving event of the parent ViewModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Catel.MVVM.SavingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.OnParentViewModelClosingAsync(System.Object,System.EventArgs)">
            <summary>
            Called when Closing event of the parent ViewModel.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Providers.UserControlLogic.ClearWarningsAndErrorsForObject(System.Object)">
            <summary>
            Clears the warnings and errors for the specified object.
            </summary>
            <param name="obj">The object.</param>
            <remarks>
            Since there is a "bug" in the .NET Framework (DataContext issue), this method clears the current
            warnings and errors in the InfoBarMessageControl if available.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Tasks.ActionTask">
            <summary>
            The action task.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Tasks.ActionTask._action">
            <summary>
            The _action.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Tasks.ActionTask.#ctor(System.String,System.Action{Catel.MVVM.Tasks.ITaskProgressTracker})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Tasks.ActionTask" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Tasks.ActionTask.Execute">
            <summary>
            The execute.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Tasks.ActionTask.ActionTaskTaskProgressTracker">
            <summary>
            The action task progress log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Tasks.ActionTask.ActionTaskTaskProgressTracker._actionTask">
            <summary>
            The action task.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Tasks.ActionTask.ActionTaskTaskProgressTracker.#ctor(Catel.MVVM.Tasks.ActionTask)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Tasks.ActionTask.ActionTaskTaskProgressTracker" /> class.
            </summary>
            <param name="actionTask">The action task.</param>
        </member>
        <member name="M:Catel.MVVM.Tasks.ActionTask.ActionTaskTaskProgressTracker.UpdateStatus(System.String,System.Int32)">
            <summary>
            Update the task status.
            </summary>
            <param name="message">The message.</param>
            <param name="percentage">The percentage.</param>
        </member>
        <member name="M:Catel.MVVM.Tasks.ActionTask.ActionTaskTaskProgressTracker.UpdateStatus(System.String)">
            <summary>
            Update the task status.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Tasks.ActionTask.ActionTaskTaskProgressTracker.UpdateStatus(System.String,System.Boolean)">
            <summary>
            Update the task status.
            </summary>
            <param name="message">The message.</param>
            <param name="indeterminate">The indeterminate state.</param>
        </member>
        <member name="T:Catel.MVVM.Tasks.ITask">
            <summary>
            The TaskBase interface.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Tasks.ITask.PropertyChanged">
            <summary>
            Occurs when a property of this object has changed.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.ITask.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.ITask.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.ITask.Percentage">
            <summary>
            Gets the percentage
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.ITask.IsIndeterminate">
            <summary>
            Indicates whether the task progress is indeterminate. 
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.ITask.AutomaticallyDispatch">
            <summary>
            Gets or sets whether this task should automatically be dispatched to the UI thread.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Tasks.ITask.Execute">
            <summary>
            The execute.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Tasks.ITask.Rollback">
            <summary>
            The rollback.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Tasks.ITaskProgressTracker">
            <summary>
            The progress log
            </summary>
        </member>
        <member name="M:Catel.MVVM.Tasks.ITaskProgressTracker.UpdateStatus(System.String,System.Int32)">
            <summary>
            Update the task status.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="percentage">
            The percentage.
            </param>
        </member>
        <member name="M:Catel.MVVM.Tasks.ITaskProgressTracker.UpdateStatus(System.String)">
            <summary>
            Update the task status.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Catel.MVVM.Tasks.ITaskProgressTracker.UpdateStatus(System.String,System.Boolean)">
            <summary>
            Update the task status.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="indeterminate">
            The indeterminate state.
            </param>
        </member>
        <member name="T:Catel.MVVM.Tasks.TaskBase">
            <summary>
            The task base.
            </summary>
            <remarks>
            This class inherits from <see cref="T:Catel.Data.ModelBase" /> in use it as model as part of the wizard view models.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Tasks.TaskBase.MessageProperty">
            <summary>Register the Message property so it is known in the class.</summary>
        </member>
        <member name="F:Catel.MVVM.Tasks.TaskBase.PercentageProperty">
            <summary>Register the Percentage property so it is known in the class.</summary>
        </member>
        <member name="F:Catel.MVVM.Tasks.TaskBase.NameProperty">
            <summary>
            Register the Name property so it is known in the class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Tasks.TaskBase.IsIndeterminatedProperty">
            <summary>
            Register the IsIndeterminate property so it is known in the class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Tasks.TaskBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Tasks.TaskBase" /> class.
            </summary>
            <param name="name">The task name name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Tasks.TaskBase.AutomaticallyDispatch">
            <summary>
            Gets or sets whether this task should automatically be dispatched to the UI thread.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Tasks.TaskBase.AutomaticallyDispatchProperty">
            <summary>
            Register the AutomaticallyDispatch property so it is known in the class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.TaskBase.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.TaskBase.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.TaskBase.Percentage">
            <summary>
            Gets or sets the percentage.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Tasks.TaskBase.IsIndeterminate">
            <summary>
            Indicates whether the task progress is indeterminated
            </summary>
        </member>
        <member name="M:Catel.MVVM.Tasks.TaskBase.Execute">
            <summary>
            The execute.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Tasks.TaskBase.Rollback">
            <summary>
            The rollback.
            </summary>
        </member>
        <member name="T:Catel.MVVM.InterestedInAttribute">
            <summary>
            Attribute to decorate view models with. When a view model is decorated with this attribute, it will automatically
            receive property change notifications for the view models.
            </summary>
        </member>
        <member name="M:Catel.MVVM.InterestedInAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.InterestedInAttribute"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.InterestedInAttribute.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.ModelAttribute">
            <summary>
            Attribute to define a property in a view model as a model. Objects decorated with this attribute
            will be automatically validated when a property changes.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelAttribute"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ModelAttribute.SupportIEditableObject">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.ValidationToViewModelAttribute">
            <summary>
            Attribute to gather validation from a <see cref="T:Catel.Data.IValidationContext"/> in a property, which must be of type
            <see cref="T:Catel.Data.IValidationSummary"/>.
            </summary>
            <example>
            The attribute must be used like this and all validations with the tag <c>PersonValidationTag</c> will 
            be gathered into the summary:
            <para />
            <code>
            <![CDATA[
            [ValidationToViewModel("PersonValidationTag")]
            public IValidationSummary PersonValidationSummary { get; set; }
            ]]>
            </code>
            </example>
            <remarks>
            This attribute can only be used inside a view model.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ValidationToViewModelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ValidationToViewModelAttribute"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ValidationToViewModelAttribute.IncludeChildViewModels">
            <summary>
            Gets or sets a value indicating whether the validation of the child view models should also be included.
            <para />
            The default value is <c>false</c>.
            </summary>
            <value>
            <c>true</c> if the validation of the child view models should also be included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ValidationToViewModelAttribute.UseTagToFilter">
            <summary>
            Gets or sets a value indicating whether this attribute should use the tag to filter the validation.
            <para />
            If the value is <c>true</c>, the validation will be filtered on the tag. Otherwise, all validation results 
            will be returned. Keep in mind that the <see cref="P:Catel.MVVM.ValidationToViewModelAttribute.Tag"/> can still be <c>null</c>, even when this value is <c>true</c>.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if [use tag to filter]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ValidationToViewModelAttribute.Tag">
            <summary>
            Gets or sets the tag to filter by.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Catel.MVVM.CancelingEventArgs">
            <summary>
            EventArgs for the <see cref="E:Catel.MVVM.IViewModel.Canceling"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CancelingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CancelingEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Catel.MVVM.CancellableEventArgs">
            <summary>
            EventArgs base which implements the Cancel property.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CancellableEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CancellableEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.CancellableEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the action should be canceled.
            <para />
            The default value is <c>false</c>.
            </summary>
            <value>
              <c>true</c> if the action should be canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.SavingEventArgs">
            <summary>
            EventArgs for the <see cref="E:Catel.MVVM.IViewModel.Saving"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.SavingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.SavingEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelClosedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation for the <see cref="E:Catel.MVVM.IViewModel.Closed"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelClosedEventArgs.#ctor(Catel.MVVM.IViewModel,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelClosedEventArgs" /> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ViewModelClosedEventArgs.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelClosedEventArgs.Result">
            <summary>
            Gets the result to pass to the view. This will, for example, be used as <c>DialogResult</c>
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Catel.MVVM.IViewModelExtensions">
            <summary>
            Extension methods for <see cref="T:Catel.MVVM.IViewModel"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelExtensions.SaveAndCloseViewModelAsync(Catel.MVVM.IViewModel)">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelExtensions.CancelAndCloseViewModelAsync(Catel.MVVM.IViewModel)">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Catel.MVVM.IViewModelFactoryExtensions">
            <summary>
            Extensions for the <see cref="T:Catel.MVVM.IViewModelFactory"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelFactoryExtensions.CreateViewModel``1(Catel.MVVM.IViewModelFactory,System.Object,System.Object)">
            <summary>
            Creates a new view model.
            <para />
            This is a convenience wrapper around the <see cref="M:Catel.MVVM.IViewModelFactory.CreateViewModel(System.Type,System.Object,System.Object)" /> method. This method cannot be overriden.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="viewModelFactory">The view model factory.</param>
            <param name="dataContext">The data context.</param>
            <param name="tag">The preferred tag to use when resolving dependencies.</param>
            <returns>The newly created <see cref="T:Catel.MVVM.IViewModel" /> or <c>null</c> if no view model could be created.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <c>TViewModel</c> does not implement the <see cref="T:Catel.MVVM.IViewModel" /> interface.</exception>
        </member>
        <member name="T:Catel.MVVM.ViewModelExtensions">
            <summary>
            Extension methods for view model classes.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelExtensions.GetViewModelCommandManager(Catel.MVVM.ViewModelBase)">
            <summary>
            Gets the view model command manager for the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>IViewModelCommandManager.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelExtensions.IsValidationSummaryOutdated(Catel.MVVM.ViewModelBase,System.Int64,System.Boolean)">
            <summary>
            Determines whether the specified validation summary is outdated by checking the last modified date/time on the validation context.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="lastUpdated">The last updated ticks.</param>
            <param name="includeChildViewModelValidations">If set to <c>true</c>, all validation from all child view models should be gathered as well.</param>
            <returns><c>true</c> if the validation summary is outdated; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelExtensions.GetValidationSummary(Catel.MVVM.ViewModelBase,System.Boolean)">
            <summary>
            Gets the validation summary for the specified <paramref name="viewModel"/> and, if specified, the children as well.
            <para />
            This method does not filter on any tag.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="includeChildViewModelValidations">If set to <c>true</c>, all validation from all child view models should be gathered as well.</param>
            <returns>The validation summary.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelExtensions.GetValidationSummary(Catel.MVVM.ViewModelBase,System.Boolean,System.Object)">
            <summary>
            Gets the validation summary for the specified <paramref name="viewModel"/> and, if specified, the children as well.
            <para/>
            This method also filters on the specified tag.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="includeChildViewModelValidations">If set to <c>true</c>, all validation from all child view models should be gathered as well.</param>
            <param name="tag">The tag.</param>
            <returns>The validation summary.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelExtensions.GetNestedValidationContext(Catel.MVVM.ViewModelBase,System.Boolean)">
            <summary>
            Gets the nested validation context. If <paramref name="recursive"/> is <c>true</c>, the validation context returned
            will include all validation from all registered children.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="recursive">If set to <c>true</c>, the validation context will be merged with all children.</param>
            <returns>
            A combined <see cref="T:Catel.Data.IValidationContext"/> of all the child view models and the <paramref name="viewModel"/> itself.
            </returns>
            <remarks>
            This method does not check for arguments for performance reasons and because it's private.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.ViewModelManagerExtensions">
            <summary>
            Extensions for the <see cref="T:Catel.MVVM.IViewModelManager"/> interface.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelManagerExtensions.SaveAndCloseViewModels(Catel.MVVM.IViewModelManager,System.Func{Catel.MVVM.IViewModel,System.Boolean})">
            <summary>
            Closes all view models that are currently being managed by the <see cref="T:Catel.MVVM.ViewModelManager" /> which
            match the predicate.
            </summary>
            <param name="viewModelManager">The view model manager.</param>
            <param name="predicate">The predicate.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelManager" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelManager" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManagerExtensions.CancelAndCloseViewModels(Catel.MVVM.IViewModelManager,System.Func{Catel.MVVM.IViewModel,System.Boolean})">
            <summary>
            Closes all view models that are currently being managed by the <see cref="T:Catel.MVVM.ViewModelManager" /> which
            match the predicate.
            </summary>
            <param name="viewModelManager">The view model manager.</param>
            <param name="predicate">The predicate.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelManager" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelManager" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.INotifyableViewModel">
            <summary>
            Interface that view models must implement to support the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.INotifyableViewModel.ViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)">
            <summary>
            Called when a property on a view model has changed.
            </summary>
            <param name="viewModel">The view model of which the property has changed.</param>
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="M:Catel.MVVM.INotifyableViewModel.ViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command on a view model is executed.
            </summary>
            <param name="viewModel">The view model of which the command is executed.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="M:Catel.MVVM.INotifyableViewModel.ViewModelEvent(Catel.MVVM.IViewModel,Catel.MVVM.ViewModelEvent,System.EventArgs)">
            <summary>
            Called when a view model event occurs.
            </summary>
            <param name="viewModel">The view model that has raised the event.</param>
            <param name="viewModelEvent">The view model event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.MVVM.IProgressNotifyableViewModel">
            <summary>
            The ProgressNotifyableViewModel interface.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IProgressNotifyableViewModel.DetailedMessage">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IProgressNotifyableViewModel.Percentage">
            <summary>
            Gets the percent.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IProgressNotifyableViewModel.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IProgressNotifyableViewModel.TaskMessage">
            <summary>
            Gets or sets the task message.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IProgressNotifyableViewModel.TaskName">
            <summary>
            Gets or sets the task name.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IProgressNotifyableViewModel.TaskPercentage">
            <summary>
            Gets or sets the task percentage.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IProgressNotifyableViewModel.TaskIsIndeterminate">
            <summary>
            Gets or sets the task percentage.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IProgressNotifyableViewModel.UpdateStatus(System.Int32,System.Int32,Catel.MVVM.Tasks.ITask)">
            <summary>
            Update the progress status.
            </summary>
            <param name="currentItem">
            The current item.
            </param>
            <param name="totalItems">
            The total items.
            </param>
            <param name="task">
            The task
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="task" /> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Catel.MVVM.IRelationalViewModel">
            <summary>
            Interface that allows a view model to be used in a nested user controls scenario.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IRelationalViewModel.ParentViewModel">
            <summary>
            Gets the parent view model.
            </summary>
            <value>The parent view model.</value>
        </member>
        <member name="M:Catel.MVVM.IRelationalViewModel.SetParentViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Sets the new parent view model of this view model.
            </summary>
            <param name="parentViewModel">The parent view model.</param>
        </member>
        <member name="M:Catel.MVVM.IRelationalViewModel.RegisterChildViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Registers a child view model to this view model. When a view model is registered as a child view model, it will
            receive all notifications from this view model and be notified of any validation changes.
            </summary>
            <param name="childViewModel">The child view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="childViewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IRelationalViewModel.UnregisterChildViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters the child view model. This means that the child view model will no longer receive any notifications
            from this view model as parent view model, nor will it be included in any validation calls in this view model.
            </summary>
            <param name="childViewModel">The child.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="childViewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.IViewModel">
            <summary>
            View model interface.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IViewModel.HasDirtyModel">
            <summary>
            Gets a value indicating whether this instance has a dirty model.
            </summary>
            <value><c>true</c> if this instance has a dirty model; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed. If a view model is closed, calling
            <see cref="M:Catel.MVVM.IViewModel.CancelViewModel"/>, <see cref="M:Catel.MVVM.IViewModel.SaveViewModel"/> or <see cref="M:Catel.MVVM.IViewModel.CloseViewModel(System.Nullable{System.Boolean})"/>
            will have no effect.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.Title">
            <summary>
            Gets the title of the view model.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.UniqueIdentifier">
            <summary>
            Gets the unique identifier of the view model.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.ViewModelConstructionTime">
            <summary>
            Gets the view model construction time, which is used to get unique instances of view models.
            </summary>
            <value>The view model construction time.</value>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Initialized">
            <summary>
            Occurs when the view model has been initialized.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.InitializedAsync">
            <summary>
            Occurs when the view model has been initialized.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.CommandExecuted">
            <summary>
            Occurs when a command on the view model has been executed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.CommandExecutedAsync">
            <summary>
            Occurs when a command on the view model has been executed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Saving">
            <summary>
            Occurs when the view model is about to be saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.SavingAsync">
            <summary>
            Occurs when the view model is about to be saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Saved">
            <summary>
            Occurs when the view model is saved successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.SavedAsync">
            <summary>
            Occurs when the view model is saved successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Canceling">
            <summary>
            Occurs when the view model is about to be canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.CancelingAsync">
            <summary>
            Occurs when the view model is about to be canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Canceled">
            <summary>
            Occurrs when the view model is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.CanceledAsync">
            <summary>
            Occurrs when the view model is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Closing">
            <summary>
            Occurs when the view model is being closed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.ClosingAsync">
            <summary>
            Occurs when the view model is being closed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Closed">
            <summary>
            Occurs when the view model has been closed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.ClosedAsync">
            <summary>
            Occurs when the view model has been closed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.ValidateViewModel(System.Boolean,System.Boolean)">
            <summary>
            Validates the specified notify changed properties only.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <returns>
            <c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
            <remarks>
            This method is useful when the view model is initialized before the window, and therefore WPF does not update the errors and warnings.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IViewModel.InitializeViewModel">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <remarks>
            It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IViewModel.InitializeViewModelAsync">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <remarks>
            It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CancelViewModel">
            <summary>
            Cancels the editing of the data.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CancelViewModelAsync">
            <summary>
            Cancels the editing of the data.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CancelAndCloseViewModel">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
            <returns>
            <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.SaveViewModel">
            <summary>
            Saves the data.
            </summary>
            <returns>
            <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.SaveViewModelAsync">
            <summary>
            Saves the data.
            </summary>
            <returns>
            <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.SaveAndCloseViewModel">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns>
            <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CloseViewModel(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.IViewModel.CancelViewModel"/> of <see cref="M:Catel.MVVM.IViewModel.SaveViewModel"/> method.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CloseViewModelAsync(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.IViewModel.CancelViewModel"/> of <see cref="M:Catel.MVVM.IViewModel.SaveViewModel"/> method.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="T:Catel.MVVM.IViewModelContainer">
            <summary>
            Defines a control as a <see cref="T:Catel.MVVM.IViewModel"/> container.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IViewModelContainer.ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.MVVM.IViewModelContainer.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.IViewModelContainer.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.IViewModelFactory">
            <summary>
            Interface which allows custom instantation of view models. This way, if a view model contains a complex constructor or needs 
            caching, this factory can be used.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelFactory.CanReuseViewModel(System.Type,System.Type,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Determines whether the specified view model as data context can be reused and allow the view to set itself as
            owner of the inherited view model.
            <para />
            By default a view model is allowed to be inherited when it is of the same type as the expected view model type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="expectedViewModelType">The expected view model type according to the view.</param>
            <param name="actualViewModelType">The actual view model type which is the type of the <paramref name="viewModelAsDataContext"/>.</param>
            <param name="viewModelAsDataContext">The view model as data context which must be checked.</param>
            <returns>
              <c>true</c> if the specified view model instance ben be reused by the view; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelFactory.CreateViewModel(System.Type,System.Object)">
            <summary>
            Creates a new view model.
            </summary>
            <param name="viewModelType">Type of the view model that needs to be created.</param>
            <param name="dataContext">The data context of the view model.</param>
            <returns>The newly created <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if no view model could be created.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement the <see cref="T:Catel.MVVM.IViewModel"/> interface.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelFactory.CreateViewModel(System.Type,System.Object,System.Object)">
            <summary>
            Creates a new view model.
            </summary>
            <param name="viewModelType">Type of the view model that needs to be created.</param>
            <param name="dataContext">The data context of the view model.</param>
            <param name="tag">The preferred scope to use when resolving dependencies.</param>
            <returns>The newly created <see cref="T:Catel.MVVM.IViewModel" /> or <c>null</c> if no view model could be created.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType" /> does not implement the <see cref="T:Catel.MVVM.IViewModel" /> interface.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelFactory.CreateViewModel``1(System.Object)">
            <summary>
            Creates a new view model.
            <para />
            This is a convenience wrapper around the <see cref="M:Catel.MVVM.ViewModelFactory.CreateViewModel(System.Type,System.Object,System.Object)"/> method. This method cannot be overriden.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="dataContext">The data context.</param>
            <returns>The newly created <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if no view model could be created.</returns>
            <exception cref="T:System.ArgumentException">The <c>TViewModel</c> does not implement the <see cref="T:Catel.MVVM.IViewModel"/> interface.</exception>
        </member>
        <member name="T:Catel.MVVM.IViewModelManager">
            <summary>
            Interface for the view model manager which allows the retrieval of currently alive view models.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IViewModelManager.ActiveViewModels">
            <summary>
            Gets the active view models presently registered.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.RegisterModel(Catel.MVVM.IViewModel,System.Object)">
            <summary>
            Registers the model of a view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.UnregisterModel(Catel.MVVM.IViewModel,System.Object)">
            <summary>
            Unregisters the model of a view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.UnregisterAllModels(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters all models of a view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.GetViewModelsOfModel(System.Object)">
            <summary>
            Gets the view models of a model.
            </summary>
            <param name="model">The model to find the linked view models for.</param>
            <returns>An array containing all the view models.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.GetViewModel(System.Int32)">
            <summary>
            Gets the view model by its unique identifier.
            </summary>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <returns>The <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if the view model is not registered.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.GetFirstOrDefaultInstance``1">
            <summary>
            Gets the first or default instance of the specified view model.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <returns>The <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if the view model is not registered.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.GetFirstOrDefaultInstance(System.Type)">
            <summary>
            Gets the first or default instance of the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <returns>The <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if the view model is not registered.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> is not of type <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.GetChildViewModels(Catel.MVVM.IViewModel)">
            <summary>
            Gets the child view models of the specified view model.
            </summary>
            <param name="parentViewModel">The parent view model.</param>
            <returns>The child view models.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentViewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.GetChildViewModels(System.Int32)">
            <summary>
            Gets the child view models of the specified view model unique identifier.
            </summary>
            <param name="parentUniqueIdentifier">The parent unique identifier.</param>
            <returns>The child view models.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.RegisterViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Registers a view model instance with the manager. All view models must register themselves to the manager.
            </summary>
            <param name="viewModel">The view model to register.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.UnregisterViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.
            </summary>
            <param name="viewModel">The view model to unregister.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.AddInterestedViewModelInstance(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Adds an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically register
            itself to the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> is interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelManager.RemoveInterestedViewModelInstance(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Removes an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically unregister
            itself from the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> was interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.ManagedViewModel">
            <summary>
            Represents a managed view model. A managed view model is watched for property changes. As soon as a change occurs in one of the
            managed view models, all other interested view models are notified of the changes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel.Log">
            <summary>
            The <see cref="T:Catel.Logging.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel._viewModelInstances">
            <summary>
            List of alive view model instances.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel._interestedViewModels">
            <summary>
            List of alive view model instances that are interested in other view models.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel._lock">
            <summary>
            Lock object.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ManagedViewModel"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ManagedViewModel.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="P:Catel.MVVM.ManagedViewModel.ViewModelCount">
            <summary>
            Gets the view model count.
            </summary>
            <value>The view model count.</value>
        </member>
        <member name="P:Catel.MVVM.ManagedViewModel.ViewModels">
            <summary>
            Gets all the currently registered view models managed by this view model manager.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.Clear">
            <summary>
            Clears all the currently registered view models.
            </summary>
            <remarks>
            This method should only be called during unit testing.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.AddViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Adds a view model instance to the list of instances.
            </summary>
            <param name="viewModel">The view model instance to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.WrongViewModelTypeException">The <paramref name="viewModel"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.RemoveViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Removes a view model instance from the list of instances.
            </summary>
            <param name="viewModel">The view model instance to remove.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.AddInterestedViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Adds a view model to the list of interested view models for this view model type.
            </summary>
            <param name="viewModel">The view model instance that is interested in changes.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.RemoveInterestedViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Removes a view model from the list of interested view models for this view model type.
            </summary>
            <param name="viewModel">The view model instance that is interested in changes.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the ViewModel instances.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelCommandExecutedAsync(System.Object,Catel.MVVM.CommandExecutedEventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.CommandExecuted"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.CommandExecutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelSavingAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Saving"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelSavedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Saved"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelCancelingAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Canceling"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelCanceledAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Canceled"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelClosedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Canceled"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnInterestedViewModelClosedAsync(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Closed"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.NotifyViewModelsOfEvent(Catel.MVVM.IViewModel,Catel.MVVM.ViewModelEvent,System.EventArgs)">
            <summary>
            Notifies all interested view models of an event that took place.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewModelEvent">The view model event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="e"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.ViewModelToModelMode">
            <summary>
            Specifies the different mapping modes available for the <see cref="T:Catel.MVVM.ViewModelToModelAttribute" />.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelToModelMode.TwoWay">
            <summary>
            Automatically maps the property from view model to model and back as soon
            as either one changes the property value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelToModelMode.OneWay">
            <summary>
            Automatically maps the property from the model to the view model if the model
            changes the property value.
            <para />
            This mode does not map any values from the view model to the model, thus can also
            be seen as read-only mode.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelToModelMode.OneWayToSource">
            <summary>
            Automatically maps the property from the view model to the model if the view model
            changes the property value.
            <para />
            This mode does not map any values from the model to the view model, but still keeps track
            of all validation that occurs in the model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelToModelMode.Explicit">
            <summary>
            Automatically maps properties from the model to the view model as soon as the model is initialized. As 
            soon as a property value changes in the model, the view model value is updated instantly. However,
            the mapping from the view model to model is explicit.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelToModelAttribute">
            <summary>
            Attribute to link a property in a view model to a model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> class.
            </summary>
            <param name="model">The property name that holds the model object.</param>
            <param name="property">The property of the model object that should be linked to the <see cref="T:Catel.MVVM.ViewModelBase"/> property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.Model">
            <summary>
            Gets the property name that holds the model object.
            <para />
            Must be a property on the <see cref="T:Catel.MVVM.ViewModelBase"/> implementation, but is allowed to be private.
            </summary>
            <value>The model property name.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.Property">
            <summary>
            Gets the property of the model object that should be linked to the <see cref="T:Catel.MVVM.ViewModelBase"/> property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.Mode">
            <summary>
            Gets or sets the mode of the mapping.
            <para />
            The default value is <see cref="F:Catel.MVVM.ViewModelToModelMode.TwoWay"/>.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.ConverterType">
            <summary>
            Gets or sets the type of the converter.
            <para />
            The default value is <see cref="F:Catel.MVVM.ViewModelToModelMode.TwoWay"/>.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.AdditionalConstructorArgs">
            <summary>
            Gets or sets the additional constructor args.
            <para />
            This args would be passed to constructor.
            </summary>
            <value>The additional constructor args.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.AdditionalPropertiesToWatch">
            <summary>
            Gets or sets the additional properties to triger converter.
            <para />
            This args would be passed to constructor.
            </summary>
            <value>The additional properties to watch.</value>
        </member>
        <member name="T:Catel.MVVM.DefaultViewModelToModelMappingConverter">
            <summary>
            ViewModelToModelMapping Copy Converter
            </summary>
        </member>
        <member name="M:Catel.MVVM.DefaultViewModelToModelMappingConverter.#ctor(System.String[])">
            <summary>
            Creates an instance of converter
            </summary>
            <param name="propertyNames">All properties to watch</param>
        </member>
        <member name="M:Catel.MVVM.DefaultViewModelToModelMappingConverter.CanConvert(System.Type[],System.Type,System.Type)">
            <summary>
            Determines whether this instance can convert the specified types.
            </summary>
            <param name="types">The types.</param>
            <param name="outType">Type of the out.</param>
            <param name="viewModelType">Type of the view model.</param>
            <returns><c>true</c> if this instance can convert the specified types; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.DefaultViewModelToModelMappingConverter.Convert(System.Object[],Catel.MVVM.IViewModel)">
            <summary>
            Converts the specified values.
            </summary>
            <param name="values">The values.</param>
            <param name="viewModel">The view model.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Catel.MVVM.DefaultViewModelToModelMappingConverter.CanConvertBack(System.Type,System.Type[],System.Type)">
            <summary>
            Determines whether this instance can convert back the specified in type.
            </summary>
            <param name="inType">Type of the in.</param>
            <param name="outTypes">The out types.</param>
            <param name="viewModelType">Type of the view model.</param>
            <returns><c>true</c> if this instance can convert back the specified in type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.DefaultViewModelToModelMappingConverter.ConvertBack(System.Object,Catel.MVVM.IViewModel)">
            <summary>
            Converts the specified values back.
            </summary>
            <param name="value">Property value</param>
            <param name="viewModel">Owner VM</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="T:Catel.MVVM.IViewModelToModelConverter">
            <summary>
            Defines view model to model converter.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelToModelConverter.ShouldConvert(System.String)">
            <summary>
            Determines whether the property name should be converted.
            </summary>
            <param name="propertyName">The name of changed property</param>
            <returns><c>true</c> if the property name should be converted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelToModelConverter.CanConvert(System.Type[],System.Type,System.Type)">
            <summary>
            Determines whether this instance can convert the specified types.
            </summary>
            <param name="types">The types.</param>
            <param name="outType">Type of the out.</param>
            <param name="viewModelType">Owner VM type</param>
            <returns><c>true</c> if this instance can convert the specified types; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelToModelConverter.Convert(System.Object[],Catel.MVVM.IViewModel)">
            <summary>
            Converts the specified values.
            </summary>
            <param name="values">The values.</param>
            <param name="viewModel">Owner VM</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelToModelConverter.CanConvertBack(System.Type,System.Type[],System.Type)">
            <summary>
            Determines whether this instance can convert back the specified in type.
            </summary>
            <param name="inType">Type of the in.</param>
            <param name="outTypes">The out types.</param>
            <param name="viewModelType">Type of the view model.</param>
            <returns><c>true</c> if this instance can convert back the specified in type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.IViewModelToModelConverter.ConvertBack(System.Object,Catel.MVVM.IViewModel)">
            <summary>
            Converts the specified values back.
            </summary>
            <param name="value">Property value</param>
            <param name="viewModel">Owner VM</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="T:Catel.MVVM.ViewModelToModelConverterBase">
            <summary>
            Base class for view model to model converters.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelConverterBase.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelConverterBase"/> class.
            </summary>
            <param name="propertyNames">Name of property on which attribute was setted</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelConverterBase.PropertyNames">
            <summary>
            Gets the property names.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelConverterBase.ShouldConvert(System.String)">
            <summary>
            Determines whether the property name should be converted.
            </summary>
            <param name="propertyName">The name of changed property</param>
            <returns><c>true</c> if the property name should be converted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelConverterBase.CanConvert(System.Type[],System.Type,System.Type)">
            <summary>
            Determines whether this instance can convert the specified types.
            </summary>
            <param name="types">The types.</param>
            <param name="outType">Type of the out.</param>
            <param name="viewModelType">Owner VM type</param>
            <returns><c>true</c> if this instance can convert the specified types; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelConverterBase.Convert(System.Object[],Catel.MVVM.IViewModel)">
            <summary>
            Converts the specified values.
            </summary>
            <param name="values">The values.</param>
            <param name="viewModel">Owner VM</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelConverterBase.CanConvertBack(System.Type,System.Type[],System.Type)">
            <summary>
            Determines whether this instance can convert back the specified in type.
            </summary>
            <param name="inType">Type of the in.</param>
            <param name="outTypes">The out types.</param>
            <param name="viewModelType">Type of the view model.</param>
            <returns><c>true</c> if this instance can convert back the specified in type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelConverterBase.ConvertBack(System.Object,Catel.MVVM.IViewModel)">
            <summary>
            Converts the specified values back.
            </summary>
            <param name="value">Property value</param>
            <param name="viewModel">Owner VM</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="T:Catel.MVVM.ViewModelToModelMapping">
            <summary>
            Model value class to store the mapping of the View Model to a Model mapping.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelMapping.#ctor(System.String,Catel.MVVM.ViewModelToModelAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelMapping"/> class.
            </summary>
            <param name="viewModelProperty">The view model property.</param>
            <param name="attribute">The <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> that was used to define the mapping.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelProperty"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelMapping.#ctor(System.String,System.String,System.String,Catel.MVVM.ViewModelToModelMode,System.Type,System.Object[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelMapping"/> class.
            </summary>
            <param name="viewModelProperty">The view model property.</param>
            <param name="modelProperty">The model property.</param>
            <param name="valueProperty">The value property.</param>
            <param name="mode">The mode.</param>
            <param name="converterType">Converter type</param>
            <param name="additionalConstructorArgs">Constructor args</param>
            <param name="additionalPropertiesToWatch"></param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelProperty"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.ViewModelProperty">
            <summary>
            Gets the property name of the mapping of the view model.
            </summary>
            <value>The model view property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.ModelProperty">
            <summary>
            Gets the property name of the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.ValueProperties">
            <summary>
            Gets the property property name of the property in the model.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.ConverterType">
            <summary>
            Gets the type of the converter.
            <para />
            The default value is <see cref="F:Catel.MVVM.ViewModelToModelMode.TwoWay"/>.
            </summary>
            <value>The converter type.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.Converter">
            <summary>
            Gets the converter.
            <para />
            The default value is <see cref="F:Catel.MVVM.ViewModelToModelMode.TwoWay"/>.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="T:Catel.MVVM.ModelErrorInfo">
            <summary>
            Class containing all the errors and warnings retrieved via <see cref="T:System.ComponentModel.INotifyDataErrorInfo"/> and
            <see cref="T:System.ComponentModel.INotifyDataWarningInfo"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._fieldErrors">
            <summary>
            Gets the field errors.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._fieldWarnings">
            <summary>
            Gets the field warnings.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._businessRuleErrors">
            <summary>
            Gets the business rule errors.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._businessRuleWarnings">
            <summary>
            Gets the business rule warnings.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._initialErrorFields">
            <summary>
            List of field that were initialized with an error.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelErrorInfo"/> class.
            </summary>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
        </member>
        <member name="E:Catel.MVVM.ModelErrorInfo.Updated">
            <summary>
            Raised when the errors or warnings are updated.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.OnModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the model has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.OnModelErrorsChanged(System.Object,System.ComponentModel.DataErrorsChangedEventArgs)">
            <summary>
            Called when the errors on the model have changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.HandleBusinessRuleErrors(System.Collections.IEnumerable)">
            <summary>
            Handles the business rule errors.
            </summary>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.HandleFieldErrors(System.String,System.Collections.IEnumerable)">
            <summary>
            Handles the field errors.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.OnModelWarningsChanged(System.Object,System.ComponentModel.DataErrorsChangedEventArgs)">
            <summary>
            Called when the warnings on the model have changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.HandleBusinessRuleWarnings(System.Collections.IEnumerable)">
            <summary>
            Handles the business rule warnings.
            </summary>
            <param name="warnings">The warnings.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.HandleFieldWarnings(System.String,System.Collections.IEnumerable)">
            <summary>
            Handles the field warnings.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="warnings">The warnings.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.GetErrors(System.String)">
            <summary>
            Gets the errors for the specificied <paramref name="propertyName"/>.
            <para />
            If the <paramref name="propertyName"/> is <c>null</c> or <see cref="F:System.String.Empty"/>,
            entity level errors will be returned.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of errors.</returns>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.GetWarnings(System.String)">
            <summary>
            Gets the warnings for the specificied <paramref name="propertyName"/>.
            <para />
            If the <paramref name="propertyName"/> is <c>null</c> or <see cref="F:System.String.Empty"/>,
            entity level warnings will be returned.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of warnings.</returns>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.CleanUp">
            <summary>
            Cleans up the information by unsubscribing from all events.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.GetValidationString(System.Object)">
            <summary>
            Gets the validation string from the object. This method supports the following types: <para />
            * string<para />
            * ValidationResult 
            </summary>
            <param name="obj">The object to convert to a string.</param>
            <returns>The string retrieved from the object or <c>null</c> if the object is not supported.</returns>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.InitializeDefaultErrors(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Initializes the default errors.
            </summary>
            <param name="validationResults">The validation results.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.ClearDefaultErrors(System.String)">
            <summary>
            Updates the default errors. This method is required when errors are initialize via <see cref="M:Catel.MVVM.ModelErrorInfo.InitializeDefaultErrors(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})"/>.
            This method checks whether default errors were added for a specific property (or at entity level if <paramref name="propertyName"/>
            is <see cref="F:System.String.Empty"/> or <c>null</c>).
            <para />
            Reason for this is that if the error is known on forehand, the entity implementation will not raise the
            <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged"/> event.
            <para />
            If the default errors are cleared, the validation via <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged"/> will take over from this point.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Catel.MVVM.ModelInfo">
            <summary>
            Class containing information about a specific model decorated with the <see cref="T:Catel.MVVM.ModelAttribute"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelInfo.#ctor(System.String,Catel.MVVM.ModelAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelInfo"/> class.
            </summary>
            <param name="name">The name of the model property.</param>
            <param name="attribute">The attribute.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="attribute"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ModelInfo.Name">
            <summary>
            Gets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="P:Catel.MVVM.ModelInfo.SupportIEditableObject">
            <summary>
            Gets a value indicating whether the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ModelInfo.IsCanceling">
            <summary>
            Gets or sets a value indicating whether this model is canceling.
            </summary>
            <value><c>true</c> if this model is canceling; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.MVVM.NavigationViewModelBase">
            <summary>
            Extended base class for view models that include navigation.
            <para />
            This class adds navigation commands and the navigation service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.NavigationViewModelBase.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">
            if set to <c>true</c>, the initialization will be skipped and must be done manually via <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes"/>.
            </param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.NavigationViewModelBase.#ctor(Catel.IoC.IServiceLocator,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows the injection of a custom <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <param name="serviceLocator">The service locator to inject. If <c>null</c>, the <see cref="P:Catel.IoC.ServiceLocator.Default"/> will be used.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">if set to <c>true</c>, the initialization will be skipped and must be done manually via <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes"/>.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="P:Catel.MVVM.NavigationViewModelBase.NavigationService">
            <summary>
            Gets the navigation service which can be used to navigate inside an application.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="P:Catel.MVVM.NavigationViewModelBase.Back">
            <summary>
            Gets the Back command.
            </summary>
        </member>
        <member name="P:Catel.MVVM.NavigationViewModelBase.Forward">
            <summary>
            Gets the Forward command.
            </summary>
        </member>
        <member name="M:Catel.MVVM.NavigationViewModelBase.OnBackCanExecute">
            <summary>
            Method to check whether the Back command can be executed.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        </member>
        <member name="M:Catel.MVVM.NavigationViewModelBase.OnBackExecute">
            <summary>
            Method to invoke when the Back command is executed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.NavigationViewModelBase.OnForwardCanExecute">
            <summary>
            Method to check whether the Forward command can be executed.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        </member>
        <member name="M:Catel.MVVM.NavigationViewModelBase.OnForwardExecute">
            <summary>
            Method to invoke when the Forward command is executed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ProgressNotifyableViewModel">
            <summary>
            The progress notifyable view model base.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ProgressNotifyableViewModel.TaskProperty">
            <summary>Register the Task property so it is known in the class.</summary>
        </member>
        <member name="F:Catel.MVVM.ProgressNotifyableViewModel.TaskMessageProperty">
            <summary>Register the TaskMessage property so it is known in the class.</summary>
        </member>
        <member name="F:Catel.MVVM.ProgressNotifyableViewModel.TaskNameProperty">
            <summary>Register the TaskName property so it is known in the class.</summary>
        </member>
        <member name="F:Catel.MVVM.ProgressNotifyableViewModel.TaskPercentageProperty">
            <summary>Register the TaskPercentage property so it is known in the class.</summary>
        </member>
        <member name="F:Catel.MVVM.ProgressNotifyableViewModel.TaskIsIndeterminateProperty">
            <summary>Register the TaskPercentage property so it is known in the class.</summary>
        </member>
        <member name="F:Catel.MVVM.ProgressNotifyableViewModel.DetailedMessageProperty">
            <summary>Register the DetailedMessage property so it is known in the class.</summary>
        </member>
        <member name="F:Catel.MVVM.ProgressNotifyableViewModel._currentItem">
            <summary>
            The _current item.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ProgressNotifyableViewModel._totalItems">
            <summary>
            The _total items.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ProgressNotifyableViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ProgressNotifyableViewModel"/> class.
            </summary>
            <remarks>Must have a public constructor in order to be serializable.</remarks>
        </member>
        <member name="M:Catel.MVVM.ProgressNotifyableViewModel.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ProgressNotifyableViewModel"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">
            if set to <c>true</c>, the initialization will be skipped and must be done manually via <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes"/>.
            </param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ProgressNotifyableViewModel.#ctor(Catel.IoC.IServiceLocator,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows the injection of a custom <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <param name="serviceLocator">The service locator to inject. If <c>null</c>, the <see cref="P:Catel.IoC.ServiceLocator.Default"/> will be used.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">if set to <c>true</c>, the initialization will be skipped and must be done manually via <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes"/>.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="P:Catel.MVVM.ProgressNotifyableViewModel.TaskMessage">
            <summary>
            Gets or sets the task message.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ProgressNotifyableViewModel.TaskName">
            <summary>
            Gets or sets the task name.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ProgressNotifyableViewModel.TaskPercentage">
            <summary>
            Gets or sets the task percentage.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ProgressNotifyableViewModel.TaskIsIndeterminate">
            <summary>
            Gets or sets the task percentage.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ProgressNotifyableViewModel.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ProgressNotifyableViewModel.DetailedMessage">
            <summary>
            Gets the detailed message.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ProgressNotifyableViewModel.Percentage">
            <summary>
            Gets the percentage.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ProgressNotifyableViewModel.UpdateStatus(System.Int32,System.Int32,Catel.MVVM.Tasks.ITask)">
            <summary>
            The update status.
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="task">The task</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ProgressNotifyableViewModel.OnTaskMessageChanged">
            <summary>Occurs when the value of the TaskMessage property is changed.</summary>
        </member>
        <member name="M:Catel.MVVM.ProgressNotifyableViewModel.OnTaskPercentageChanged">
            <summary>Occurs when the value of the TaskPercentage property is changed.</summary>
        </member>
        <member name="T:Catel.MVVM.ModelCleanUpMode">
            <summary>
            Available clean up models for a model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelCleanUpMode.CancelEdit">
            <summary>
            Call <see cref="M:System.ComponentModel.IEditableObject.CancelEdit"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelCleanUpMode.EndEdit">
            <summary>
            Call <see cref="M:System.ComponentModel.IEditableObject.EndEdit"/>.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelEvent">
            <summary>
            Available view model events that can be retrieved via the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Saving">
            <summary>
            Saving event, invoked when a view model is about to be saved.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Saved">
            <summary>
            Saved event, invoked when a view model has been saved successfully.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Canceling">
            <summary>
            Canceling event, invoked when a view model is about to be canceled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Canceled">
            <summary>
            Canceled event, invoked when a view model has been canceled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Closed">
            <summary>
            Closed event, invoked when the view model is closed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelBase">
            <summary>
            View model base for MVVM implementations. This class is based on the <see cref="T:Catel.Data.ModelBase" />, and supports all
            common interfaces used by WPF.
            </summary>
            <remarks>This view model base does not add any services. The technique specific implementation should take care of that
            (such as WPF, Silverlight, etc).</remarks>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._metaData">
            <summary>
            Dictionary containing the view model metadata of a view model type so it has to be calculated only once.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._dispatcherService">
            <summary>
            The dispatcher service used to dispatch all calls.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._ignoreMultipleModelsWarning">
            <summary>
            Value indicating whether the multiple modules warning should be ignored.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._isViewModelInitialized">
            <summary>
            Value indicating whether the view model is already initialized via a call to <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModel" />.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._areViewModelAttributesIntialized">
            <summary>
            Value indicating whether the view model attributes are initialized. 
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._modelsDirtyFlags">
            <summary>
            Value indicating whether the specified models are dirty.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._modelObjects">
            <summary>
            Dictionary of available models inside the view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._modelObjectsInfo">
            <summary>
            Dictionary with info about the available models inside the view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._modelErrorInfo">
            <summary>
            Dictionary with data error info about a specific model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase.ChildViewModels">
            <summary>
            List of child view models which can be registed by the <c>RegisterChildViewModel</c> method.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._childViewModelsHaveErrors">
            <summary>
            Value to determine whether child view models have errors or not.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase.ViewModelManager">
            <summary>
            Gets the view model manager.
            </summary>
            <value>The view model manager.</value>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._viewModelToModelMap">
            <summary>
            Mappings from view model properties to models and their properties.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._title">
            <summary>
            The backing field for the title property.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.MVVM.ViewModelBase" /> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">
            if set to <c>true</c>, the initialization will be skipped and must be done manually via <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes"/>.
            </param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(Catel.IoC.IServiceLocator,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows the injection of a custom <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <param name="serviceLocator">The service locator to inject. If <c>null</c>, the <see cref="P:Catel.IoC.ServiceLocator.Default"/> will be used.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">if set to <c>true</c>, the initialization will be skipped and must be done manually via <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes"/>.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Initialized">
            <summary>
            Occurs when the view model has been initialized.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.InitializedAsync">
            <summary>
            Occurs when the view model has been initialized.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.CommandExecuted">
            <summary>
            Occurs when a command on the view model has been executed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.CommandExecutedAsync">
            <summary>
            Occurs when a command on the view model has been executed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Saving">
            <summary>
            Occurs when the view model is about to be saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.SavingAsync">
            <summary>
            Occurs when the view model is about to be saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Saved">
            <summary>
            Occurs when the view model is saved successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.SavedAsync">
            <summary>
            Occurs when the view model is saved successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Canceling">
            <summary>
            Occurs when the view model is about to be canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.CancelingAsync">
            <summary>
            Occurs when the view model is about to be canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Canceled">
            <summary>
            Occurrs when the view model is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.CanceledAsync">
            <summary>
            Occurrs when the view model is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Closing">
            <summary>
            Occurs when the view model is being closed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.ClosingAsync">
            <summary>
            Occurs when the view model is being closed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Closed">
            <summary>
            Occurs when the view model has just been closed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.ClosedAsync">
            <summary>
            Occurs when the view model has just been closed.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.UniqueIdentifier">
            <summary>
            Gets the unique identifier of the view model.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ViewModelConstructionTime">
            <summary>
            Gets the view model construction time, which is used to get unique instances of view models.
            </summary>
            <value>The view model construction time.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ParentViewModel">
            <summary>
            Gets the parent view model.
            </summary>
            <value>The parent view model.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ViewModelCommandManager">
            <summary>
            Gets the <see cref="P:Catel.MVVM.ViewModelBase.ViewModelCommandManager"/> of this view model.
            </summary>
            <value>The <see cref="P:Catel.MVVM.ViewModelBase.ViewModelCommandManager"/>.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.InvalidateCommandsOnPropertyChanged">
            <summary>
            Gets or sets a value indicating whether the commands should automatically be invalidated on a property change.
            <para />
            If this property is <c>false</c>, properties should either be invalidated by the .NET Framework or by a manual
            call to the <see cref="M:Catel.MVVM.IViewModelCommandManager.InvalidateCommands(System.Boolean)"/> method.
            </summary>
            <value>
            <c>true</c> if the commands should automatically be invalidated on a property change; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.SupportIEditableObject">
            <summary>
            Gets or sets a value indicating whether models that implement <see cref="T:System.ComponentModel.IEditableObject"/> are supported correctly.
            </summary>
            <value>
            <c>true</c> if models that implement <see cref="T:System.ComponentModel.IEditableObject"/> are supported correctly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.IsCanceling">
            <summary>
            Gets a value indicating whether this instance is currently canceling.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.IsSaving">
            <summary>
            Gets a value indicating whether this instance is currently saving.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.IsClosing">
            <summary>
            Gets a value indicating whether this instance is closing.
            </summary>
            <value><c>true</c> if this instance is closing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed. If a view model is closed, calling
            <see cref="M:Catel.MVVM.ViewModelBase.CancelViewModel"/>, <see cref="M:Catel.MVVM.ViewModelBase.SaveViewModel"/> or <see cref="M:Catel.MVVM.ViewModelBase.CloseViewModel(System.Nullable{System.Boolean})"/>
            will have no effect.
            </summary>
            <value><c>true</c> if the view model is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.Title">
            <summary>
            Gets the title of the view model.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.HasErrors">
            <summary>
            Gets a value indicating whether this object contains any field or business errors.
            </summary>
            <value>
            <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.HasDirtyModel">
            <summary>
            Gets a value indicating whether this instance has a dirty model.
            </summary>
            <value>
            <c>true</c> if this instance has a dirty model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.DependencyResolver">
            <summary>
            Gets the dependency resolver.
            </summary>
            <value>The dependency resolver.</value>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ToString">
            <summary>
            Converts the object to a string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializePropertiesWithAttributes">
            <summary>
            Initializes the properties with attributes.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeViewModelMetaData(System.Type)">
            <summary>
            Initializes the view model meta data.
            <para />
            This method only initializes the meta data once per view model type. If a type is already initialized,
            this method will immediately return.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <returns>ViewModelMetadata.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ValidateViewModelToModelMappings">
            <summary>
            Validates the view model to model mappings.
            </summary>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A property is mapped to a model that does not exists.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes">
            <summary>
            Initializes the view model attributes, such as the <see cref="T:Catel.MVVM.ModelAttribute"/> and
            <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/>.
            <para />
            This method is automatically invoked by the constructor. Sometimes, dynamic properties
            are registered after the constructor. Therefore, it is possible to skip the initialization
            of the attributes and handle this manually.
            </summary>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Catel#MVVM#IRelationalViewModel#SetParentViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Sets the new parent view model of this view model.
            </summary>
            <param name="parentViewModel">The parent view model.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Catel#MVVM#IRelationalViewModel#RegisterChildViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Registers a child view model to this view model. When a view model is registered as a child view model, it will
            receive all notifications from this view model and be notified of any validation changes.
            </summary>
            <param name="childViewModel">The child view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="childViewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnChildViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property has changed on the child view model.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnChildViewModelClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the child view model is closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Catel#MVVM#IRelationalViewModel#UnregisterChildViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters the child view model. This means that the child view model will no longer receive any notifications
            from this view model as parent view model, nor will it be included in any validation calls in this view model.
            </summary>
            <param name="childViewModel">The child.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="childViewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.GetChildViewModels">
            <summary>
            Gets the child view models of this view model.
            </summary>
            <returns>An enumerable of current child view models.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.GetAllModels">
            <summary>
            Gets all models that are decorated with the <see cref="T:Catel.MVVM.ModelAttribute"/>.
            </summary>
            <returns>Array of models.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UpdateExplicitViewModelToModelMappings">
            <summary>
            Updates the view model to model mappings that are defined as <see cref="F:Catel.MVVM.ViewModelToModelMode.Explicit"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnPropertyChanged(Catel.Data.AdvancedPropertyChangedEventArgs)">
            <summary>
            Called when a property value has changed.
            </summary>
            <param name="e">The <see cref="T:Catel.Data.AdvancedPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Catel#MVVM#INotifyableViewModel#ViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)">
            <summary>
            Called when a property has changed for a view model type that the current view model is interested in. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <remarks>
            This method should only be called by Catel so the <see cref="T:Catel.MVVM.ManagedViewModel"/> can invoke it. This method is only used as a pass-through
            to the actual <see cref="M:Catel.MVVM.ViewModelBase.OnViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)">
            <summary>
            Called when a property has changed for a view model type that the current view model is interested in. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Catel#MVVM#INotifyableViewModel#ViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command for a view model type that the current view model is interested in has been executed. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter used during the execution.</param>
            <remarks>
            This method should only be called by Catel so the <see cref="T:Catel.MVVM.ManagedViewModel"/> can invoke it. This method is only used as a pass-through
            to the actual <see cref="M:Catel.MVVM.ViewModelBase.OnViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command for a view model type that the current view model is interested in has been executed. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter used during the execution.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Catel#MVVM#INotifyableViewModel#ViewModelEvent(Catel.MVVM.IViewModel,Catel.MVVM.ViewModelEvent,System.EventArgs)">
            <summary>
            Views the model event.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewModelEvent">The view model event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This method should only be called by Catel so the <see cref="T:Catel.MVVM.ManagedViewModel"/> can invoke it. This method is only used as a pass-through
            to the actual <see cref="M:Catel.MVVM.ViewModelBase.OnViewModelEvent(Catel.MVVM.IViewModel,Catel.MVVM.ViewModelEvent,System.EventArgs)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnViewModelEvent(Catel.MVVM.IViewModel,Catel.MVVM.ViewModelEvent,System.EventArgs)">
            <summary>
            Called when an event for a view model type that the current view model is interested in has been raised. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewModelEvent">The view model event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on one of the registered models has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
            <remarks>
            This method will also raise for properties that are not mapped on the view model.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnModelPropertyChangedInternal(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of a Model.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ResetModel(System.String,Catel.MVVM.ModelCleanUpMode)">
            <summary>
            Resets the model by calling uninitializing and initializing the model again. This means that if the model
            supports 
            <see cref="T:System.ComponentModel.IEditableObject"/>, it will be reset.
            </summary>
            <param name="modelProperty">The model property.</param>
            <param name="modelCleanUpMode">The model clean up mode.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="modelProperty"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeModelInternal(System.String,System.Object)">
            <summary>
            Initializes a model by subscribing to all events.
            </summary>
            <param name="modelProperty">The name of the model property.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeModel(System.String,System.Object)">
            <summary>
            Called when a model initialized.
            </summary>
            <param name="modelProperty">The name of the model property.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UninitializeModelInternal(System.String,System.Object,Catel.MVVM.ModelCleanUpMode)">
            <summary>
            Uninitializes a model by unsubscribing from all events.
            </summary>
            <param name="modelProperty">The name of the model property.</param>
            <param name="model">The model.</param>
            <param name="modelCleanUpMode">The model clean up mode.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UninitializeModel(System.String,System.Object,Catel.MVVM.ModelCleanUpMode)">
            <summary>
            Called when a model uninitialized.
            </summary>
            <param name="modelProperty">The name of the model property.</param>
            <param name="model">The model.</param>
            <param name="modelCleanUpMode">The model clean up mode.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnModelErrorInfoUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ModelErrorInfo.Updated"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Cancel">
            <summary>
            Cancels the editing of the data.
            </summary>
            <returns>
            <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CancelAsync">
            <summary>
            Cancels the editing of the data.
            </summary>
            <returns>
            <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Save">
            <summary>
            Saves the data.
            </summary>
            <returns>
            <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.SaveAsync">
            <summary>
            Saves the data.
            </summary>
            <returns>
            <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnClosing">
            <summary>
            Called when the view model is about to be closed.
            <para />
            This method also raises the <see cref="E:Catel.MVVM.ViewModelBase.Closing" /> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnClosingAsync">
            <summary>
            Called when the view model is about to be closed.
            <para />
            This method also raises the <see cref="E:Catel.MVVM.ViewModelBase.Closing"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Close">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBase.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBase.Save"/> method.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CloseAsync">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBase.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBase.Save"/> method.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnClosed(System.Nullable{System.Boolean})">
            <summary>
            Called when the view model has just been closed.
            <para />
            This method also raises the <see cref="E:Catel.MVVM.ViewModelBase.Closed"/> event.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnClosedAsync(System.Nullable{System.Boolean})">
            <summary>
            Called when the view model has just been closed.
            <para />
            This method also raises the <see cref="E:Catel.MVVM.ViewModelBase.Closed"/> event.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.IsModelRegistered(System.String)">
            <summary>
            Determines whether a specific property is registered as a model.
            </summary>
            <param name="name">The name of the registered model.</param>
            <returns>
            <c>true</c> if a specific property is registered as a model; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.RegisterViewModelServices(Catel.IoC.IServiceLocator)">
            <summary>
            Registers the default view model services.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceLocator"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeViewModel">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <returns>The task.</returns>
            <remarks>It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.</remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeViewModelAsync">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <returns>The task.</returns>
            <remarks>It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.</remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Initialize">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <remarks>
            It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeAsync">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <remarks>
            It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CancelViewModel">
            <summary>
            Cancels the editing of the data.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CancelViewModelAsync">
            <summary>
            Cancels the editing of the data.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CancelAndCloseViewModel">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.SaveViewModel">
            <summary>
            Saves the data.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.SaveViewModelAsync">
            <summary>
            Saves the data.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.SaveAndCloseViewModel">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CloseViewModel(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBase.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBase.Save"/> method.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CloseViewModelAsync(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBase.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBase.Save"/> method.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.NavigationContext">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
            <remarks>
            Note that the navigation contexts is first available in the <see cref="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted"/> method, 
            not in the constructor.
            </remarks>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.NavigationCompleted">
            <summary>
            Occurs when the navigation is completed.
            </summary>
            <remarks>
            This should of course be a cleaner solution, but there is no other way to let a view-model
            know that navigation has completed. Another option is injection, but this would require every
            view-model for Windows Phone 7 to accept only the navigation context, which has actually nothing
            to do with the logic.
            <para />
            It is also possible to use the <see cref="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted"/> event.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UpdateNavigationContext(Catel.MVVM.Navigation.NavigationContext)">
            <summary>
            Updates the navigation context. The navigation context provided by this class is different
            from the <see cref="P:Catel.MVVM.ViewModelBase.NavigationContext"/>. Therefore, this method updates the navigation context
            to match it to the values of the <paramref name="navigationContext"/>.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted">
            <summary>
            Called when the navigation has completed.
            </summary>
            <remarks>
            This should of course be a cleaner solution, but there is no other way to let a view-model
            know that navigation has completed. Another option is injection, but this would require every
            view-model for Windows Phone 7 to accept only the navigation context, which has actually nothing
            to do with the logic.
            <para />
            It is also possible to use the <see cref="E:Catel.MVVM.ViewModelBase.NavigationCompleted"/> event.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._throttlingTimer">
            <summary>
            The throttling timer.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._throttlingRate">
            <summary>
            The throttling rate.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._isThrottlingEnabled">
            <summary>
            A value indicating whether throttling is enabled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._isHandlingThrottlingNotifications">
            <summary>
            A value indicating whether throttling is currently being handled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._throttlingLockObject">
            <summary>
            Lock object for throttling.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._throttlingQueue">
            <summary>
            The properties queue used when throttling is enabled.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.DispatchPropertyChangedEvent">
            <summary>
            Gets or sets a value indicating whether the <see cref="M:Catel.MVVM.ViewModelBase.RaisePropertyChanged(System.Object,Catel.Data.AdvancedPropertyChangedEventArgs)"/> will be dispatched using
            the <see cref="T:Catel.Services.IDispatcherService"/>.
            <para />
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ThrottlingRate">
            <summary>
            Gets or sets the throttling rate.
            <para />
            When throttling is enabled, the view model will raise property changed event in a timely manner to
            reduce the number of updates the view has to do based on the properties.
            </summary>
            <value>The throttling rate.</value>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnThrottlingTimerTick">
            <summary>
            Called when the throttling timer ticks.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.RaisePropertyChanged(System.Object,Catel.Data.AdvancedPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Data.ObservableObject.PropertyChanged"/> event.
            <para/>
            This is the one and only method that actually raises the <see cref="E:Catel.Data.ObservableObject.PropertyChanged"/> event. All other
            methods are (and should be) just overloads that eventually call this method.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._validationSummaries">
            <summary>
            Dictionary of properties that are decorated with the <see cref="T:Catel.MVVM.ValidationToViewModelAttribute"/>. These properties should be
            updated after each validation sequence.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._validationSummariesUpdateStamps">
            <summary>
            A date/time with the latest update stamp of each validation summary.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.DeferValidationUntilFirstSaveCall">
            <summary>
            Gets or sets a value indicating whether all validation should be deferred until the first call to <see cref="M:Catel.MVVM.ViewModelBase.SaveViewModel"/>.
            <para />
            If this value is <c>true</c>, all validation will be suspended. As soon as the first call is made to the <see cref="M:Catel.MVVM.ViewModelBase.SaveViewModel"/>,
            the validation will no longer be suspended and activated.
            <para />
            The default value is <c>false</c>.
            </summary>
            <value>
            <c>true</c> if the validation should be deferred; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this value is used, it must be set as first property in the view model because the validation kicks in immediately
            when properties change.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ValidateModelsOnInitialization">
            <summary>
            Gets or sets a value indicating whether to validate the models as soon as they are initialized. This means that
            as soon as a model value is set, the view model checks whether the entity already contains errors.
            <para />
            If this value is <c>true</c>, the errors will immediately be returned for mappings on the model. Otherwise, the errors
            will only become available when a value is entered and then being undone.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            <c>true</c> if the models should be validated on initialization; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ValidateViewModel(System.Boolean,System.Boolean)">
            <summary>
            Validates the specified notify changed properties only.
            </summary>
            <param name="force">If set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <returns>
            <c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
            <remarks>
            This method is useful when the view model is initialized before the window, and therefore WPF does not update the errors and warnings.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnValidating(Catel.Data.IValidationContext)">
            <summary>
            Called when the object is validating.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnValidatingFields(Catel.Data.IValidationContext)">
            <summary>
            Called when the object is validating the fields.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnValidatingBusinessRules(Catel.Data.IValidationContext)">
            <summary>
            Called when the object is validating the business rules.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnValidated(Catel.Data.IValidationContext)">
            <summary>
            Called when the object is validated.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="T:Catel.MVVM.ViewModelFactory">
            <summary>
            Default implementation of the <see cref="T:Catel.MVVM.IViewModelFactory"/> which allows custom instantation of view models. This way,
            if a view model contains a complex constructor or needs caching, this factory can be used.
            <para />
            This default implementation will first try to inject the data context into the view model constructor. If that is not possible,
            it will try to call the empty or default constructor.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelFactory.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelFactory._typeFactory">
            <summary>
            The type factory to use.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelFactory.#ctor(Catel.IoC.ITypeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelFactory" /> class.
            </summary>
            <param name="typeFactory">The type factory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeFactory"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelFactory.CanReuseViewModel(System.Type,System.Type,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Determines whether the specified view model as data context can be reused and allow the view to set itself as
            owner of the inherited view model.
            <para />
            By default a view model is allowed to be inherited when it is of the same type as the expected view model type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="expectedViewModelType">The expected view model type according to the view.</param>
            <param name="actualViewModelType">The actual view model type which is the type of the <paramref name="viewModelAsDataContext"/>.</param>
            <param name="viewModelAsDataContext">The view model as data context which must be checked.</param>
            <returns>
              <c>true</c> if the specified view model instance ben be reused by the view; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelFactory.CreateViewModel(System.Type,System.Object)">
            <summary>
            Creates a new view model.
            </summary>
            <param name="viewModelType">Type of the view model that needs to be created.</param>
            <param name="dataContext">The data context of the view model.</param>
            <returns>The newly created <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if no view model could be created.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement the <see cref="T:Catel.MVVM.IViewModel"/> interface.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelFactory.CreateViewModel(System.Type,System.Object,System.Object)">
            <summary>
            Creates a new view model.
            </summary>
            <param name="viewModelType">Type of the view model that needs to be created.</param>
            <param name="dataContext">The data context of the view model.</param>
            <param name="tag">The preferred tag to use when resolving dependencies.</param>
            <returns>The newly created <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if no view model could be created.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement the <see cref="T:Catel.MVVM.IViewModel"/> interface.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelFactory.CreateViewModel``1(System.Object)">
            <summary>
            Creates a new view model.
            <para />
            This is a convenience wrapper around the <see cref="M:Catel.MVVM.ViewModelFactory.CreateViewModel(System.Type,System.Object,System.Object)"/> method. This method cannot be overriden.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="dataContext">The data context.</param>
            <returns>The newly created <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if no view model could be created.</returns>
            <exception cref="T:System.ArgumentException">The <c>TViewModel</c> does not implement the <see cref="T:Catel.MVVM.IViewModel"/> interface.</exception>
        </member>
        <member name="T:Catel.MVVM.ViewModelManager">
            <summary>
            Manager for view models. Thanks to this manager, it is possible to subscribe to other view models and be able to respond
            correctly to property changes in other views.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager.Log">
            <summary>
            The <see cref="T:Catel.Logging.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager._instances">
            <summary>
            List of all live instances of the view model managers.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager._managedViewModelsLock">
            <summary>
            The lock for the _managedViewModels dictionary.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager._managedViewModels">
            <summary>
            Dictionary containing all the managed view models by this view model manager.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager._viewModelModelsLock">
            <summary>
            The lock for the _viewModelModels dictionary.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager._viewModelModels">
            <summary>
            Dictionary containing the unique identifiers of a all view models and their registered models.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelManager"/> class.
            </summary>
            <remarks>
            The constructor is private because this is a singleton class.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.ViewModelManager.ViewModelCount">
            <summary>
            Gets the view model count.
            </summary>
            <value>The view model count.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelManager.ActiveViewModels">
            <summary>
            Gets the active view models presently registered.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RegisterModel(Catel.MVVM.IViewModel,System.Object)">
            <summary>
            Registers the model of a view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.UnregisterModel(Catel.MVVM.IViewModel,System.Object)">
            <summary>
            Unregisters the model of a view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.UnregisterAllModels(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters all models of a view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetViewModelsOfModel(System.Object)">
            <summary>
            Gets the view models of a model.
            </summary>
            <param name="model">The model to find the linked view models for.</param>
            <returns>An array containing all the view models.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetViewModel(System.Int32)">
            <summary>
            Gets the view model by its unique identifier.
            </summary>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <returns>The <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if the view model is not registered.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetFirstOrDefaultInstance``1">
            <summary>
            Gets the first or default instance of the specified view model.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <returns>
            The <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if the view model is not registered.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetFirstOrDefaultInstance(System.Type)">
            <summary>
            Gets the first or default instance of the specified view model.
            </summary>
            <param name="viewModelType">Type of the view mode.</param>
            <returns>
            The <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if the view model is not registered.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> is not of type <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetChildViewModels(Catel.MVVM.IViewModel)">
            <summary>
            Gets the child view models of the specified view model.
            </summary>
            <param name="parentViewModel">The parent view model.</param>
            <returns>The child view models.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetChildViewModels(System.Int32)">
            <summary>
            Gets the child view models of the specified view model unique identifier.
            </summary>
            <param name="parentUniqueIdentifier">The parent unique identifier.</param>
            <returns>The child view models.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.ClearAll">
            <summary>
            Clears all the current view model managers.
            </summary>
            <remarks>
            This method should only be called during unit testing.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.Clear">
            <summary>
            Clears all the view models in the manager.
            </summary>
            <remarks>
            This method should only be called during unit testing.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RegisterViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Registers a view model instance with the manager. All view models must register themselves to the manager.
            </summary>
            <param name="viewModel">The view model to register.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RegisterViewModelInstanceInternal(Catel.MVVM.IViewModel)">
            <summary>
            Registers a view model instance with the manager. All view models must register themselves to the manager.
            </summary>
            <param name="viewModel">The view model to register.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.UnregisterViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.
            </summary>
            <param name="viewModel">The view model to unregister.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.UnregisterViewModelInstanceInternal(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.
            </summary>
            <param name="viewModel">The view model to unregister.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.AddInterestedViewModelInstance(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Adds an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically register
            itself to the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> is interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.AddInterestedViewModelInstanceInternal(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Adds an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically register
            itself to the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> is interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RemoveInterestedViewModelInstance(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Removes an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically unregister
            itself from the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> was interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RemoveInterestedViewModelInstanceInternal(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Removes an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically unregister
            itself from the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> was interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetManagedViewModel(System.Type)">
            <summary>
            Gets the managed view model for a specific view model type.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <returns>The <see cref="T:Catel.MVVM.ManagedViewModel"/> of the specified type.</returns>
        </member>
        <member name="T:Catel.MVVM.ViewModelMetadata">
            <summary>
            Class containing meta data for a view model type.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelMetadata.#ctor(System.Type,System.Collections.Generic.Dictionary{System.String,Catel.MVVM.ModelInfo},System.Collections.Generic.Dictionary{System.String,Catel.MVVM.ViewModelToModelMapping},System.Collections.Generic.Dictionary{System.String,Catel.MVVM.ValidationToViewModelAttribute})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelMetadata"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="models">The models.</param>
            <param name="mappings">The mappings.</param>
            <param name="validations">The validations.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="models"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="mappings"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validations"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.Models">
            <summary>
            Gets the models.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.Mappings">
            <summary>
            Gets the mappings.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.Validations">
            <summary>
            Gets the validations.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.ViewToViewModelMappingType">
            <summary>
            Mapping types for the <see cref="T:Catel.MVVM.Views.ViewToViewModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingType.TwoWayDoNothing">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, nothing happens when the view model of the view
            changes. This way, it might be possible that the values of the view and the
            view model are different. The first one to update next will update the other.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingType.TwoWayViewWins">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, the value of the view is used when the view model 
            of the view is changed, and is directly transferred to the view model value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingType.TwoWayViewModelWins">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, the value of the view model is used when the view model 
            of the view is changed, and is directly transferred to the view value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingType.ViewToViewModel">
            <summary>
            The mapping is from the view to the view model only.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingType.ViewModelToView">
            <summary>
            The mapping is from the view model to the view only.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.ViewToViewModelAttribute">
            <summary>
            A mapper attribute to map a <see cref="T:Catel.MVVM.Views.IView"/> (such as the UserControl or the DataWindow) 
            property to a view model property.
            <para />
            This class is very useful when creating custom user controls that need more parameterized settings than just the
            <c>DataContext</c> property.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewToViewModelAttribute"/> class.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Catel.MVVM.Views.ViewToViewModelAttribute.ViewModelPropertyName">
            <summary>
            Gets or sets the view model property name.
            </summary>
            <value>The view model property name.</value>
        </member>
        <member name="P:Catel.MVVM.Views.ViewToViewModelAttribute.MappingType">
            <summary>
            Gets or sets the type of the mapping.
            </summary>
            <value>The type of the mapping.</value>
        </member>
        <member name="T:Catel.MVVM.Views.DataContextChangedEventArgs">
            <summary>
            Contains information about DataContext changed events.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.DataContextChangedEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.DataContextChangedEventArgs"/> class.
            </summary>
            <param name="oldContext">The old context.</param>
            <param name="newContext">The new context.</param>
        </member>
        <member name="P:Catel.MVVM.Views.DataContextChangedEventArgs.OldContext">
            <summary>
            Gets the old context.
            </summary>
            <value>The old context.</value>
        </member>
        <member name="P:Catel.MVVM.Views.DataContextChangedEventArgs.NewContext">
            <summary>
            Gets the new context.
            </summary>
            <value>The new context.</value>
        </member>
        <member name="P:Catel.MVVM.Views.DataContextChangedEventArgs.AreEqual">
            <summary>
            Gets a value indicating whether the old and new context are equal.
            </summary>
            <value><c>true</c> if the old and new context are equal; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.MVVM.Views.ViewLoadEventArgs">
            <summary>
            EventArgs implementation for when a <see cref="T:Catel.MVVM.Views.IView"/> is loaded.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewLoadEventArgs.#ctor(Catel.MVVM.Views.IView)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewLoadEventArgs"/> class.
            </summary>
            <param name="view">The view.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Views.ViewLoadEventArgs.View">
            <summary>
            Gets the view that has just been loaded.
            </summary>
            <value>The view.</value>
        </member>
        <member name="T:Catel.MVVM.Views.ViewStackPartEventArgs">
            <summary>
            Event args when a part of a view stack is raises an event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStackPartEventArgs.#ctor(Catel.MVVM.Views.IView)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewStackPartEventArgs"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="P:Catel.MVVM.Views.ViewStackPartEventArgs.View">
            <summary>
            Gets the view that has been loaded.
            </summary>
            <value>The view.</value>
        </member>
        <member name="T:Catel.MVVM.Views.IViewManagerExtensions">
            <summary>
            Extension methods for the IViewManager.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.IViewManagerExtensions.GetFirstOrDefaultInstance``1(Catel.MVVM.IViewModelManager)">
            <summary>
            Gets the first or default instance of the specified view type.
            </summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <param name="viewManager">The view manager.</param>
            <returns>The view or <c>null</c> if the view is not registered.</returns>
        </member>
        <member name="T:Catel.MVVM.Views.ViewExtensions">
            <summary>
            Extension methods for views.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.GetParent(Catel.MVVM.Views.IView)">
            <summary>
            Gets the parent of the specified view.
            </summary>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.Dispatch(Catel.MVVM.Views.IView,System.Action)">
            <summary>
            Runs the specified action on the view dispatcher.
            </summary>
            <param name="view">The view.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.GetProperties(Catel.MVVM.Views.IView)">
            <summary>
            Gets the properties of the view.
            </summary>
            <param name="view">The view.</param>
            <returns>List of properties.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.SubscribeToPropertyChanged(Catel.MVVM.Views.IView,System.String,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Subscribes to the property changed event.
            </summary>
            <param name="view">The view.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.EnsureVisualTree(Catel.MVVM.Views.IView)">
            <summary>
            Ensures that a visual tree exists for the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.FindParentViewModelContainer(Catel.MVVM.Views.IView)">
            <summary>
            Finds the parent view model container.
            </summary>
            <param name="view">The view.</param>
            <returns>The IViewModelContainer or <c>null</c> if the container is not found.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.AutoDetectViewPropertiesToSubscribe(System.Type)">
            <summary>
            Automatically detects view properties to subscribe to by searching for dependency properties
            decorated with the <see cref="T:Catel.MVVM.Views.ViewToViewModelAttribute"/>.
            </summary>
            <param name="viewType">The view type.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.GetParent(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the parent of the specified element, both for Silverlight and WPF.
            </summary>
            <param name="element">The element.</param>
            <returns>The parent <see cref="T:Windows.UI.Xaml.FrameworkElement"/> or <c>null</c> if there is no parent.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.GetPossibleParents(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the possible parents of the specified element, both for Silverlight and WPF.
            </summary>
            <param name="element">The element.</param>
            <returns>The possible parents <see cref="T:Windows.UI.Xaml.FrameworkElement"/> or <c>null</c> if there is no parent.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.FindParentByPredicate(Catel.MVVM.Views.IView,System.Predicate{System.Object})">
            <summary>
            Finds a parent by predicate. It first tries to find the parent via the <c>UserControl.Parent</c> property, and if that
            doesn't satisfy, it uses the <c>UserControl.TemplatedParent</c> property.
            </summary>
            <param name="view">The control.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            <see cref="T:Windows.UI.Xaml.DependencyObject"/> or <c>null</c> if no parent is found that matches the predicate.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewExtensions.FindParentByPredicate(Windows.UI.Xaml.FrameworkElement,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds a parent by predicate. It first tries to find the parent via the <c>UserControl.Parent</c> property, and if that
            doesn't satisfy, it uses the <c>UserControl.TemplatedParent</c> property.
            </summary>
            <param name="view">The control.</param>
            <param name="predicate">The predicate.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>
            <see cref="T:Windows.UI.Xaml.DependencyObject"/> or <c>null</c> if no parent is found that matches the predicate.
            </returns>
        </member>
        <member name="T:Catel.MVVM.Views.ViewToViewModelMappingHelper">
            <summary>
            Helper class to fix <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> for <see cref="T:Catel.MVVM.Views.IView"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingHelper._viewModelContainers">
            <summary>
            Dictionary of <see cref="T:Catel.MVVM.IViewModelContainer"/> instances managed by this helper class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingHelper._viewToViewModelMappingContainers">
            <summary>
            Dictionary of <see cref="T:Catel.MVVM.Views.ViewToViewModelMappingContainer"/> instances per type.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingHelper._ignoredViewModelChanges">
            <summary>
            List of properties in the view model that should be ignored.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingHelper._ignoredViewChanges">
            <summary>
            List of properties in the view that should be ignored.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingHelper._previousViewModel">
            <summary>
            Gets or sets the previous view model.
            </summary>
            <value>The previous view model.</value>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.#ctor(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewToViewModelMappingHelper"/> class.
            </summary>
            <param name="viewModelContainer">The view model container.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Views.ViewToViewModelMappingHelper.ViewModelContainer">
            <summary>
            Gets the view model container.
            </summary>
            <value>The view model container.</value>
        </member>
        <member name="P:Catel.MVVM.Views.ViewToViewModelMappingHelper.ViewModelContainerType">
            <summary>
            Gets the type of the view model container.
            </summary>
            <value>The type of the view model container.</value>
        </member>
        <member name="P:Catel.MVVM.Views.ViewToViewModelMappingHelper.CurrentViewModel">
            <summary>
            Gets the current view model.
            </summary>
            <value>The current view model.</value>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.InitializeViewToViewModelMappings(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes the <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> for the specified <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
            <param name="viewModelContainer">The view model container to initialize the mappings for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.UninitializeViewToViewModelMappings(Catel.MVVM.IViewModelContainer)">
            <summary>
            Uninitializes the <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> for the specified <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
            <param name="viewModelContainer">The view model container the uninitialize the mappings for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.UninitializeViewToViewModelMappings">
            <summary>
            Uninitializes the <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> for the registered <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.InitializeViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Initializes the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.UninitializeViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Uninitializes the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.OnViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the view model on the view model container has changed.
            </summary>
            <param name="sender">The view model container.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model has changed.
            </summary>
            <param name="sender">The view model.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.OnViewModelContainerPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model container has changed.
            </summary>
            <param name="sender">The view model container.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.TransferValueFromViewToViewModel(Catel.MVVM.IViewModel,System.String,System.String)">
            <summary>
            Transfers the value from a view property to the view model property.
            <para/>
            This method does nothing when <paramref name="viewModel"/> is <c>null</c>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.TransferValueFromViewModelToView(Catel.MVVM.IViewModel,System.String,System.String)">
            <summary>
            Transfers the value from a view model property to the view property.
            <para/>
            This method does nothing when <paramref name="viewModel"/> is <c>null</c>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingHelper.TransferValue(System.Object,System.String,System.Object,System.String)">
            <summary>
            Transfers a value from the source property to the target property.
            </summary>
            <param name="source">The source.</param>
            <param name="sourcePropertyName">Name of the source property.</param>
            <param name="target">The target.</param>
            <param name="targetPropertyName">Name of the target property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="sourcePropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="targetPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Views.IDataWindow">
            <summary>
            Interface defining functionality for a window.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.INavigationView">
            <summary>
            Interface defining functionality for a view with navigation.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.IPage">
            <summary>
            Interface defining functionality for a page.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.IUserControl">
            <summary>
            Interface defining functionality for user controls.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Views.IUserControl.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Views.IUserControl.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <c>DependencyObject</c> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para />
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Views.IUserControl.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Views.IUserControl.Parent">
            <summary>
            Gets the parent of the view.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Catel.MVVM.Views.IView">
            <summary>
            Interface defining the base functionality of a view required to interact with Catel.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Views.IView.DataContext">
            <summary>
            Gets or sets the data context.
            </summary>
            <value>
            The data context.
            </value>
        </member>
        <member name="P:Catel.MVVM.Views.IView.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="P:Catel.MVVM.Views.IView.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the view is enabled.
            </summary>
            <value><c>true</c> if the view is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Catel.MVVM.Views.IView.Loaded">
            <summary>
            Occurs when the view is loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.IView.Unloaded">
            <summary>
            Occurs when the view is unloaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.IView.DataContextChanged">
            <summary>
            Occurs when the data context has changed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.IViewLoadManager">
            <summary>
            Manager that handles top =&gt; bottom loaded events for all views inside an application.
            <para>
            </para>
            The reason this class is built is that in non-WPF technologies, the visual tree is loaded from
            bottom =&gt; top. However, Catel heavily relies on the order to be top =&gt; bottom.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.IViewLoadManager.AddView(Catel.MVVM.Views.IViewLoadState)">
            <summary>
            Adds the view load state.
            </summary>
            <param name="viewLoadState">The view load state.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewLoadState" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.IViewLoadManager.CleanUp">
            <summary>
            Cleans up the dead links.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.IViewLoadManager.ViewLoading">
            <summary>
            Occurs when any of the subscribed framework elements are about to be loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.IViewLoadManager.ViewLoaded">
            <summary>
            Occurs when any of the subscribed framework elements are loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.IViewLoadManager.ViewUnloading">
            <summary>
            Occurs when any of the subscribed framework elements are about to be unloaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.IViewLoadManager.ViewUnloaded">
            <summary>
            Occurs when any of the subscribed framework elements are unloaded.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.IViewLoadState">
            <summary>
            Interface containing the load state of a view. This interface can be implemented by
            a view, but also by other helper classes wrapping a view.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Views.IViewLoadState.View">
            <summary>
            Gets the view object.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.IViewLoadState.Loaded">
            <summary>
            Occurs when the view is loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.IViewLoadState.Unloaded">
            <summary>
            Occurs when the view is unloaded.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.IViewManager">
            <summary>
            Manager that can search for views belonging to a view model.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Views.IViewManager.ActiveViews">
            <summary>
            Gets the active views presently registered.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.IViewManager.RegisterView(Catel.MVVM.Views.IView)">
            <summary>
            Registers a view so it can be linked to a view model instance.
            </summary>
            <param name="view">The view to register.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.IViewManager.UnregisterView(Catel.MVVM.Views.IView)">
            <summary>
            Unregisters a view so it can no longer be linked to a view model instance.
            </summary>
            <param name="view">The view to unregister.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.IViewManager.GetViewsOfViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Gets the views of view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>An array containing all the views that are linked to the view.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.IViewManager.GetFirstOrDefaultInstance(System.Type)">
            <summary>
            Gets the first or default instance of the specified view type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <returns>The <see cref="T:Catel.MVVM.IViewModel"/> or <c>null</c> if the view model is not registered.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="viewType"/> is not of type <see cref="T:Catel.MVVM.Views.IView"/>.</exception>
        </member>
        <member name="T:Catel.MVVM.Views.IViewModelWrapper">
            <summary>
            Interface defining a view model wrapper as a container layer for a view model.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.IViewPropertySelector">
            <summary>
            Selector class to keep the view property selections to a minimum. Catel uses a special wrapping
            technology to wrap bindings to view properties to be able to add change notifications for all target
            platforms.
            <para />
            Though this technology works great, it might have impact on performance and this is not always necessary. By
            customizing the <see cref="T:Catel.MVVM.Views.IViewPropertySelector"/>, developers can tweak the interesting view properties
            per type.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.IViewPropertySelector.AddPropertyToSubscribe(System.String,System.Type)">
            <summary>
            Adds the property to subscribe to.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="targetViewType">Type of the target view. If <c>null</c>, all target views will subscribe to this property.</param>
        </member>
        <member name="M:Catel.MVVM.Views.IViewPropertySelector.MustSubscribeToAllViewProperties(System.Type)">
            <summary>
            Determines whether all view properties must be subscribed for this type.
            </summary>
            <param name="targetViewType">Type of the target view.</param>
            <returns><c>true</c> if all view properties must be subscribed to, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.IViewPropertySelector.GetViewPropertiesToSubscribeTo(System.Type)">
            <summary>
            Gets the view properties to subscribe to for the specified target view type. 
            <para />
            If the <see cref="M:Catel.MVVM.Views.IViewPropertySelector.MustSubscribeToAllViewProperties(System.Type)"/> returns <c>true</c> for the specified target view
            type, this method will not be called and can return an empty list.
            </summary>
            <param name="targetViewType">Type of the target view.</param>
            <returns>The list of view properties to subscribe to.</returns>
        </member>
        <member name="T:Catel.MVVM.Views.ViewLoadStateEvent">
            <summary>
            Available view load state events.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewLoadStateEvent.Loading">
            <summary>
            The view is about to be loaded.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewLoadStateEvent.Loaded">
            <summary>
            The view has just been loaded.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewLoadStateEvent.Unloading">
            <summary>
            The view is about to be unloaded.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewLoadStateEvent.Unloaded">
            <summary>
            The view has just been unloaded.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Views.ViewLoadManager">
            <summary>
            Manager that handles top =&gt; bottom loaded events for all views inside an application.
            <para>
            </para>
            The reason this class is built is that in non-WPF technologies, the visual tree is loaded from
            bottom =&gt; top. However, Catel heavily relies on the order to be top =&gt; bottom.
            <para />
            This manager subscribes to both the <c>Loaded</c> and <c>LayoutUpdated</c>
            events. This is because in a nested scenario this will happen:
            <para />
            <code>
            <![CDATA[
            - UserControl 1
              |- UserControl 2
                 |- UserControl 3
            ]]>
            </code>
            Will be executed in the following order:
            <para />
            <list type="number">
              <item><description>Loaded (UC 3).</description></item>
              <item><description>Loaded (UC 2).</description></item>
              <item><description>Loaded (UC 1).</description></item>
              <item><description>LayoutUpdated (UC 1).</description></item>
              <item><description>LayoutUpdated (UC 2).</description></item>
              <item><description>LayoutUpdated (UC 3).</description></item>
            </list>
            </summary>
            <remarks>
            To get the best performance, this class will only execute logic on silverlight systems. All other systems correctly
            support the loaded event.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Views.ViewLoadManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewLoadManager"/> class.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.ViewLoadManager.ViewLoading">
            <summary>
            Occurs when any of the subscribed views are about to be loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.ViewLoadManager.ViewLoaded">
            <summary>
            Occurs when any of the subscribed views are loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.ViewLoadManager.ViewUnloading">
            <summary>
            Occurs when any of the subscribed views are about to be unloaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.ViewLoadManager.ViewUnloaded">
            <summary>
            Occurs when any of the subscribed views are unloaded.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewLoadManager.AddView(Catel.MVVM.Views.IViewLoadState)">
            <summary>
            Adds the view load state.
            </summary>
            <param name="viewLoadState">The view load state.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewLoadState" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewLoadManager.CleanUp">
            <summary>
            Cleans up the dead links.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewLoadManager.InvokeViewLoadEvent(Catel.MVVM.Views.IView,Catel.MVVM.Views.ViewLoadStateEvent)">
            <summary>
            Invokes the specific view load event and makes sure that it isn't double invoked.
            </summary>
            <param name="view">The view.</param>
            <param name="viewLoadStateEvent">The view load state event.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">viewLoadStateEvent</exception>
        </member>
        <member name="T:Catel.MVVM.Views.ViewManager">
            <summary>
            Manager that can search for views belonging to a view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewManager.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewManager._registeredViews">
            <summary>
            List of views and the unique identifyer of the view models they own.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Views.ViewManager.ActiveViews">
            <summary>
            Gets the active views presently registered.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewManager.RegisterView(Catel.MVVM.Views.IView)">
            <summary>
            Registers a view so it can be linked to a view model instance.
            </summary>
            <param name="view">The view to register.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewManager.UnregisterView(Catel.MVVM.Views.IView)">
            <summary>
            Unregisters a view so it can no longer be linked to a view model instance.
            </summary>
            <param name="view">The view to unregister.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewManager.GetViewsOfViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Gets the views of view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>An array containing all the views that are linked to the view.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewManager.GetFirstOrDefaultInstance(System.Type)">
            <summary>
            Gets the first or default instance of the specified view type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <returns>
            The <see cref="T:Catel.MVVM.IViewModel" /> or <c>null</c> if the view model is not registered.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="viewType"/> is not of type <see cref="T:Catel.MVVM.Views.IView"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewManager.OnViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the view model of a view has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewManager.SyncViewModelOfView(Catel.MVVM.Views.IView)">
            <summary>
            Synchronizes the view model of view.
            </summary>
            <param name="view">The view.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.Views.ViewModelWrapper">
            <summary>
            View model wrapper class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewModelWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewModelWrapper" /> class.
            </summary>
            <param name="contentToWrap">The view model wrapper object, such as a grid.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="contentToWrap" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewModelWrapper.UpdateViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Updates the view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="T:Catel.MVVM.Views.ViewPropertySelector">
            <summary>
            Selector class to keep the view property selections to a minimum. Catel uses a special wrapping
            technology to wrap bindings to view properties to be able to add change notifications for all target
            platforms.
            <para />
            Though this technology works great, it might have impact on performance and this is not always necessary. By
            customizing the <see cref="T:Catel.MVVM.Views.IViewPropertySelector"/>, developers can tweak the interesting view properties
            per type.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewPropertySelector.AddPropertyToSubscribe(System.String,System.Type)">
            <summary>
            Adds the property to subscribe to.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="targetViewType">Type of the target view. If <c>null</c>, all target views will subscribe to this property.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewPropertySelector.MustSubscribeToAllViewProperties(System.Type)">
            <summary>
            Determines whether all view properties must be subscribed for this type.
            </summary>
            <param name="targetViewType">Type of the target view.</param>
            <returns><c>true</c> if all view properties must be subscribed to, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewPropertySelector.GetViewPropertiesToSubscribeTo(System.Type)">
            <summary>
            Gets the view properties to subscribe to for the specified target view type. 
            <para />
            If the <see cref="M:Catel.MVVM.Views.ViewPropertySelector.MustSubscribeToAllViewProperties(System.Type)"/> returns <c>true</c> for the specified target view
            type, this method will not be called and can return an empty list.
            </summary>
            <param name="targetViewType">Type of the target view.</param>
            <returns>The list of view properties to subscribe to.</returns>
        </member>
        <member name="T:Catel.MVVM.Views.FastViewPropertySelector">
            <summary>
            Very fast view property selector because it does not select any view properties.
            <para />
            Use this one for best performance but loose the automatic view property change notifications.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.FastViewPropertySelector.MustSubscribeToAllViewProperties(System.Type)">
            <summary>
            Determines whether all view properties must be subscribed for this type.
            </summary>
            <param name="targetViewType">Type of the target view.</param>
            <returns><c>true</c> if all view properties must be subscribed to, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Catel.MVVM.Views.ViewToViewModelMapping">
            <summary>
            Holds the information for a view to viewmodel mapping. The information is based on the <see cref="T:Catel.MVVM.Views.ViewToViewModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMapping.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMapping.#ctor(System.String,System.String,Catel.MVVM.Views.ViewToViewModelMappingType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> class.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="mapping">The mapping type.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.MVVM.Views.ViewToViewModelMapping.ViewPropertyName">
            <summary>
            Gets the name of the view property.
            </summary>
            <value>The name of the view property.</value>
        </member>
        <member name="P:Catel.MVVM.Views.ViewToViewModelMapping.ViewModelPropertyName">
            <summary>
            Gets the name of the view model property.
            </summary>
            <value>The name of the view model property.</value>
        </member>
        <member name="P:Catel.MVVM.Views.ViewToViewModelMapping.MappingType">
            <summary>
            Gets or sets the mapping type.
            </summary>
            <value>The mapping type.</value>
        </member>
        <member name="T:Catel.MVVM.Views.ViewToViewModelMappingContainer">
            <summary>
            Container class for <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> elements.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingContainer.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingContainer._viewToViewModelMappings">
            <summary>
            Dictionary containing all the view to view model mappings.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Views.ViewToViewModelMappingContainer._viewModelToViewMappings">
            <summary>
            Dictionary containing all the view model to view mappings.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingContainer.#ctor(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewToViewModelMappingContainer" /> class.
            </summary>
            <param name="viewModelContainer">The view.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingContainer.GetAllViewToViewModelMappings">
            <summary>
            Gets all the <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> that are registered.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingContainer.ContainsViewToViewModelMapping(System.String)">
            <summary>
            Determines whether the manager contains a view to view model property mapping for the specified view property name.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <returns>
            <c>true</c> if the manager contains a view to view model property mapping for the specified view property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingContainer.GetViewToViewModelMapping(System.String)">
            <summary>
            Gets the <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> that is mapped to the specified view property name.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <returns><see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingContainer.ContainsViewModelToViewMapping(System.String)">
            <summary>
            Determines whether the manager contains a view model to view property mapping for the specified view model property name.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <returns>
            <c>true</c> if the manager contains a view model to view property mapping for the specified view model property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewToViewModelMappingContainer.GetViewModelToViewMapping(System.String)">
            <summary>
            Gets the <see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/> that is mapped to the specified view model property name.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <returns><see cref="T:Catel.MVVM.Views.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="T:Catel.MVVM.Views.ViewStack">
            <summary>
            Class containing a view stack and whether the stack is currently loaded.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.#ctor(Catel.MVVM.Views.IView,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewStack" /> class.
            </summary>
            <param name="view">The view.</param>
            <param name="isViewLoaded">if set to <c>true</c>, the view is loaded.</param>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.#ctor(Catel.MVVM.Views.IView,System.Boolean,Catel.MVVM.Views.ViewStack)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.ViewStack" /> class.
            </summary>
            <param name="view">The view.</param>
            <param name="isViewLoaded">if set to <c>true</c>, the view is loaded.</param>
            <param name="parentViewStack">The parent view stack. Can be <c>null</c> for root view stacks.</param>
        </member>
        <member name="P:Catel.MVVM.Views.ViewStack.IsOutdated">
            <summary>
            Gets or sets a value indicating whether this view stack is outdated, meaning it can be removed.
            </summary>
            <value><c>true</c> if this instance is outdated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Views.ViewStack.IsViewStackLoaded">
            <summary>
            Gets a value indicating whether this view stack is loaded.
            </summary>
            <value><c>true</c> if this instance is view stack loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Catel.MVVM.Views.ViewStack.ViewLoaded">
            <summary>
            Occurs when the current view has been loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.ViewStack.ViewUnloaded">
            <summary>
            Occurs when the current view has been unloaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.ViewStack.ViewStackLoaded">
            <summary>
            Occurs when one of the child views is loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.ViewStack.ViewStackUnloaded">
            <summary>
            Occurs when one of the child views is loaded.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.NotifyThatParentIsReadyToAcceptLoadedMessages">
            <summary>
            Notifies the that parent is ready to accept loaded messages.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.AddChild(Catel.MVVM.Views.ViewStack,Catel.MVVM.Views.ViewStack)">
            <summary>
            Adds a new child to the stack.
            </summary>
            <param name="viewStack">The view stack.</param>
            <param name="parentViewStack">The parent view stack.</param>
            <returns><c>true</c> if added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.AddChild(Catel.MVVM.Views.IView,Catel.MVVM.Views.ViewStack)">
            <summary>
            Adds a new child to the stack.
            </summary>
            <param name="view">The view.</param>
            <param name="parentViewStack">The parent view stack.</param>
            <returns><c>true</c> if added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.Dispose">
            <summary>
            Disposes this instance.
            <para />
            Not using <see cref="T:System.IDisposable"/> to prevent other auto systems from kicking in.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.MarkAsLoaded">
            <summary>
            Marks the view stack as loaded.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.MarkAsUnloaded">
            <summary>
            Marks the view stack as unloaded.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.CheckForOutdatedChildren">
            <summary>
            Checks for outdated children and removes them if necessary.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.ViewStack.ContainsView(Catel.MVVM.Views.IView)">
            <summary>
            Determines whether this view stack contains the specified view.
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if this view stack contains the specified view; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Catel.MVVM.Views.WeakViewInfo">
            <summary>
            Class containing weak events for a <see cref="T:Catel.MVVM.Views.IView"/>. This way it is safe to subscribe
            to events of a <see cref="T:Catel.MVVM.Views.IView"/> without causing memory leaks.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.WeakViewInfo.#ctor(Catel.MVVM.Views.IView,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.WeakViewInfo"/> class.
            </summary>
            <param name="view">The view.</param>
            <param name="isViewLoaded">if set to <c>true</c>, the view is already loaded.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Views.WeakViewInfo.#ctor(Catel.MVVM.Views.IViewLoadState,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Views.WeakViewInfo" /> class.
            </summary>
            <param name="viewLoadState">The view load state.</param>
            <param name="isViewLoaded">if set to <c>true</c>, the view is already loaded.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewLoadState" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Views.WeakViewInfo.IsAlive">
            <summary>
            Gets a value indicating whether the link to the <see cref="T:Catel.MVVM.Views.IView"/> is alive.
            </summary>
            <value><c>true</c> if the link is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Views.WeakViewInfo.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Catel.MVVM.Views.WeakViewInfo.IsLoaded">
            <summary>
            Gets a value indicating whether the <see cref="P:Catel.MVVM.Views.WeakViewInfo.View"/> is loaded.
            </summary>
            <value><c>true</c> if the <see cref="P:Catel.MVVM.Views.WeakViewInfo.View"/> is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Catel.MVVM.Views.WeakViewInfo.Loaded">
            <summary>
            Occurs when the view is loaded.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Views.WeakViewInfo.Unloaded">
            <summary>
            Occurs when the view is unloaded.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Views.WeakViewInfo.OnViewLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the view is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Views.WeakViewInfo.OnViewUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the view is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Views.WeakViewInfo.OnViewLoadStateLoaded(System.Object,System.Object)">
            <summary>
            Called when the view is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.Views.WeakViewInfo.OnViewLoadStateUnloaded(System.Object,System.Object)">
            <summary>
            Called when the view is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Catel.MVVM.DataContextSubscriptionService">
            <summary>
            Service that determines how to subscribe to data context.
            </summary>
        </member>
        <member name="M:Catel.MVVM.DataContextSubscriptionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.DataContextSubscriptionService"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.DataContextSubscriptionService.DefaultDataContextSubscriptionMode">
            <summary>
            Gets or sets the default data context subscription mode.
            </summary>
            <value>The default data context subscription mode.</value>
        </member>
        <member name="M:Catel.MVVM.DataContextSubscriptionService.GetDataContextSubscriptionMode(System.Type)">
            <summary>
            Gets the data context subscription mode for the specific view.
            </summary>
            <param name="viewType">Type of the view.</param>
            <returns>The data context subscription mode.</returns>
        </member>
        <member name="T:Catel.MVVM.DataContextSubscriptionMode">
            <summary>
            Data context subscription mode.
            </summary>
        </member>
        <member name="F:Catel.MVVM.DataContextSubscriptionMode.DirectDataContext">
            <summary>
            The direct data context only.
            </summary>
        </member>
        <member name="F:Catel.MVVM.DataContextSubscriptionMode.InheritedDataContext">
            <summary>
            Tee direct data context and the inherited data context.
            </summary>
        </member>
        <member name="T:Catel.MVVM.IDataContextSubscriptionService">
            <summary>
            Service that determines how to subscribe to a data context.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IDataContextSubscriptionService.DefaultDataContextSubscriptionMode">
            <summary>
            Gets or sets the default data context subscription mode.
            </summary>
            <value>The default data context subscription mode.</value>
        </member>
        <member name="M:Catel.MVVM.IDataContextSubscriptionService.GetDataContextSubscriptionMode(System.Type)">
            <summary>
            Gets the data context subscription mode for the specific view.
            </summary>
            <param name="viewType">Type of the view.</param>
            <returns>The data context subscription mode.</returns>
        </member>
        <member name="T:Catel.MVVMModule">
            <summary>
            MVVM module which allows the registration of default services in the service locator.
            </summary>
        </member>
        <member name="M:Catel.MVVMModule.Initialize(Catel.IoC.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Catel.ICommandManagerExtensions">
            <summary>
            Extension methods for the <see cref="T:Catel.MVVM.ICommandManager"/>.
            </summary>
        </member>
        <member name="M:Catel.ICommandManagerExtensions.FindCommandsByGesture(Catel.MVVM.ICommandManager,Catel.Windows.Input.InputGesture)">
            <summary>
            Finds the commands inside the <see cref="T:Catel.MVVM.ICommandManager"/> by gesture.
            </summary>
            <param name="commandManager">The command manager.</param>
            <param name="inputGesture">The input gesture.</param>
            <returns>Dictionary&lt;System.String, ICommand&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandManager"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="inputGesture"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.ICommandManagerExtensions.CreateCommandWithGesture(Catel.MVVM.ICommandManager,System.Type,System.String)">
            <summary>
            Creates a command using a naming convention with the specified gesture.
            </summary>
            <param name="commandManager">The command manager.</param>
            <param name="containerType">Type of the container.</param>
            <param name="commandNameFieldName">Name of the command name field.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandManager"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="containerType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandNameFieldName"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Services.AccelerometerService">
            <summary>
            Implementation of the <see cref="T:Catel.Services.IAccelerometerService" />.
            </summary>
        </member>
        <member name="M:Catel.Services.AccelerometerService.#ctor(Catel.Services.IDispatcherService)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.AccelerometerService"/> class.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
        </member>
        <member name="M:Catel.Services.AccelerometerService.Start">
            <summary>
            Starts the sensor service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.AccelerometerService.Stop">
            <summary>
            Stops the sensor service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="P:Catel.Services.AccelerometerService.IsSupported">
            <summary>
            Gets a value indicating whether the device supports the current sensor and thus supports getting values.
            </summary>
            <value>
            	<c>true</c> if this device supports the current sensor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.AccelerometerService.TimeBetweenUpdates">
            <summary>
            Gets or sets the preferred time between updates.
            </summary>
            <value>The preferred time between updates.</value>
        </member>
        <member name="M:Catel.Services.AccelerometerService.GetCurrentValue">
            <summary>
            Gets the current sensor value.
            </summary>
            <returns>
            The current sensor value. If no value is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="T:Catel.Services.AutoCompletionService">
            <summary>
            Service to implement auto completion features.
            </summary>
        </member>
        <member name="M:Catel.Services.AutoCompletionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.AutoCompletionService"/> class.
            </summary>
        </member>
        <member name="M:Catel.Services.AutoCompletionService.GetAutoCompleteValues(System.String,System.String,System.Collections.IEnumerable)">
            <summary>
            Gets the auto complete values.
            </summary>
            <param name="property">The property.</param>
            <param name="filter">The filter.</param>
            <param name="source">The source.</param>
            <returns>System.String[].</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Services.CameraService">
            <summary>
            Camera service.
            </summary>
        </member>
        <member name="M:Catel.Services.CameraService.GetAvailableResolutions">
            <summary>
            Gets the available resolutions.
            </summary>
            <returns>The available resolutions.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.GetFlashMode">
            <summary>
            Gets the flash mode.
            </summary>
            <returns>The flash mode.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.SetFlashMode(Catel.Services.FlashMode)">
            <summary>
            Sets the flash mode.
            </summary>
            <param name="flashMode">The flash mode.</param>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.GetCameraType">
            <summary>
            Gets the type of the camera.
            </summary>
            <returns>The camera type.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.GetIsFocusAtPointSupported">
            <summary>
            Gets a value indicating whether the camera can programmatically auto focus on a specific point in the viewfinder.
            </summary>
            <returns><c>true</c> if the camera can programmatically auto focus on a specific point in the viewfinder; otherwise, <c>false</c>.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.GetIsFocusSupported">
            <summary>
            Gets a value indicating whether the camera can be auto-focused programmatically.
            </summary>
            <returns><c>true</c> if the camera can be auto-focused programmatically; otherwise, <c>false</c>.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.GetOrientation">
            <summary>
            Gets the number of degrees that the viewfind brush needs to be rotated clockwise to align with the camera sensor.
            </summary>
            <returns>The orientation.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.GetPreviewResolution">
            <summary>
            Gets the preview resolution of the images.
            </summary>
            <returns>The preview resolution.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.GetResolution">
            <summary>
            Gets the resolution of the actual images.
            </summary>
            <returns>The resolution.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.SetResolution(Catel.Services.Size)">
            <summary>
            Sets the resolution of the actual images.
            </summary>
            <param name="resolution">The resolution.</param>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.StartService(Catel.Services.CameraType)">
            <summary>
            Starts the camera service so it's retrieving data.
            </summary>
            <param name="cameraType">Type of the camera.</param>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently not running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.StopService">
            <summary>
            Stops the camera service so it's no longer retrieving data.
            </summary>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.FocusCamera">
            <summary>
            Starts a camera auto focus operation.
            </summary>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.FocusCameraAtPoint(System.Double,System.Double)">
            <summary>
            Starts a camera auto focus operation on a specific point in the viewfinder, for those devices that support it.
            </summary>
            <param name="x">The horizontal location in the viewfinder; a value between 0 (left) and 1.0 (right).</param>
            <param name="y">The vertical location in the viewfinder; a value between 0 (top) and 1.0 (bottom).</param>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.CancelCameraFocus">
            <summary>
            Cancels the current camera auto focus operation.
            </summary>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.CaptureCameraImage">
            <summary>
            Initiates a full-resolution capture of the current image displayed in the viewfinder
            </summary>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.IsCameraTypeSupported(Catel.Services.CameraType)">
            <summary>
            Determines whether a particular camera type is supported on the device.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified camera type is supported; otherwise, <c>false</c>.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.CameraService.IsFlashModeSupportedByCamera(Catel.Services.FlashMode)">
            <summary>
            Determines whether a particular flash mode is supported on the device.
            </summary>
            <param name="mode">The mode.</param>
            <returns><c>true</c> if the specified flash mode is supported; otherwise, <c>false</c>.</returns>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.GetPreviewBufferArgb32FromCamera(System.Int32[])">
            <summary>
            Copies the current viewfinder ARGB frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The ARGB pixel data.</param>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.GetPreviewBufferYFromCamera(System.Byte[])">
            <summary>
            Copies the luminance data for the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The YCrCb pixel data.</param>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="M:Catel.Services.CameraService.GetPreviewBufferYCbCrFromCamera(System.Byte[])">
            <summary>
            Copies the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The pixel data.</param>
            <exception cref="T:Catel.MustBeImplementedException"></exception>
            <remarks>This method is already protected and only called when the service is currently running.</remarks>
        </member>
        <member name="T:Catel.Services.CameraServiceBase">
            <summary>
            Base implementation of the <see cref="T:Catel.Services.ICameraService"/>. This implementation takes care of some
            protection code to prevent double initialization or forgotten initialization.
            <para />
            This class ensures that the service is running when setting or getting cricical properties or
            calling critical methods. This might look a bit dumb in the first place, but saves the developer
            of the end-classes lots of redundant checking.
            </summary>
        </member>
        <member name="P:Catel.Services.CameraServiceBase.AvailableResolutions">
            <summary>
            Gets the available resolutions.
            </summary>
            <value>The available resolutions.</value>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetAvailableResolutions">
            <summary>
            Gets the available resolutions.
            </summary>
            <returns>The available resolutions.</returns>
        </member>
        <member name="P:Catel.Services.CameraServiceBase.FlashMode">
            <summary>
            Gets or sets the flash mode. Unsupported flash modes silently default to <see cref="F:Catel.Services.FlashMode.Off"/>.
            </summary>
            <value>The flash mode.</value>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetFlashMode">
            <summary>
            Gets the flash mode.
            </summary>
            <returns>The flash mode.</returns>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.SetFlashMode(Catel.Services.FlashMode)">
            <summary>
            Sets the flash mode.
            </summary>
            <param name="flashMode">The flash mode.</param>
        </member>
        <member name="P:Catel.Services.CameraServiceBase.CameraType">
            <summary>
            Gets the type of the camera.
            </summary>
            <value>The type of the camera.</value>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetCameraType">
            <summary>
            Gets the type of the camera.
            </summary>
            <returns>The camera type.</returns>
        </member>
        <member name="P:Catel.Services.CameraServiceBase.IsFocusAtPointSupported">
            <summary>
            Gets a value indicating whether the camera can programmatically auto focus on a specific point in the viewfinder.
            </summary>
            <value>
            	<c>true</c> if the camera can programmatically auto focus on a specific point in the viewfinder; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetIsFocusAtPointSupported">
            <summary>
            Gets a value indicating whether the camera can programmatically auto focus on a specific point in the viewfinder.
            </summary>
            <returns><c>true</c> if the camera can programmatically auto focus on a specific point in the viewfinder; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Catel.Services.CameraServiceBase.IsFocusSupported">
            <summary>
            Gets a value indicating whether the camera can be auto-focused programmatically.
            </summary>
            <value>
            	<c>true</c> if the camera can be auto-focused programmatically; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetIsFocusSupported">
            <summary>
            Gets a value indicating whether the camera can be auto-focused programmatically.
            </summary>
            <returns><c>true</c> if the camera can be auto-focused programmatically; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Catel.Services.CameraServiceBase.Orientation">
            <summary>
            Gets the number of degrees that the viewfind brush needs to be rotated clockwise to align with the camera sensor.
            </summary>
            <value>The number of degrees that the viewfinder brush needs to be rotated clockwise to align with the camera sensor.</value>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetOrientation">
            <summary>
            Gets the number of degrees that the viewfind brush needs to be rotated clockwise to align with the camera sensor.
            </summary>
            <returns>The orientation.</returns>
        </member>
        <member name="P:Catel.Services.CameraServiceBase.PreviewResolution">
            <summary>
            Gets the preview resolution of the images.
            </summary>
            <value>The preview resolution.</value>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetPreviewResolution">
            <summary>
            Gets the preview resolution of the images.
            </summary>
            <returns>The preview resolution.</returns>
        </member>
        <member name="P:Catel.Services.CameraServiceBase.Resolution">
            <summary>
            Gets or sets the resolution of the actual images.
            </summary>
            <value>The resolution.</value>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetResolution">
            <summary>
            Gets the resolution of the actual images.
            </summary>
            <returns>The resolution.</returns>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.SetResolution(Catel.Services.Size)">
            <summary>
            Sets the resolution of the actual images.
            </summary>
            <param name="resolution">The resolution.</param>
        </member>
        <member name="E:Catel.Services.CameraServiceBase.Initialized">
            <summary>
            Occurs when the camera has been initialized.
            </summary>
        </member>
        <member name="E:Catel.Services.CameraServiceBase.AutoFocusCompleted">
            <summary>
            Occurs when the focus operation is completed.
            </summary>
        </member>
        <member name="E:Catel.Services.CameraServiceBase.CaptureStarted">
            <summary>
            Occurs when the capture sequence has started.
            </summary>
        </member>
        <member name="E:Catel.Services.CameraServiceBase.CaptureThumbnailAvailable">
            <summary>
            Occurs when a thumbnail image is available.
            </summary>
        </member>
        <member name="E:Catel.Services.CameraServiceBase.CaptureImageAvailable">
            <summary>
            Occurs when an image is available.
            </summary>
        </member>
        <member name="E:Catel.Services.CameraServiceBase.CaptureCompleted">
            <summary>
            Occurs when the capture sequence is complete.
            </summary>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.EnsureServiceRunning">
            <summary>
            Ensures that the service is running. If not, this method will throw a
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The service is not running.</exception>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.Start">
            <summary>
            Starts the camera service for the primary camera so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.Start(Catel.Services.CameraType)">
            <summary>
            Starts the camera service for a specific camera type so it's retrieving data.
            </summary>
            <param name="cameraType">Type of the camera.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.StartService(Catel.Services.CameraType)">
            <summary>
            Starts the camera service so it's retrieving data.
            </summary>
            <param name="cameraType">Type of the camera.</param>
            <remarks>
            This method is already protected and only called when the service is currently not running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.Stop">
            <summary>
            Stops the camera service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.StopService">
            <summary>
            Stops the camera service so it's no longer retrieving data.
            </summary>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.Focus">
            <summary>
            Starts a camera auto focus operation.
            </summary>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.FocusCamera">
            <summary>
            Starts a camera auto focus operation.
            </summary>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.FocusAtPoint(System.Double,System.Double)">
            <summary>
            Starts a camera auto focus operation on a specific point in the viewfinder, for those devices that support it.
            </summary>
            <param name="x">The horizontal location in the viewfinder; a value between 0 (left) and 1.0 (right).</param>
            <param name="y">The vertical location in the viewfinder; a value between 0 (top) and 1.0 (bottom).</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.FocusCameraAtPoint(System.Double,System.Double)">
            <summary>
            Starts a camera auto focus operation on a specific point in the viewfinder, for those devices that support it.
            </summary>
            <param name="x">The horizontal location in the viewfinder; a value between 0 (left) and 1.0 (right).</param>
            <param name="y">The vertical location in the viewfinder; a value between 0 (top) and 1.0 (bottom).</param>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.CancelFocus">
            <summary>
            Cancels the current camera auto focus operation.
            </summary>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.CancelCameraFocus">
            <summary>
            Cancels the current camera auto focus operation.
            </summary>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.CaptureImage">
            <summary>
            Initiates a full-resolution capture of the current image displayed in the viewfinder
            </summary>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.CaptureCameraImage">
            <summary>
            Initiates a full-resolution capture of the current image displayed in the viewfinder
            </summary>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.IsCameraTypeSupported(Catel.Services.CameraType)">
            <summary>
            Determines whether a particular camera type is supported on the device.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified camera type is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.IsFlashModeSupported(Catel.Services.FlashMode)">
            <summary>
            Determines whether a particular flash mode is supported on the device.
            </summary>
            <param name="mode">The mode.</param>
            <returns>
            	<c>true</c> if the specified flash mode is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.IsFlashModeSupportedByCamera(Catel.Services.FlashMode)">
            <summary>
            Determines whether a particular flash mode is supported on the device.
            </summary>
            <param name="mode">The mode.</param>
            <returns>
            	<c>true</c> if the specified flash mode is supported; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetPreviewBufferArgb32(System.Int32[])">
            <summary>
            Copies the current viewfinder ARGB frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The ARGB pixel data.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetPreviewBufferArgb32FromCamera(System.Int32[])">
            <summary>
            Copies the current viewfinder ARGB frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The ARGB pixel data.</param>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetPreviewBufferY(System.Byte[])">
            <summary>
            Copies the luminance data for the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The YCrCb pixel data.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetPreviewBufferYFromCamera(System.Byte[])">
            <summary>
            Copies the luminance data for the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The YCrCb pixel data.</param>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetPreviewBufferYCbCr(System.Byte[])">
            <summary>
            Copies the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The pixel data.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.GetPreviewBufferYCbCrFromCamera(System.Byte[])">
            <summary>
            Copies the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The pixel data.</param>
            <remarks>
            This method is already protected and only called when the service is currently running.
            </remarks>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.RaiseInitialized(Catel.Services.CameraOperationCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Services.CameraServiceBase.Initialized"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.Services.CameraOperationCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.RaiseAutoFocusCompleted(Catel.Services.CameraOperationCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Services.CameraServiceBase.AutoFocusCompleted"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.Services.CameraOperationCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.RaiseCaptureStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Services.CameraServiceBase.CaptureStarted"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.RaiseCaptureThumbnailAvailable(Catel.Services.ContentReadyEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Services.CameraServiceBase.CaptureThumbnailAvailable"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.Services.ContentReadyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.RaiseCaptureImageAvailable(Catel.Services.ContentReadyEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Services.CameraServiceBase.CaptureImageAvailable"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.Services.ContentReadyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Services.CameraServiceBase.RaiseCaptureCompleted(Catel.Services.CameraOperationCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:Catel.Services.CameraServiceBase.CaptureCompleted"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.Services.CameraOperationCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Services.DispatcherService">
            <summary>
            Service that allows the retrieval of the UI dispatcher.
            </summary>
        </member>
        <member name="M:Catel.Services.DispatcherService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.DispatcherService"/> class.
            </summary>
        </member>
        <member name="P:Catel.Services.DispatcherService.CurrentDispatcher">
            <summary>
            Gets the current dispatcher.
            <para />
            Internally, this property uses the <see cref="T:Catel.Windows.Threading.DispatcherHelper"/>, but can be overriden if required.
            </summary>
        </member>
        <member name="M:Catel.Services.DispatcherService.Invoke(System.Action)">
            <summary>
            Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.DispatcherService.Invoke(System.Action,System.Boolean)">
            <summary>
            Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="action">The action.</param>
            <param name="onlyInvokeWhenNoAccess">If set to <c>true</c>, the action will be executed directly if possible. Otherwise, 
            <c>Dispatcher.BeginInvoke</c> will be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.DispatcherService.BeginInvoke(System.Action,System.Boolean)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="action">The action.</param>
            <param name="onlyBeginInvokeWhenNoAccess">If set to <c>true</c>, the action will be executed directly if possible. Otherwise, 
            <c>Dispatcher.BeginInvoke</c> will be used.</param>
        </member>
        <member name="T:Catel.Services.AccelerometerValueChangedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation which contains a new accelerometer value.
            </summary>
        </member>
        <member name="M:Catel.Services.AccelerometerValueChangedEventArgs.#ctor(Catel.Services.IAccelerometerValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.AccelerometerValueChangedEventArgs"/> class.
            </summary>
            <param name="newValue">The new accelerometer value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newValue"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Services.AccelerometerValueChangedEventArgs.Value">
            <summary>
            Gets the new accelerometer value.
            </summary>
            <value>The new accelerometer value.</value>
        </member>
        <member name="T:Catel.Services.ApplicationClosingEventArgs">
            <summary>
            Event args class for an event when an application gets closed.
            </summary>
        </member>
        <member name="P:Catel.Services.ApplicationClosingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the closing of the application should be canceled.
            </summary>
            <value><c>true</c> if the action should be canceled; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="T:Catel.Services.CameraOperationCompletedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> for camera operations.
            </summary>
        </member>
        <member name="M:Catel.Services.CameraOperationCompletedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.CameraOperationCompletedEventArgs"/> class.
            </summary>
            <param name="ex">The exception that occurred. If no exception has occurred, pass <c>null</c>.</param>
        </member>
        <member name="P:Catel.Services.CameraOperationCompletedEventArgs.Exception">
            <summary>
            Gets the exception that occurred if any exception occurred. If no exception occurred,
            this value is <c>null</c>.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Catel.Services.CameraOperationCompletedEventArgs.Succeeded">
            <summary>
            Gets or sets a value indicating whether the operation is succeeded.
            </summary>
            <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Services.ContentReadyEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation for camera content ready operations.
            </summary>
        </member>
        <member name="M:Catel.Services.ContentReadyEventArgs.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.ContentReadyEventArgs"/> class.
            </summary>
            <param name="imageStream">The image stream.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="imageStream"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Services.ContentReadyEventArgs.ImageStream">
            <summary>
            Gets the image stream of the image.
            </summary>
            <value>The image stream.</value>
        </member>
        <member name="T:Catel.Services.LocationChangedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation which contains a location.
            </summary>
        </member>
        <member name="M:Catel.Services.LocationChangedEventArgs.#ctor(Catel.Services.ILocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.LocationChangedEventArgs"/> class.
            </summary>
            <param name="newLocation">The new location.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newLocation"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Services.LocationChangedEventArgs.Location">
            <summary>
            Gets the new location.
            </summary>
            <value>The new location.</value>
        </member>
        <member name="T:Catel.Services.UICompletedEventArgs">
            <summary>
            This is the EventArgs return value for the IUIVisualizer.Show completed event.
            </summary>
        </member>
        <member name="M:Catel.Services.UICompletedEventArgs.#ctor(System.Object,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.UICompletedEventArgs"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:Catel.Services.UICompletedEventArgs.DataContext">
            <summary>
            Gets the data context.
            </summary>
            <value>The data context.</value>
        </member>
        <member name="P:Catel.Services.UICompletedEventArgs.Result">
            <summary>
            Gets the result of the window.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Catel.Services.PageNotRegisteredException">
            <summary>
            Exception in case a page not registered, but still being used.
            </summary>
        </member>
        <member name="M:Catel.Services.PageNotRegisteredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.PageNotRegisteredException"/> class.
            </summary>
            <param name="name">The name of the page.</param>
        </member>
        <member name="P:Catel.Services.PageNotRegisteredException.Name">
            <summary>
            Gets the name of the page.
            </summary>
            <value>The name of the page.</value>
        </member>
        <member name="T:Catel.Services.SplashScreenException">
            <summary>
            Class SplashScreenException.
            </summary>
        </member>
        <member name="M:Catel.Services.SplashScreenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.SplashScreenException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Catel.Services.SplashScreenException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.SplashScreenException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Catel.Services.WindowNotRegisteredException">
            <summary>
            Exception in case a window not registered, but still being used.
            </summary>
        </member>
        <member name="M:Catel.Services.WindowNotRegisteredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.WindowNotRegisteredException"/> class.
            </summary>
            <param name="name">The name of the window.</param>
        </member>
        <member name="P:Catel.Services.WindowNotRegisteredException.Name">
            <summary>
            Gets the name of the window.
            </summary>
            <value>The name of the window.</value>
        </member>
        <member name="T:Catel.Services.IDispatcherServiceExtensions">
            <summary>
            Extension methods for the <see cref="T:Catel.Services.IDispatcherService"/>.
            </summary>
        </member>
        <member name="M:Catel.Services.IDispatcherServiceExtensions.Invoke(Catel.Services.IDispatcherService,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IDispatcherServiceExtensions.InvokeIfRequired(Catel.Services.IDispatcherService,System.Action)">
            <summary>
            Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on if required.
            <para />
            To check whether this is necessary, it will check whether the current thread has access to the dispatcher.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IDispatcherServiceExtensions.InvokeIfRequired(Catel.Services.IDispatcherService,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on if required.
            <para />
            To check whether this is necessary, it will check whether the current thread has access to the dispatcher.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IDispatcherServiceExtensions.BeginInvoke(Catel.Services.IDispatcherService,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IDispatcherServiceExtensions.BeginInvoke(Catel.Services.IDispatcherService,System.Action)">
            <summary>
            Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IDispatcherServiceExtensions.BeginInvokeIfRequired(Catel.Services.IDispatcherService,System.Action)">
            <summary>
            Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on if required.
            <para />
            To check whether this is necessary, it will check whether the current thread has access to the dispatcher.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IDispatcherServiceExtensions.BeginInvokeIfRequired(Catel.Services.IDispatcherService,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on if required.
            <para />
            To check whether this is necessary, it will check whether the current thread has access to the dispatcher.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Services.IPleaseWaitServiceExtensions">
            <summary>
            IPleaseWaitService extensions.
            </summary>
        </member>
        <member name="M:Catel.Services.IPleaseWaitServiceExtensions.HideTemporarily(Catel.Services.IPleaseWaitService)">
            <summary>
            Hides the please wait service temporarily by storing the show counter and restoring it afterwards.
            </summary>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:Catel.Services.IPleaseWaitServiceExtensions.PushInScope(Catel.Services.IPleaseWaitService)">
            <summary>
            Calls <see cref="M:Catel.Services.IPleaseWaitService.Push(System.String)"/> and returns a disposable token. As soon as the token is disposed, it will
            call <see cref="M:Catel.Services.IPleaseWaitService.Pop"/>.
            <para />
            This is a great way to safely show a busy indicator and ensure that the indicator hides, even when an exception occurs.
            </summary>
            <param name="pleaseWaitService">The please wait service.</param>
            <returns>IDisposable.</returns>
            <example>
            <![CDATA[
            using (pleaseWaitService.PushInScope())
            {
                // some code that might throw exceptions
            }
            ]]>
            </example>
        </member>
        <member name="T:Catel.Services.FileServiceBase">
            <summary>
            Base class for file services.
            </summary>
        </member>
        <member name="M:Catel.Services.FileServiceBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.FileServiceBase"/> class.
            </summary>
        </member>
        <member name="P:Catel.Services.FileServiceBase.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.Services.FileServiceBase.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.Services.IAccelerometerService">
            <summary>
            Interface for accelerometer sensors.
            </summary>
        </member>
        <member name="T:Catel.Services.IAccelerometerValue">
            <summary>
            Value information about the accelerometer.
            </summary>
        </member>
        <member name="P:Catel.Services.IAccelerometerValue.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="P:Catel.Services.IAccelerometerValue.X">
            <summary>
            Gets the X coordinate.
            </summary>
            <value>The X coordinate.</value>
        </member>
        <member name="P:Catel.Services.IAccelerometerValue.Y">
            <summary>
            Gets the Y coordinate.
            </summary>
            <value>The Y coordinate.</value>
        </member>
        <member name="P:Catel.Services.IAccelerometerValue.Z">
            <summary>
            Gets the Z coordinate.
            </summary>
            <value>The Z coordinate.</value>
        </member>
        <member name="T:Catel.Services.IAutoCompletionService">
            <summary>
            Service to implement auto completion features.
            </summary>
        </member>
        <member name="M:Catel.Services.IAutoCompletionService.GetAutoCompleteValues(System.String,System.String,System.Collections.IEnumerable)">
            <summary>
            Gets the auto complete values.
            </summary>
            <param name="property">The property.</param>
            <param name="filter">The filter.</param>
            <param name="source">The source.</param>
            <returns>System.String[].</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Services.FlashMode">
            <summary>
            Defines the operating mode of the camera flash.
            </summary>
        </member>
        <member name="F:Catel.Services.FlashMode.On">
            <summary>
            The camera flash is enabled.
            </summary>
        </member>
        <member name="F:Catel.Services.FlashMode.Off">
            <summary>
            The camera flash is disabled.
            </summary>
        </member>
        <member name="F:Catel.Services.FlashMode.Auto">
            <summary>
            The camera flash is in auto mode.
            </summary>
        </member>
        <member name="F:Catel.Services.FlashMode.RedEyeReduction">
            <summary>
            The camera flash is in red-eye reduction mode.
            </summary>
        </member>
        <member name="T:Catel.Services.CameraType">
            <summary>
            Specifies the general location of the camera on the device.
            </summary>
        </member>
        <member name="F:Catel.Services.CameraType.Primary">
            <summary>
            The camera is located on the back of the device.
            </summary>
        </member>
        <member name="F:Catel.Services.CameraType.FrontFacing">
            <summary>
            The camera is located on the front of the device.
            </summary>
        </member>
        <member name="T:Catel.Services.ICameraService">
            <summary>
            Interface for retrieving the camera information.
            </summary>
        </member>
        <member name="P:Catel.Services.ICameraService.AvailableResolutions">
            <summary>
            Gets the available resolutions.
            </summary>
            <value>The available resolutions.</value>
        </member>
        <member name="P:Catel.Services.ICameraService.FlashMode">
            <summary>
            Gets or sets the flash mode. Unsupported flash modes silently default to <see cref="F:Catel.Services.FlashMode.Off"/>.
            </summary>
            <value>The flash mode.</value>
        </member>
        <member name="P:Catel.Services.ICameraService.CameraType">
            <summary>
            Gets the type of the camera.
            </summary>
            <value>The type of the camera.</value>
        </member>
        <member name="P:Catel.Services.ICameraService.IsFocusAtPointSupported">
            <summary>
            Gets a value indicating whether the camera can programmatically auto focus on a specific point in the viewfinder.
            </summary>
            <value>
            	<c>true</c> if the camera can programmatically auto focus on a specific point in the viewfinder; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.ICameraService.IsFocusSupported">
            <summary>
            Gets a value indicating whether the camera can be auto-focused programmatically.
            </summary>
            <value>
            	<c>true</c> if the camera can be auto-focused programmatically; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.ICameraService.Orientation">
            <summary>
            Gets the number of degrees that the viewfind brush needs to be rotated clockwise to align with the camera sensor.
            </summary>
            <value>The number of degrees that the viewfinder brush needs to be rotated clockwise to align with the camera sensor.</value>
        </member>
        <member name="P:Catel.Services.ICameraService.PreviewResolution">
            <summary>
            Gets the preview resolution of the images.
            </summary>
            <value>The preview resolution.</value>
        </member>
        <member name="P:Catel.Services.ICameraService.Resolution">
            <summary>
            Gets or sets the resolution of the actual images.
            </summary>
            <value>The resolution.</value>
        </member>
        <member name="E:Catel.Services.ICameraService.Initialized">
            <summary>
            Occurs when the camera has been initialized.
            </summary>
        </member>
        <member name="E:Catel.Services.ICameraService.AutoFocusCompleted">
            <summary>
            Occurs when the focus operation is completed.
            </summary>
        </member>
        <member name="E:Catel.Services.ICameraService.CaptureStarted">
            <summary>
            Occurs when the capture sequence has started.
            </summary>
        </member>
        <member name="E:Catel.Services.ICameraService.CaptureThumbnailAvailable">
            <summary>
            Occurs when a thumbnail image is available.
            </summary>
        </member>
        <member name="E:Catel.Services.ICameraService.CaptureImageAvailable">
            <summary>
            Occurs when an image is available.
            </summary>
        </member>
        <member name="E:Catel.Services.ICameraService.CaptureCompleted">
            <summary>
            Occurs when the capture sequence is complete.
            </summary>
        </member>
        <member name="M:Catel.Services.ICameraService.Start">
            <summary>
            Starts the camera service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.ICameraService.Start(Catel.Services.CameraType)">
            <summary>
            Starts the camera service for a specific camera type so it's retrieving data.
            </summary>
            <param name="cameraType">Type of the camera.</param>
        </member>
        <member name="M:Catel.Services.ICameraService.Stop">
            <summary>
            Stops the camera service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.ICameraService.Focus">
            <summary>
            Starts a camera auto focus operation.
            </summary>
        </member>
        <member name="M:Catel.Services.ICameraService.FocusAtPoint(System.Double,System.Double)">
            <summary>
            Starts a camera auto focus operation on a specific point in the viewfinder, for those devices that support it.
            </summary>
            <param name="x">The horizontal location in the viewfinder; a value between 0 (left) and 1.0 (right).</param>
            <param name="y">The vertical location in the viewfinder; a value between 0 (top) and 1.0 (bottom).</param>
        </member>
        <member name="M:Catel.Services.ICameraService.CancelFocus">
            <summary>
            Cancels the current camera auto focus operation.
            </summary>
        </member>
        <member name="M:Catel.Services.ICameraService.CaptureImage">
            <summary>
            Initiates a full-resolution capture of the current image displayed in the viewfinder
            </summary>
        </member>
        <member name="M:Catel.Services.ICameraService.IsCameraTypeSupported(Catel.Services.CameraType)">
            <summary>
            Determines whether a particular camera type is supported on the device.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified camera type is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.ICameraService.IsFlashModeSupported(Catel.Services.FlashMode)">
            <summary>
            Determines whether a particular flash mode is supported on the device.
            </summary>
            <param name="mode">The mode.</param>
            <returns>
            	<c>true</c> if the specified flash mode is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.ICameraService.GetPreviewBufferArgb32(System.Int32[])">
            <summary>
            Copies the current viewfinder ARGB frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The ARGB pixel data.</param>
        </member>
        <member name="M:Catel.Services.ICameraService.GetPreviewBufferY(System.Byte[])">
            <summary>
            Copies the luminance data for the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The YCrCb pixel data.</param>
        </member>
        <member name="M:Catel.Services.ICameraService.GetPreviewBufferYCbCr(System.Byte[])">
            <summary>
            Copies the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The pixel data.</param>
        </member>
        <member name="T:Catel.Services.IDispatcherService">
            <summary>
            Service that allows the retrieval of the UI dispatcher.
            </summary>
        </member>
        <member name="M:Catel.Services.IDispatcherService.Invoke(System.Action)">
            <summary>
            Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IDispatcherService.Invoke(System.Action,System.Boolean)">
            <summary>
            Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="action">The action.</param>
            <param name="onlyInvokeWhenNoAccess">If set to <c>true</c>, the action will be executed directly if possible. Otherwise, 
            <c>Dispatcher.BeginInvoke</c> will be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IDispatcherService.BeginInvoke(System.Action,System.Boolean)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="action">The action.</param>
            <param name="onlyBeginInvokeWhenNoAccess">If set to <c>true</c>, the action will be executed directly if possible. Otherwise, 
            <c>Dispatcher.BeginInvoke</c> will be used.</param>
        </member>
        <member name="T:Catel.Services.IFileSupport">
            <summary>
            Interface that supports file handling.
            </summary>
        </member>
        <member name="P:Catel.Services.IFileSupport.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.Services.IFileSupport.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.Services.ILocation">
            <summary>
            Interface that represents a location.
            </summary>
        </member>
        <member name="P:Catel.Services.ILocation.Latitude">
            <summary>
            Gets the latitude. The latitute is the angular distance of that location south or north of the equator.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Catel.Services.ILocation.Longitude">
            <summary>
            Gets the longitude. The longitude specifies the east-west position of a point on the Earth's surface.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:Catel.Services.ILocation.Altitude">
            <summary>
            Gets the altitude. The altitude is the height of the location.
            </summary>
            <value>The altitude.</value>
        </member>
        <member name="T:Catel.Services.ILocationService">
            <summary>
            Interface that supports retrieving the current location.
            </summary>
        </member>
        <member name="E:Catel.Services.ILocationService.LocationChanged">
            <summary>
            Occurs when the current location has changed.
            </summary>
        </member>
        <member name="P:Catel.Services.ILocationService.CurrentLocation">
            <summary>
            Gets the current location represented as <see cref="T:Catel.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </summary>
            <value>The current location.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.Services.ILocationService.GetCurrentLocation"/>.
            <para />
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot 
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.Services.ILocationService.LocationChanged"/> event.
            </remarks>
        </member>
        <member name="M:Catel.Services.ILocationService.GetCurrentLocation">
            <summary>
            Gets the current location.
            </summary>
            <returns>
            The current location represented as <see cref="T:Catel.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.Services.ILocationService.Start">
            <summary>
            Starts the location service so it's retrieving data.
            </summary>
            <returns><c>true</c> if the service started successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.ILocationService.Stop">
            <summary>
            Stops the location service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="T:Catel.Services.MessageBoxButton">
            <summary>
            Message box button.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxButton.OK">
            <summary>
            Displays only the OK button.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxButton.Cancel">
            <summary>
            Displays only the Cancel button.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxButton.OKCancel">
            <summary>
            Displays both the OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxButton.Yes">
            <summary>
            Displays only the OK button.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxButton.No">
            <summary>
            Displays only the Cancel button.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxButton.YesNo">
            <summary>
            Displays both the OK and Cancel buttons.
            </summary>
        </member>
        <member name="T:Catel.Services.MessageBoxResult">
            <summary>
            Represents a user's response to a message box.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxResult.None">
            <summary>
            This value is not currently used.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxResult.OK">
            <summary>
            The user clicked the OK button.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxResult.Cancel">
            <summary>
            The user clicked the Cancel button or pressed ESC.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxResult.Yes">
            <summary>
            This value is not currently used.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageBoxResult.No">
            <summary>
            This value is not currently used.
            </summary>
        </member>
        <member name="T:Catel.Services.MessageResult">
            <summary>
            Available message results.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxResult</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.Services.MessageResult.None">
            <summary>
            No result available.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageResult.OK">
            <summary>
            Message is acknowledged.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageResult.Cancel">
            <summary>
            Message is canceled.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageResult.Yes">
            <summary>
            Message is acknowledged with yes.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageResult.No">
            <summary>
            Message is acknowledged with no.
            </summary>
        </member>
        <member name="T:Catel.Services.MessageButton">
            <summary>
            Available message buttons.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxButton</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.Services.MessageButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageButton.OKCancel">
            <summary>
            OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageButton.YesNo">
            <summary>
            Yes and No buttons.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageButton.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons.
            </summary>
        </member>
        <member name="T:Catel.Services.MessageImage">
            <summary>
            Available message images.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxImage</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.Services.MessageImage.None">
            <summary>
            Show no image.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageImage.Information">
            <summary>
            Information image.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageImage.Question">
            <summary>
            Question image.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageImage.Exclamation">
            <summary>
            Exclamation image.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageImage.Error">
            <summary>
            Error image.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageImage.Stop">
            <summary>
            Stop image.
            </summary>
        </member>
        <member name="F:Catel.Services.MessageImage.Warning">
            <summary>
            Warning image.
            </summary>
        </member>
        <member name="T:Catel.Services.IMessageService">
            <summary>
            Interface for the message service.
            </summary>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowError(System.Exception)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowErrorAsync(System.Exception)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowError(System.String,System.String)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowErrorAsync(System.String,System.String)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowWarning(System.String,System.String)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowWarningAsync(System.String,System.String)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowInformation(System.String,System.String)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowInformationAsync(System.String,System.String)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.Show(System.String,System.String,Catel.Services.MessageButton,Catel.Services.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Catel.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.IMessageService.ShowAsync(System.String,System.String,Catel.Services.MessageButton,Catel.Services.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Catel.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.Services.INavigationRootService">
            <summary>
            Service to retrieve the navigation root in the application.
            </summary>
        </member>
        <member name="M:Catel.Services.INavigationRootService.GetNavigationRoot">
            <summary>
            Gets the navigation root.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Catel.Services.INavigationService">
            <summary>
            Service to navigate inside applications.
            </summary>
        </member>
        <member name="P:Catel.Services.INavigationService.CanGoBack">
            <summary>
            Gets a value indicating whether it is possible to navigate back.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.INavigationService.CanGoForward">
            <summary>
            Gets a value indicating whether it is possible to navigate forward.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate forward otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Catel.Services.INavigationService.ApplicationClosing">
            <summary>
            Occurs when the application is about to be closed.
            </summary>
        </member>
        <member name="E:Catel.Services.INavigationService.ApplicationClosed">
            <summary>
            Occurs when nothing has canceled the application closing and the application is really about to be closed. 
            </summary>
        </member>
        <member name="M:Catel.Services.INavigationService.CloseApplication">
            <summary>
            Closes the current application. The actual implementation depends on the final target framework.
            </summary>
            <returns><c>true</c> if the application is closed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.INavigationService.GoBack">
            <summary>
            Navigates back to the previous page.
            </summary>
        </member>
        <member name="M:Catel.Services.INavigationService.GoForward">
            <summary>
            Navigates forward to the next page.
            </summary>
        </member>
        <member name="M:Catel.Services.INavigationService.Navigate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="uri"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.INavigationService.Navigate``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.Services.INavigationService.Navigate(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.INavigationService.Navigate(System.Uri)">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.INavigationService.Register(System.Type,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.INavigationService.Register(System.String,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="name">The name of the registered page.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="name"/> is already registered.</exception>
        </member>
        <member name="M:Catel.Services.INavigationService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.INavigationService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered page.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.INavigationService.GetBackStackCount">
            <summary>
            Returns the number of total back entries (which is the navigation history).
            </summary>
        </member>
        <member name="M:Catel.Services.INavigationService.RemoveBackEntry">
            <summary>
            Removes the last back entry from the navigation history.
            </summary>
        </member>
        <member name="M:Catel.Services.INavigationService.RemoveAllBackEntries">
            <summary>
            Removes all the back entries from the navigation history.
            </summary>
        </member>
        <member name="T:Catel.Services.IOpenFileService">
            <summary>
            Interface for the Open File service.
            </summary>
        </member>
        <member name="P:Catel.Services.IOpenFileService.IsMultiSelect">
            <summary>
            Gets or sets a value indicating whether this instance is multi select.
            </summary>
            <value><c>true</c> if this instance is multi select; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Services.IOpenFileService.FileNames">
            <summary>
            Gets the file names in case <see cref="P:Catel.Services.IOpenFileService.IsMultiSelect"/> is <c>true</c>.
            </summary>
        </member>
        <member name="M:Catel.Services.IOpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>The <see cref="T:System.IO.Stream"/> of the file or <c>null</c> if no file was selected by the user.</returns>
            <remarks>
            If this method returns a valid <see cref="T:System.IO.Stream"/> object, the <see cref="P:Catel.Services.IOpenFileService.FileNames"/> property will be filled 
            with the safe filename. This can be used for display purposes only.
            </remarks>
        </member>
        <member name="T:Catel.Services.TombstoningMode">
            <summary>
            Available tombstoning modes.
            </summary>
        </member>
        <member name="F:Catel.Services.TombstoningMode.Auto">
            <summary>
            The view model will store and recover all values of all view model properties automatically.
            </summary>
            <remarks>
            This mode is not yet supported!
            </remarks>
        </member>
        <member name="F:Catel.Services.TombstoningMode.Manual">
            <summary>
            Tombstoning will be handled manually by the developer of the view models.
            </summary>
        </member>
        <member name="F:Catel.Services.TombstoningMode.Disabled">
            <summary>
            Tombstoning capabilities are fully disabled for the view model.
            </summary>
        </member>
        <member name="T:Catel.Services.StartupMode">
            <summary>
            Available startup modes.
            </summary>
        </member>
        <member name="F:Catel.Services.StartupMode.Activate">
            <summary>
            The app is activated again.
            </summary>
        </member>
        <member name="F:Catel.Services.StartupMode.Launch">
            <summary>
            The app is launched.
            </summary>
        </member>
        <member name="T:Catel.Services.IPhoneService">
            <summary>
            Phone service representing generic phone logic.
            </summary>
        </member>
        <member name="P:Catel.Services.IPhoneService.StartupMode">
            <summary>
            Gets the startup mode.
            </summary>
            <value>The startup mode.</value>
        </member>
        <member name="T:Catel.Services.PleaseWaitWorkDelegate">
            <summary>
            Please wait work delegate.
            </summary>
        </member>
        <member name="T:Catel.Services.IPleaseWaitService">
            <summary>
            Interface for the Please Wait service.
            </summary>
        </member>
        <member name="M:Catel.Services.IPleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.Services.IPleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.Services.IPleaseWaitService.Show(Catel.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
        </member>
        <member name="M:Catel.Services.IPleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
        </member>
        <member name="M:Catel.Services.IPleaseWaitService.UpdateStatus(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated.
            <para />
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            <para/>
            When providing the <paramref name="statusFormat"/>, it is possible to use <c>{0}</c> (represents current item) and
            <c>{1}</c> (represents total items).
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="statusFormat">The status format. Can be empty, but not <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="statusFormat"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IPleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="M:Catel.Services.IPleaseWaitService.Push(System.String)">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.Services.IPleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.Services.IPleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.Services.IPleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
            <param name="status">The status to change the text to.</param>
        </member>
        <member name="M:Catel.Services.IPleaseWaitService.Pop">
            <summary>
            Decreases the number of clients that show the please wait window. The implementing class 
            is responsible for holding a counter internally which a call to this method will decrease.
            <para />
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            increase the counter, make a call to <see cref="M:Catel.Services.IPleaseWaitService.Pop"/>.
            <para />
            A call to <see cref="M:Catel.Services.IPleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.Services.IPleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="P:Catel.Services.IPleaseWaitService.ShowCounter">
            <summary>
            Gets the show counter.
            <para />
            This property can be used to get the current show counter if the please wait window should be hidden for a moment.
            </summary>
            <value>The show counter.</value>
        </member>
        <member name="T:Catel.Services.ProcessCompletedDelegate">
            <summary>
            Delegate to invoke when a process of the <see cref="T:Catel.Services.IProcessService"/> is completed.
            </summary>
        </member>
        <member name="T:Catel.Services.IProcessService">
            <summary>
            Interface for the Process service.
            </summary>
        </member>
        <member name="M:Catel.Services.IProcessService.StartProcess(System.String,System.String,Catel.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.Services.ISaveFileService">
            <summary>
            Interface for the Save File service.
            </summary>
        </member>
        <member name="M:Catel.Services.ISaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>The <see cref="T:System.IO.Stream"/> of the file or <c>null</c> if no file was selected by the user.</returns>
            <remarks>
            If this method returns a valid <see cref="T:System.IO.Stream"/> object, the <see cref="P:Catel.Services.IFileSupport.FileName"/> property will be filled 
            with the safe filename. This can be used for display purposes only.
            </remarks>
        </member>
        <member name="T:Catel.Services.ISchedulerService">
            <summary>
            Service that allows scheduling of actions in the future.
            </summary>
        </member>
        <member name="M:Catel.Services.ISchedulerService.Schedule(System.Action,System.TimeSpan)">
            <summary>
            Schedules the specified action in a relative <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="action">The action.</param>
            <param name="timeSpan">The time span.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="timeSpan"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeSpan"/> is in the past.</exception>
        </member>
        <member name="M:Catel.Services.ISchedulerService.Schedule(System.Action,System.DateTime)">
            <summary>
            Schedules the specified action in an absolute <see cref="T:System.DateTime"/>.
            </summary>
            <param name="action">The action.</param>
            <param name="dateTime">The date time.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dateTime"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dateTime"/> is in the past.</exception>
        </member>
        <member name="T:Catel.Services.ISelectDirectoryService">
            <summary>
            Interface for the Select Directory service.
            </summary>
        </member>
        <member name="P:Catel.Services.ISelectDirectoryService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.Services.ISelectDirectoryService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.Services.ISelectDirectoryService.DirectoryName">
            <summary>
            Gets the directory name.
            </summary>
        </member>
        <member name="P:Catel.Services.ISelectDirectoryService.ShowNewFolderButton">
            <summary>
            Gets or sets a value indicating whether to show the new folder button to be able to create new folders while browsing.
            </summary>
            <value><c>true</c> if the new folder button should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Services.ISelectDirectoryService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.Services.ISelectDirectoryService.Title">
            <summary>
            Gets or sets the title which will be used for display.
            </summary>
            <value>The title.</value>
        </member>
        <member name="M:Catel.Services.ISelectDirectoryService.DetermineDirectory">
            <summary>
            Determines the name of the directory what will be used.
            </summary>
            <returns>
            <c>true</c> if a directory is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.Services.ISelectDirectoryService.DirectoryName"/> property will be filled with the directory name. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="T:Catel.Services.ISensorService`2">
            <summary>
            Interface that serves as a base interface for interfaces supported sensors (especially on Windows Phone 7).
            </summary>
            <typeparam name="TValueInterface">The type of the value interface.</typeparam>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="E:Catel.Services.ISensorService`2.CurrentValueChanged">
            <summary>
            Occurs when the current sensor value has changed.
            </summary>
        </member>
        <member name="P:Catel.Services.ISensorService`2.IsSupported">
            <summary>
            Gets a value indicating whether the device supports the current sensor and thus supports getting values.
            </summary>
            <value>
            <c>true</c> if this device supports the current sensor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.ISensorService`2.TimeBetweenUpdates">
            <summary>
            Gets or sets the preferred time between updates.
            </summary>
            <value>The preferred time between updates.</value>
        </member>
        <member name="P:Catel.Services.ISensorService`2.CurrentValue">
            <summary>
            Gets the current sensor value. If no value is available, <c>null</c> will be returned.
            </summary>
            <value>The current sensor value.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.Services.ISensorService`2.GetCurrentValue"/>.
            <para />
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot 
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.Services.ISensorService`2.CurrentValueChanged"/> event.
            </remarks>
        </member>
        <member name="M:Catel.Services.ISensorService`2.GetCurrentValue">
            <summary>
            Gets the current sensor value.
            </summary>
            <returns>
            The current sensor value. If no value is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.Services.ISensorService`2.Start">
            <summary>
            Starts the sensor service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.ISensorService`2.Stop">
            <summary>
            Stops the sensor service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="T:Catel.Services.ISplashScreenService">
            <summary>
            The splash screen service interface.
            </summary>
        </member>
        <member name="P:Catel.Services.ISplashScreenService.IsRunning">
            <summary>
            Gets a value indicating whether is running.
            </summary>
        </member>
        <member name="P:Catel.Services.ISplashScreenService.CloseViewModelOnTerminated">
            <summary>
            Gets and sets a value indicating whether the service will close the view model when done.
            </summary>
            <remarks>
            The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="M:Catel.Services.ISplashScreenService.Enqueue(Catel.MVVM.Tasks.ITask)">
            <summary>
            The enqueue.
            </summary>
            <param name="task">The task.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">If the batch is already committed and the execution is in progress or committing via async way.</exception>
        </member>
        <member name="M:Catel.Services.ISplashScreenService.CommitAsync(System.Action,System.Type)">
            <summary>
            The commit.
            </summary>
            <param name="completedCallback">The completed callback.</param>
            <param name="viewModelType">The view mode type.</param>
            <exception cref="T:System.InvalidOperationException">If the batch is already committed and the execution is in progress or committing via async way.</exception>
        </member>
        <member name="M:Catel.Services.ISplashScreenService.CommitAsync``1(System.Action,``0,System.Boolean)">
            <summary>
            The commit.
            </summary>
            <typeparam name="TViewModel">The view model type.</typeparam>
            <param name="completedCallback">The completed callback.</param>
            <param name="viewModel">The viewmodel instance.</param>
            <param name="show">
            Indicates whether the view model will be shown. If the view model is <c>null</c> then this argument will be ignored. 
            </param>
            <exception cref="T:System.InvalidOperationException">If the batch is already committed and the execution is in progress or committing via async way.</exception>
        </member>
        <member name="M:Catel.Services.ISplashScreenService.Commit(System.Type)">
            <summary>
            Execute in batch mode the enqueued tasks.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <exception cref="T:System.InvalidOperationException">If the batch is already committed and the execution is in progress or committing via async way.</exception>
        </member>
        <member name="M:Catel.Services.ISplashScreenService.Commit``1(``0,System.Boolean)">
            <summary>
            Execute in batch mode the enqueued tasks.
            </summary>
            <typeparam name="TViewModel">The view model type.</typeparam>
            <param name="viewModel">The viewmodel instance.</param>
            <param name="show">
            Indicates whether the view model will be shown. If the view model is <c>null</c> then this argument will be ignored. 
            </param>
            <exception cref="T:System.InvalidOperationException">If the batch is already committed and the execution is in progress or committing via async way.</exception>
        </member>
        <member name="T:Catel.Services.IStartUpInfoProvider">
            <summary>
            The IStartUpInfoProvider interface.
            </summary>
        </member>
        <member name="T:Catel.Services.IStateService">
            <summary>
            The state service which can store and restore states.
            </summary>
        </member>
        <member name="T:Catel.Services.IUIVisualizerService">
            <summary>
            This interface defines a UI controller which can be used to display dialogs
            in either modal or modaless form from a ViewModel.
            </summary>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <param name="throwExceptionIfExists">if set to <c>true</c>, this method will throw an exception when already registered.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name" /> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType" /> is not of the right type.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.IsRegistered(System.String)">
            <summary>
            Determines whether the specified name is registered.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name is registered; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.ShowAsync(Catel.MVVM.IViewModel,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.ShowAsync(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.ShowDialogAsync(Catel.MVVM.IViewModel,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.IUIVisualizerService.ShowDialogAsync(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.Services.IUIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="T:Catel.Services.IVibrateService">
            <summary>
            Interface defining the functionality of the vibrate service.
            </summary>
        </member>
        <member name="M:Catel.Services.IVibrateService.Start(System.TimeSpan)">
            <summary>
            Starts vibration on the device.
            </summary>
            <param name="duration">
            A TimeSpan object specifying the amount of time, in seconds, for which the phone vibrates.
            Valid times are between 0 and 5 seconds. Values greater than 5 or less than 0 will generate an exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Duration is greater than the 5 seconds or duration is negative.</exception>
        </member>
        <member name="M:Catel.Services.IVibrateService.Stop">
            <summary>
            Stops the vibration on the device.
            </summary>
        </member>
        <member name="T:Catel.Services.ExportMode">
            <summary>
            The export mode.
            </summary>
        </member>
        <member name="F:Catel.Services.ExportMode.Print">
            <summary>
            The print export mode.
            </summary>
        </member>
        <member name="F:Catel.Services.ExportMode.File">
            <summary>
            The file export mode
            </summary>
        </member>
        <member name="T:Catel.Services.IViewExportService">
            <summary>
            The ViewExportService interface.
            </summary>
        </member>
        <member name="M:Catel.Services.IViewExportService.Export(Catel.MVVM.IViewModel,Catel.Services.ExportMode,System.Double,System.Double)">
            <summary>
            Exports the view model view to the clipboard or to a print.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="exportMode">The export mode.</param>
            <param name="dpiX">The dpi X.</param>
            <param name="dpiY">The dpi Y.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel" /> is <c>null</c>.</exception>
            <remarks>If <paramref name="exportMode" /> is <see cref="F:Catel.Services.ExportMode.Print" /> then the <paramref name="dpiX" /> and <paramref name="dpiY" /> argument will be ignored.</remarks>
        </member>
        <member name="T:Catel.Services.IViewModelService">
            <summary>
            Interface to declare services in a view model.
            </summary>
        </member>
        <member name="T:Catel.Services.WrapOptions">
            <summary>
            Available wrap options.
            </summary>
        </member>
        <member name="F:Catel.Services.WrapOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:Catel.Services.WrapOptions.CreateWarningAndErrorValidatorForViewModel">
            <summary>
            Create warning and error validator for view model.
            </summary>
        </member>
        <member name="F:Catel.Services.WrapOptions.TransferStylesAndTransitionsToViewModelGrid">
            <summary>
            Transfer styles and transitions to view model grid.
            </summary>
        </member>
        <member name="T:Catel.Services.IViewModelWrapperService">
            <summary>
            The view model wrapper service which is responsible of ensuring the view model container layer.
            </summary>
        </member>
        <member name="M:Catel.Services.IViewModelWrapperService.IsWrapped(Catel.MVVM.Views.IView)">
            <summary>
            Determines whether the specified view is already wrapped.
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if the specified view is already wrapped; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.IViewModelWrapperService.Wrap(Catel.MVVM.Views.IView,System.Object,Catel.Services.WrapOptions)">
            <summary>
            Wraps the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="viewModelSource">The view model source containing the <c>ViewModel</c> property.</param>
            <param name="wrapOptions">The wrap options.</param>
            <returns>The <see cref="T:Catel.MVVM.Views.IViewModelWrapper" />.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Services.LocationService">
            <summary>
            Implementation of the <see cref="T:Catel.Services.ILocationService" />
            </summary>
        </member>
        <member name="M:Catel.Services.LocationService.#ctor(Catel.Services.IDispatcherService)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.LocationService"/> class.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
        </member>
        <member name="M:Catel.Services.LocationService.Initialize">
            <summary>
            Initializes the service.
            </summary>
        </member>
        <member name="M:Catel.Services.LocationService.GetCurrentLocation">
            <summary>
            Gets the current location.
            </summary>
            <returns>
            The current location represented as <see cref="T:Catel.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.Services.LocationService.StartSensor">
            <summary>
            Starts the sensor.
            </summary>
            <returns><c>true</c> if the service started successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.LocationService.StopSensor">
            <summary>
            Stops the location service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="T:Catel.Services.LocationServiceBase">
            <summary>
            Class to allow partial abstract methods.
            </summary>
        </member>
        <member name="M:Catel.Services.LocationServiceBase.#ctor(Catel.Services.IDispatcherService)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.LocationServiceBase"/> class.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
        </member>
        <member name="P:Catel.Services.LocationServiceBase.CurrentLocation">
            <summary>
            Gets the current location represented as <see cref="T:Catel.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </summary>
            <value>The current location.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.Services.LocationServiceBase.GetCurrentLocation"/>.
            <para/>
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.Services.LocationServiceBase.LocationChanged"/> event.
            </remarks>
        </member>
        <member name="E:Catel.Services.LocationServiceBase.LocationChanged">
            <summary>
            Occurs when the current location has changed.
            </summary>
        </member>
        <member name="M:Catel.Services.LocationServiceBase.RaiseLocationChanged">
            <summary>
            Called when the current location has changed.
            </summary>
        </member>
        <member name="M:Catel.Services.LocationServiceBase.Initialize">
            <summary>
            Initializes the service.
            </summary>
        </member>
        <member name="M:Catel.Services.LocationServiceBase.Start">
            <summary>
            Starts the location service so it's retrieving data.
            </summary>
            <returns><c>true</c> if the service started successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.LocationServiceBase.Stop">
            <summary>
            Stops the location service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.LocationServiceBase.GetCurrentLocation">
            <summary>
            Gets the current location.
            </summary>
            <returns>
            The current location represented as <see cref="T:Catel.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.Services.LocationServiceBase.StartSensor">
            <summary>
            Starts the sensor.
            </summary>
            <returns><c>true</c> if the service started successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.LocationServiceBase.StopSensor">
            <summary>
            Stops the location service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="T:Catel.Services.MessageService">
            <summary>
            Message service that implements the <see cref="T:Catel.Services.IMessageService"/>.
            </summary>
        </member>
        <member name="M:Catel.Services.MessageService.#ctor(Catel.Services.IDispatcherService)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.MessageService"/> class.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dispatcherService"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.TranslateMessageBoxResult(Catel.Services.MessageBoxResult)">
            <summary>
            Translates the message box result.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Corresponding <see cref="T:Catel.Services.MessageResult"/>.
            </returns>
        </member>
        <member name="M:Catel.Services.MessageService.TranslateMessageButton(Catel.Services.MessageButton)">
            <summary>
            Translates the message button.
            </summary>
            <param name="button">The button.</param>
            <returns>
            Corresponding <see cref="T:Catel.Services.MessageBoxButton"/>.
            </returns>
        </member>
        <member name="M:Catel.Services.MessageService.ShowError(System.Exception)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowErrorAsync(System.Exception)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowError(System.String,System.String)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowErrorAsync(System.String,System.String)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowWarning(System.String,System.String)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowWarningAsync(System.String,System.String)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowInformation(System.String,System.String)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowInformationAsync(System.String,System.String)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.Show(System.String,System.String,Catel.Services.MessageButton,Catel.Services.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Catel.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowAsync(System.String,System.String,Catel.Services.MessageButton,Catel.Services.MessageImage)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.MessageService.ShowMessageBoxAsync(System.String,System.String,Catel.Services.MessageButton,Catel.Services.MessageImage)">
            <summary>
            Shows the message box.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The message result.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.Services.AccelerometerValue">
            <summary>
            Accelerometer reading value.
            </summary>
        </member>
        <member name="M:Catel.Services.AccelerometerValue.#ctor(System.DateTimeOffset,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.AccelerometerValue"/> class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
        </member>
        <member name="P:Catel.Services.AccelerometerValue.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="P:Catel.Services.AccelerometerValue.X">
            <summary>
            Gets the X coordinate.
            </summary>
            <value>The X coordinate.</value>
        </member>
        <member name="P:Catel.Services.AccelerometerValue.Y">
            <summary>
            Gets the Y coordinate.
            </summary>
            <value>The Y coordinate.</value>
        </member>
        <member name="P:Catel.Services.AccelerometerValue.Z">
            <summary>
            Gets the Z coordinate.
            </summary>
            <value>The Z coordinate.</value>
        </member>
        <member name="T:Catel.Services.Location">
            <summary>
            Class that represents a location.
            </summary>
        </member>
        <member name="M:Catel.Services.Location.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Location"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Catel.Services.Location.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Location"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="altitude">The altitude.</param>
        </member>
        <member name="P:Catel.Services.Location.Latitude">
            <summary>
            Gets the latitude. The latitute is the angular distance of that location south or north of the equator.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Catel.Services.Location.Longitude">
            <summary>
            Gets the longitude. The longitude specifies the east-west position of a point on the Earth's surface.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:Catel.Services.Location.Altitude">
            <summary>
            Gets the altitude. The altitude is the height of the location.
            </summary>
            <value>The altitude.</value>
        </member>
        <member name="T:Catel.Services.Size">
            <summary>
            Object containing size information.
            </summary>
        </member>
        <member name="M:Catel.Services.Size.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Size"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Catel.Services.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Catel.Services.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="M:Catel.Services.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.Size.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Catel.Services.Size.Equals(Catel.Services.Size)">
            <summary>
            Determines whether the specified size equals this instance.
            </summary>
            <param name="size">The size to compare this instance to.</param>
            <returns><c>true</c> if equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.Services.Size.op_Equality(Catel.Services.Size,Catel.Services.Size)">
            <summary>
            Implements the ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Catel.Services.Size.op_Inequality(Catel.Services.Size,Catel.Services.Size)">
            <summary>
            Implements the !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Catel.Services.Size.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Catel.Services.NamingConvention">
            <summary>
            Class that is able to resolve naming conventions.
            </summary>
        </member>
        <member name="F:Catel.Services.NamingConvention.ViewModelName">
            <summary>
            The view model name constant that will be replaced by the naming convention. This constant will be
            replaced by the view model name without the "ViewModel" prefix.
            <para />
            For example, the following naming convention:
              <c>[AS].UI.Views.[VM]View</c>
            <para />
            will result in the following view for <c>ExampleViewModel</c>:
              <c>MyAssembly.UI.Views.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="F:Catel.Services.NamingConvention.ViewName">
            <summary>
            The view name constant that will be replaced by the naming convention. This constant will be
            replaced by the view name without the "View", "Window" and "Control" prefix.
            <para />
            For example, the following naming convention:
              <c>[AS].UI.Views.[VW]ViewModel</c>
            <para />
            will result in the following view model for <c>ExampleViewModel</c>:
              <c>MyAssembly.UI.Views.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="F:Catel.Services.NamingConvention.Assembly">
            <summary>
            The assembly constant that will be replaced by the naming convention. This constant will be
            replaced by the assembly name.
            <para />
            For example, the following naming convention:
              <c>[AS].UI.Views.[VM]View</c>
            <para />
            will result in the following view for <c>ExampleViewModel</c>:
              <c>MyAssembly.UI.Views.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="F:Catel.Services.NamingConvention.Up">
            <summary>
            The up constant that will be replaced by the naming convention. This constant will be
            move up one step in the type namespace tree.
            <para />
            For example, the following naming convention:
              <c>[UP].Views.[VM]View</c>
            <para />
            will result in the following view for <c>Catel.ViewModels.ExampleViewModel</c>:
              <c>Catel.Views.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="F:Catel.Services.NamingConvention.Current">
            <summary>
            The current constant that will keep the convention in the current namespace.
            <para />
            For example, the following naming convention:
              <c>[CURRENT].[VM]View</c>
            <para />
            will result in the following view for <c>Catel.ExampleViewModel</c>:
              <c>Catel.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="M:Catel.Services.NamingConvention.ResolveViewByViewModelName(System.String,System.String,System.String)">
            <summary>
            Resolves the convention by using the view model name.
            <para/>
            This method does not add assemblies or resolve types, but will only return a string containing the resolved
            value based on the convention.
            <para/>
            The following constants can be used in this method:
            * <see cref="F:Catel.Services.NamingConvention.ViewModelName"/>
            </summary>
            <param name="assembly">The assembly which is the base namespace.</param>
            <param name="fullViewModelName">Class name of the view model. This parameter must only contain the type name, not the full
            type. For example <c>ExampleViewModel</c>.</param>
            <param name="conventionToUse">The convention to use.</param>
            <returns>The resolved convention.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="assembly"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullViewModelName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="conventionToUse"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.NamingConvention.ResolveViewModelByViewName(System.String,System.String,System.String)">
            <summary>
            Resolves the convention by using the view name.
            <para/>
            This method does not add assemblies or resolve types, but will only return a string containing the resolved
            value based on the convention.
            <para/>
            The following constants can be used in this method:
            * <see cref="F:Catel.Services.NamingConvention.ViewName"/>
            </summary>
            <param name="assembly">The assembly which is the base namespace.</param>
            <param name="fullViewName">Class name of the view. This parameter must only contain the type name, not the full
            type. For example <c>ExampleView</c>.</param>
            <param name="conventionToUse">The convention to use.</param>
            <returns>The resolved convention.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="assembly"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullViewName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="conventionToUse"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.NamingConvention.ResolveNamingConvention(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Resolves the naming convention.
            </summary>
            <param name="constantsWithValues">
            The constants with values. The <c>Key</c> must be the constant as it will be used inside the convention. The
            <c>Value</c> is the value the constant must be replaced with.
            </param>
            <param name="conventionToUse">The convention to use.</param>
            <returns>The resolved convention.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="constantsWithValues"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="conventionToUse"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.NamingConvention.ResolveNamingConvention(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Resolves the naming convention.
            </summary>
            <param name="constantsWithValues">
            The constants with values. The <c>Key</c> must be the constant as it will be used inside the convention. The
            <c>Value</c> is the value the constant must be replaced with.
            </param>
            <param name="conventionToUse">The convention to use.</param>
            <param name="value">The value you try to resolve</param>
            <returns>The resolved convention.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="constantsWithValues"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="conventionToUse"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.NamingConvention.GetParentPath(System.String)">
            <summary>
            Gets the parent path with the separator of choice. For example, the following path:
            <para />
            <c>Catel.Services</c>
            <para />
            Will return the following value when using the dot (.) as separator:
            <para />
            <c>Catel.MVVM</c>
            </summary>
            <param name="path">The path.</param>
            <returns>The parent path.</returns>
            <remarks>
            This method automatically finds the parent separator by calling the <see cref="M:Catel.Services.NamingConvention.GetParentSeparator(System.String)"/> and
            then calls <see cref="M:Catel.Services.NamingConvention.GetParentPath(System.String,System.String)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="path"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.NamingConvention.GetParentPath(System.String,System.String)">
            <summary>
            Gets the parent path with the separator of choice. For example, the following path:
            <para />
            <c>Catel.Services</c>
            <para />
            Will return the following value when using the dot (.) as separator:
            <para />
            <c>Catel.MVVM</c>
            </summary>
            <param name="path">The path.</param>
            <param name="separator">The separator.</param>
            <returns>The parent path.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="path"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="separator"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.Services.NamingConvention.GetParentSeparator(System.String)">
            <summary>
            Gets the parent separator.
            <para />
            This method tries to use the following separators:
            <list type="number">
              <item><description>Backslash (\)</description></item>
              <item><description>Slash (/)</description></item>
              <item><description>Dot (.)</description></item>
              <item><description>Pipe (|)</description></item>
            </list>
            </summary>
            <param name="path">The path.</param>
            <returns>The separator or <c>null</c> if no known separator was found.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="path"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.NamingConvention.RemoveAllPostfixes(System.String,System.String[])">
            <summary>
            Removes all postfixes from the specified value.
            </summary>
            <param name="value">The value to remove the postfixes from.</param>
            <param name="postfixesToRemove">The postfixes to remove.</param>
            <returns>The value without the postfixes.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="postfixesToRemove"/> is <c>null</c> or an empty array.</exception>
        </member>
        <member name="T:Catel.Services.NavigationRootService">
            <summary>
            Service to retrieve the navigation root in the application.
            </summary>
        </member>
        <member name="M:Catel.Services.NavigationRootService.GetNavigationRoot">
            <summary>
            Gets the navigation root.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Catel.Services.NavigationRootService.GetApplicationRootFrame">
            <summary>
            Gets the application root frame.
            </summary>
        </member>
        <member name="T:Catel.Services.NavigationService">
            <summary>
            Service to navigate inside applications.
            </summary>
            <summary>
            Service to navigate inside applications.
            </summary>
        </member>
        <member name="F:Catel.Services.NavigationService.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Services.NavigationService.#ctor(Catel.Services.INavigationRootService)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.NavigationService" /> class.
            </summary>
            <param name="navigationRootService">The navigation root service.</param>
        </member>
        <member name="E:Catel.Services.NavigationService.ApplicationClosing">
            <summary>
            Occurs when the application is about to be closed.
            </summary>
        </member>
        <member name="E:Catel.Services.NavigationService.ApplicationClosed">
            <summary>
            Occurs when nothing has canceled the application closing and the application is really about to be closed.
            </summary>
        </member>
        <member name="M:Catel.Services.NavigationService.CloseApplication">
            <summary>
            Closes the current application. The actual implementation depends on the final target framework.
            </summary>
            <returns><c>true</c> if the application is closed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.NavigationService.GoBack">
            <summary>
            Navigates back to the previous page.
            </summary>
        </member>
        <member name="M:Catel.Services.NavigationService.GoForward">
            <summary>
            Navigates forward to the next page.
            </summary>
        </member>
        <member name="M:Catel.Services.NavigationService.Navigate(System.Uri)">
            <summary>
            Navigates to a specific location.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.NavigationService.Navigate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="uri"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Services.NavigationService.Navigate``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.Services.NavigationService.Navigate(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.NavigationService.Register(System.Type,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.NavigationService.Register(System.String,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="name">The name of the registered page.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="name"/> is already registered.</exception>
        </member>
        <member name="M:Catel.Services.NavigationService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            <c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.NavigationService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered page.</param>
            <returns>
            <c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Catel.Services.NavigationService.CanGoBack">
            <summary>
            Gets a value indicating whether it is possible to navigate back.
            </summary>
            <value>
            <c>true</c> if it is possible to navigate back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.NavigationService.CanGoForward">
            <summary>
            Gets a value indicating whether it is possible to navigate forward.
            </summary>
            <value>
            <c>true</c> if it is possible to navigate backforward otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Services.NavigationService.ResolveNavigationTarget(System.Type)">
            <summary>
            Resolves the navigation target.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <returns>The target to navigate to.</returns>
        </member>
        <member name="M:Catel.Services.NavigationService.GetBackStackCount">
            <summary>
            Returns the number of total back entries (which is the navigation history).
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Catel.Services.NavigationService.RemoveBackEntry">
            <summary>
            Removes the last back entry from the navigation history.
            </summary>
        </member>
        <member name="M:Catel.Services.NavigationService.RemoveAllBackEntries">
            <summary>
            Removes all the back entries from the navigation history.
            </summary>
        </member>
        <member name="T:Catel.Services.NavigationServiceBase">
            <summary>
            Abstract base class to support abstract partial methods.
            </summary>
        </member>
        <member name="P:Catel.Services.NavigationServiceBase.CanGoBack">
            <summary>
            Gets a value indicating whether it is possible to navigate back.
            </summary>
            <value>
            <c>true</c> if it is possible to navigate back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.NavigationServiceBase.CanGoForward">
            <summary>
            Gets a value indicating whether it is possible to navigate forward.
            </summary>
            <value>
            <c>true</c> if it is possible to navigate backforward otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Services.NavigationServiceBase.ResolveNavigationTarget(System.Type)">
            <summary>
            Resolves the navigation target.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <returns>The target to navigate to.</returns>
        </member>
        <member name="M:Catel.Services.NavigationServiceBase.GetBackStackCount">
            <summary>
            Returns the number of total back entries (which is the navigation history).
            </summary>
        </member>
        <member name="M:Catel.Services.NavigationServiceBase.RemoveBackEntry">
            <summary>
            Removes the last back entry from the navigation history.
            </summary>
        </member>
        <member name="M:Catel.Services.NavigationServiceBase.RemoveAllBackEntries">
            <summary>
            Removes all the back entries from the navigation history.
            </summary>
        </member>
        <member name="T:Catel.Services.PleaseWaitService">
            <summary>
            Service to show a busy indicator.
            </summary>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.#ctor(Catel.Services.ILanguageService)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.PleaseWaitService"/> class.
            </summary>
            <param name="languageService">The language service.</param>
        </member>
        <member name="P:Catel.Services.PleaseWaitService.ShowCounter">
            <summary>
            Gets the show counter.
            <para />
            This property can be used to get the current show counter if the please wait window should be hidden for a moment.
            </summary>
            <value>The show counter.</value>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.Services.IPleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.Show(Catel.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.UpdateStatus(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            <para/>
            When providing the <paramref name="statusFormat"/>, it is possible to use <c>{0}</c> (represents current item) and
            <c>{1}</c> (represents total items).
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="statusFormat">The status format. Can be empty, but not <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="statusFormat"/> is <c>null</c>.</exception>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.Push(System.String)">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.Services.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.Services.PleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.Services.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
            <param name="status">The status to change the text to.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.Pop">
            <summary>
            Decreases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will decrease.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            increase the counter, make a call to <see cref="M:Catel.Services.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.Services.PleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.Services.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Services.PleaseWaitService.ConstructorBusyIndicator">
            <summary>
            Constructors the busy indicator, which is by default the <see cref="T:Windows.UI.Xaml.Controls.ProgressBar"/>. However, it is wise
            to create a custom implementation and use the <c>PerformanceProgressBar</c> that can be found in the
            <a href="http://silverlight.codeplex.com/releases/view/75888">Windows Phone 7 toolkit</a>.
            <para />
            To create a custom implementation, create a new class based on this class and override only the
            <see cref="M:Catel.Services.PleaseWaitService.ConstructorBusyIndicator"/> method.
            </summary>
            <returns>The busy indicator which will be used by this service.</returns>
        </member>
        <member name="T:Catel.Services.SchedulerService">
            <summary>
            Service that allows scheduling of actions in the future.
            </summary>
        </member>
        <member name="M:Catel.Services.SchedulerService.Schedule(System.Action,System.TimeSpan)">
            <summary>
            Schedules the specified action in a relative <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="action">The action.</param>
            <param name="timeSpan">The time span.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="timeSpan"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeSpan"/> is in the past.</exception>
        </member>
        <member name="M:Catel.Services.SchedulerService.Schedule(System.Action,System.DateTime)">
            <summary>
            Schedules the specified action in an absolute <see cref="T:System.DateTime"/>.
            </summary>
            <param name="action">The action.</param>
            <param name="dateTime">The date time.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dateTime"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dateTime"/> is in the past.</exception>
        </member>
        <member name="T:Catel.Services.SensorServiceBase`2">
            <summary>
            Base class for implementing sensor services.
            </summary>
        </member>
        <member name="M:Catel.Services.SensorServiceBase`2.#ctor(Catel.Services.IDispatcherService)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.SensorServiceBase`2"/> class.
            </summary>
            <param name="dispatcherService">The dispatcher service.</param>
        </member>
        <member name="P:Catel.Services.SensorServiceBase`2.IsSupported">
            <summary>
            Gets a value indicating whether the device supports the current sensor and thus supports getting values.
            </summary>
            <value>
            <c>true</c> if this device supports the current sensor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.SensorServiceBase`2.TimeBetweenUpdates">
            <summary>
            Gets or sets the preferred time between updates.
            </summary>
            <value>The preferred time between updates.</value>
        </member>
        <member name="P:Catel.Services.SensorServiceBase`2.CurrentValue">
            <summary>
            Gets the current sensor value. If no value is available, <c>null</c> will be returned.
            </summary>
            <value>The current sensor value.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.Services.SensorServiceBase`2.GetCurrentValue"/>.
            <para />
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot 
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.Services.SensorServiceBase`2.CurrentValueChanged"/> event.
            </remarks>
        </member>
        <member name="E:Catel.Services.SensorServiceBase`2.CurrentValueChanged">
            <summary>
            Occurs when the current sensor value has changed.
            </summary>
        </member>
        <member name="M:Catel.Services.SensorServiceBase`2.GetCurrentValue">
            <summary>
            Gets the current sensor value.
            </summary>
            <returns>
            The current sensor value. If no value is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.Services.SensorServiceBase`2.Start">
            <summary>
            Starts the sensor service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.SensorServiceBase`2.Stop">
            <summary>
            Stops the sensor service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.SensorServiceBase`2.RaiseCurrentValueChanged(`1)">
            <summary>
            Raises the <see cref="E:Catel.Services.SensorServiceBase`2.CurrentValueChanged"/> event.
            </summary>
        </member>
        <member name="M:Catel.Services.SensorServiceBase`2.OnCurrentValueChanged(System.Object,`1)">
            <summary>
            Method to invoke the <see cref="E:Catel.Services.SensorServiceBase`2.CurrentValueChanged"/> event from derived classes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Services.StateService">
            <summary>
            The state service which can store and restore states.
            </summary>
        </member>
        <member name="T:Catel.Services.Test.AccelerometerService">
            <summary>
            Test implementation of the accelerometer service.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.AccelerometerService service = (Test.AccelerometerService)GetService<IAccelerometerService>();
            
            // Queue the next value (and then wait 5 seconds)
            var testData = new SensorTestData(new AccelerometerValue(new DateTimeOffset(DateTime.Now, new TimeSpan(200)), 1d, 2d, 3d));
            service.ExpectedValues.Add(testData);
            
            // Go to the next value manually
            service.ProceedToNextValue();
            
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Catel.Services.Test.LocationService">
            <summary>
            Test implementation of the location service.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.LocationService service = (Test.LocationService)GetService<ILocationService>();
            
            // Queue the next location (and then wait 5 seconds)
            var locationTestData = new LocationTestData(new Location(100d, 100d), new TimeSpan(0, 0, 0, 5)));
            service.ExpectedLocations.Add(locationTestData);
            
            // Go to the next location manually
            service.ProceedToNextLocation();
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Services.Test.LocationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.LocationService"/> class.
            </summary>
        </member>
        <member name="P:Catel.Services.Test.LocationService.CurrentLocation">
            <summary>
            Gets the current location represented as <see cref="T:Catel.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </summary>
            <value>The current location.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.Services.Test.LocationService.GetCurrentLocation"/>.
            <para/>
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.Services.Test.LocationService.LocationChanged"/> event.
            </remarks>
        </member>
        <member name="P:Catel.Services.Test.LocationService.ExpectedLocations">
            <summary>
            Gets the queue of expected locations.
            </summary>
            <value>The expected locations.</value>
        </member>
        <member name="E:Catel.Services.Test.LocationService.LocationChanged">
            <summary>
            Occurs when the current location has changed.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.LocationService.OnTimerTick(System.Object)">
            <summary>
            Called when the timer reaches another tick.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Catel.Services.Test.LocationService.OnLocationChanged">
            <summary>
            Called when the current location has changed.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.LocationService.GetCurrentLocation">
            <summary>
            Gets the current location.
            </summary>
            <returns>
            The current location represented as <see cref="T:Catel.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.Services.Test.LocationService.Start">
            <summary>
            Starts the location service so it's retrieving data.
            </summary>
            <returns><c>true</c> if the service started successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.Test.LocationService.Stop">
            <summary>
            Stops the location service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.LocationService.ProceedToNextLocation">
            <summary>
            Proceeds to next location.
            </summary>
        </member>
        <member name="T:Catel.Services.Test.LocationTestData">
            <summary>
            Test data which contains the location and time-out.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.LocationTestData.#ctor(Catel.Services.ILocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.LocationTestData"/> class.
            <para />
            When this constructor is used, no time-out is used and only one location will be available.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.LocationTestData.#ctor(Catel.Services.ILocation,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.LocationTestData"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="M:Catel.Services.Test.LocationTestData.#ctor(Catel.Services.ILocation,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.LocationTestData"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="P:Catel.Services.Test.LocationTestData.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Catel.Services.Test.LocationTestData.Timeout">
            <summary>
            Gets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:Catel.Services.Test.NavigationService">
            <summary>
            Test implementation of the <see cref="T:Catel.Services.INavigationService"/>.
            <para />
            This class is a dummy implementation, no actual code is used.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Services.Test.NavigationService.CanGoBack">
            <summary>
            Gets a value indicating whether it is possible to navigate back.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.Test.NavigationService.CanGoForward">
            <summary>
            Gets a value indicating whether it is possible to navigate forward.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate backforward otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Services.Test.NavigationService.LastNavigationUri">
            <summary>
            Gets the last navigation URI.
            </summary>
            <value>The last navigation URI.</value>
        </member>
        <member name="P:Catel.Services.Test.NavigationService.LastNavigationParameters">
            <summary>
            Gets the last navigation parameters.
            </summary>
            <value>The last navigation parameters.</value>
        </member>
        <member name="E:Catel.Services.Test.NavigationService.ApplicationClosing">
            <summary>
            Occurs when the application is about to be closed.
            </summary>
        </member>
        <member name="E:Catel.Services.Test.NavigationService.ApplicationClosed">
            <summary>
            Occurs when nothing has canceled the application closing and the application is really about to be closed.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.CloseApplication">
            <summary>
            Closes the current application. The actual implementation depends on the final target framework.
            </summary>
            <returns><c>true</c> if the application is closed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.GoBack">
            <summary>
            Navigates back to the previous page.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.GoForward">
            <summary>
            Navigates forward to the next page.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.Navigate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter,
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.Navigate``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter,
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.Navigate(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter,
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.Navigate(System.Uri)">
            <summary>
            Navigates to a specific location.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.Register(System.Type,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.Register(System.String,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="name">The name of the registered page.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="name"/> is already registered.</exception>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered page.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.GetBackStackCount">
            <summary>
            Returns the number of total back entries (which is the navigation history).
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.RemoveBackEntry">
            <summary>
            Removes the last back entry from the navigation history.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.RemoveAllBackEntries">
            <summary>
            Removes all the back entries from the navigation history.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.ResolveViewByNamingConventions(System.Type)">
            <summary>
            Resolves the view by naming conventions.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.ClearLastNavigationInfo">
            <summary>
            Clears the last navigation info.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.UpdateLastNavigationInfo(System.Uri)">
            <summary>
            Updates the last navigation info.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.UpdateLastNavigationInfo(System.Uri,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the last navigation info.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.UpdateLastNavigationInfo(System.String)">
            <summary>
            Updates the last navigation info.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Catel.Services.Test.NavigationService.UpdateLastNavigationInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the last navigation info.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Catel.Services.Test.OpenFileService">
            <summary>
            Test implementation of the <see cref="T:Catel.Services.IOpenFileService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.OpenFileService service = (Test.OpenFileService)GetService<IOpenFileService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(() =>
                         {
                           service.FileName = @"c:\test.txt";
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Services.Test.OpenFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.OpenFileService"/> class.
            </summary>
        </member>
        <member name="P:Catel.Services.Test.OpenFileService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.Services.Test.OpenFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.Services.Test.OpenFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.Services.Test.OpenFileService.IsMultiSelect">
            <summary>
            Gets or sets a value indicating whether this instance is multi select.
            </summary>
            <value><c>true</c> if this instance is multi select; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Services.Test.OpenFileService.FileNames">
            <summary>
            Gets the file names in case <see cref="P:Catel.Services.IOpenFileService.IsMultiSelect"/> is <c>true</c>.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.OpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
            	<c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.Services.Test.OpenFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="T:Catel.Services.Test.PleaseWaitService">
            <summary>
            Test implementation of the <see cref="T:Catel.Services.IPleaseWaitService"/>.
            </summary>
        </member>
        <member name="P:Catel.Services.Test.PleaseWaitService.ShowCounter">
            <summary>
            Gets or sets the show counter.
            </summary>
            <value>The show counter.</value>
        </member>
        <member name="M:Catel.Services.Test.PleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Services.Test.PleaseWaitService.Show(Catel.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Services.Test.PleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Services.Test.PleaseWaitService.UpdateStatus(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            <para/>
            When providing the <paramref name="statusFormat"/>, it is possible to use <c>{0}</c> (represents current item) and
            <c>{1}</c> (represents total items).
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="statusFormat">The status format. Can be empty, but not <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="statusFormat"/> is <c>null</c>.</exception>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Services.Test.PleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.PleaseWaitService.Push(System.String)">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.Services.Test.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.Services.Test.PleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.Services.Test.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
            <param name="status">The status to change the text to.</param>
        </member>
        <member name="M:Catel.Services.Test.PleaseWaitService.Pop">
            <summary>
            Decreases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will decrease.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            increase the counter, make a call to <see cref="M:Catel.Services.Test.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.Services.Test.PleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.Services.Test.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="T:Catel.Services.Test.ProcessServiceTestResult">
            <summary>
            Class representing the process result.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.ProcessServiceTestResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.ProcessServiceTestResult"/> class, with <c>0</c> as default process result code.
            </summary>
            <param name="result">if set to <c>true</c>, the process will succeed during the test.</param>
        </member>
        <member name="M:Catel.Services.Test.ProcessServiceTestResult.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.ProcessServiceTestResult"/> class.
            </summary>
            <param name="result">if set to <c>true</c>, the process will succeed during the test.</param>
            <param name="processResultCode">The process result code to return in case of a callback.</param>
        </member>
        <member name="P:Catel.Services.Test.ProcessServiceTestResult.Result">
            <summary>
            Gets or sets a value indicating whether the process should be returned as successfull when running the process.
            </summary>
            <value><c>true</c> if the process should be returned as successfull; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Services.Test.ProcessServiceTestResult.ProcessResultCode">
            <summary>
            Gets or sets the process result code.
            </summary>
            <value>The process result code.</value>
        </member>
        <member name="T:Catel.Services.Test.ProcessService">
            <summary>
            Test implementation of the <see cref="T:Catel.Services.IProcessService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.ProcessService service = (Test.ProcessService)GetService<IProcessService>();
            
            // Queue the next expected result (next StartProcess will succeed to run app, 5 will be returned as exit code)
            service.ExpectedResults.Add(new ProcessServiceTestResult(true, 5));
            
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Catel.Services.Test.ProcessService.ExpectedResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.Services.Test.ProcessService.StartProcess(System.String,System.String,Catel.Services.ProcessCompletedDelegate)"/> method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="M:Catel.Services.Test.ProcessService.StartProcess(System.String,System.String,Catel.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.Services.Test.SaveFileService">
            <summary>
            Test implementation of the <see cref="T:Catel.Services.ISaveFileService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.SaveFileService service = (Test.SaveFileService)GetService<ISaveFileService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(() =>
                         {
                           service.FileName = @"c:\test.txt";
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Services.Test.SaveFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.OpenFileService"/> class.
            </summary>
        </member>
        <member name="P:Catel.Services.Test.SaveFileService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.Services.Test.SaveFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.Services.Test.SaveFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="M:Catel.Services.Test.SaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
            	<c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.Services.Test.SaveFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="T:Catel.Services.Test.SensorServiceBase`2">
            <summary>
            Base class for implementing test versions of sensor services.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.SensorServiceBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.SensorServiceBase`2"/> class.
            </summary>
        </member>
        <member name="P:Catel.Services.Test.SensorServiceBase`2.IsSupported">
            <summary>
            Gets or sets a value indicating whether the device supports the current sensor and thus supports getting values.
            </summary>
            <value>
            	<c>true</c> if this device supports the current sensor; otherwise, <c>false</c>.
            </value>
            <remarks>
            This is a test implementation. Therefore, the <see cref="P:Catel.Services.Test.SensorServiceBase`2.IsSupported"/> value can be set as well to
            simulate whether a sensor is available or not.
            </remarks>
        </member>
        <member name="P:Catel.Services.Test.SensorServiceBase`2.TimeBetweenUpdates">
            <summary>
            Gets or sets the preferred time between updates.
            </summary>
            <value>The preferred time between updates.</value>
            <remarks>
            This property is not used in the test implementation of the services.
            </remarks>
        </member>
        <member name="P:Catel.Services.Test.SensorServiceBase`2.CurrentValue">
            <summary>
            Gets the current sensor value. If no value is available, <c>null</c> will be returned.
            </summary>
            <value>The current sensor value.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.Services.Test.SensorServiceBase`2.GetCurrentValue"/>.
            <para />
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot 
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.Services.Test.SensorServiceBase`2.CurrentValueChanged"/> event.
            </remarks>
        </member>
        <member name="P:Catel.Services.Test.SensorServiceBase`2.ExpectedValues">
            <summary>
            Gets the queue of expected values.
            </summary>
            <value>The expected values.</value>
        </member>
        <member name="E:Catel.Services.Test.SensorServiceBase`2.CurrentValueChanged">
            <summary>
            Occurs when the current sensor value has changed.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.SensorServiceBase`2.GetCurrentValue">
            <summary>
            Gets the current sensor value.
            </summary>
            <returns>
            The current sensor value. If no value is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.Services.Test.SensorServiceBase`2.Start">
            <summary>
            Starts the location service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.SensorServiceBase`2.Stop">
            <summary>
            Stops the location service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.SensorServiceBase`2.OnCurrentValueChanged(System.Object,`1)">
            <summary>
            Method to invoke the <see cref="E:Catel.Services.Test.SensorServiceBase`2.CurrentValueChanged"/> event from derived classes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Services.Test.SensorServiceBase`2.OnTimerTick(System.Object)">
            <summary>
            Called when the timer reaches another tick.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Catel.Services.Test.SensorServiceBase`2.ProceedToNextLocation">
            <summary>
            Proceeds to next location.
            </summary>
        </member>
        <member name="T:Catel.Services.Test.SensorTestData`1">
            <summary>
            Test data which contains the value and time-out.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.SensorTestData`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.SensorTestData`1"/> class.
            <para />
            When this constructor is used, no time-out is used and only one location will be available.
            </summary>
        </member>
        <member name="M:Catel.Services.Test.SensorTestData`1.#ctor(`0,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.SensorTestData`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="M:Catel.Services.Test.SensorTestData`1.#ctor(`0,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.SensorTestData`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="P:Catel.Services.Test.SensorTestData`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Catel.Services.Test.SensorTestData`1.Timeout">
            <summary>
            Gets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:Catel.Services.Test.UIVisualizerService">
            <summary>
            Test implementation of the <see cref="T:Catel.Services.IUIVisualizerService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.UIVisualizerService service = (Test.UIVisualizerService)GetService<IUIVisualizerService>();
            
            // Queue the next expected result
            service.ExpectedShowResults.Add(() =>
                         {
                           // If required, handle custom data manipulation here
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Services.Test.UIVisualizerService"/> class.
            </summary>
        </member>
        <member name="P:Catel.Services.Test.UIVisualizerService.ExpectedShowResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.Services.Test.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})"/>
            method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.Services.Test.UIVisualizerService.ExpectedShowDialogResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})"/>
            method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="windowType">Type of the window.</param>
            <param name="throwExceptionIfExists">if set to <c>true</c> [throw exception if exists].</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.ShowAsync(Catel.MVVM.IViewModel,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.ShowAsync(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.ShowDialogAsync(Catel.MVVM.IViewModel,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.ShowDialogAsync(System.String,System.Object,System.EventHandler{Catel.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.Services.Test.UIVisualizerService.Register(System.String,System.Type,System.Boolean)"/> method first.</exception>
        </member>
        <member name="M:Catel.Services.Test.UIVisualizerService.IsRegistered(System.String)">
            <summary>
            Determines whether the specified name is registered.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name is registered; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Catel.Services.VibrateService">
            <summary>
            Implementation of the <see cref="T:Catel.Services.IVibrateService"/>.
            </summary>
        </member>
        <member name="M:Catel.Services.VibrateService.#ctor">
            <summary>
            Constructs the vibrate service.
            </summary>	
        </member>
        <member name="M:Catel.Services.VibrateService.Start(System.TimeSpan)">
            <summary>
            Starts vibration on the device.
            </summary>
            <param name="duration">A TimeSpan object specifying the amount of time, in seconds, for which the phone vibrates.
            Valid times are between 0 and 5 seconds. Values greater than 5 or less than 0 will generate an exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Duration is greater than the 5 seconds or duration is negative.</exception>
        </member>
        <member name="M:Catel.Services.VibrateService.Stop">
            <summary>
            Stops the vibration on the device.
            </summary>
        </member>
        <member name="T:Catel.Services.ViewModelServiceBase">
            <summary>
            Base class for all view model services.
            </summary>
        </member>
        <member name="P:Catel.Services.ViewModelServiceBase.Dispatcher">
            <summary>
            Gets the current dispatcher.
            </summary>
            <value>The current dispatcher.</value>
        </member>
        <member name="T:Catel.Services.ViewModelWrapperService">
            <summary>
            The view model wrapper service which is responsible of ensuring the view model container layer.
            </summary>
        </member>
        <member name="M:Catel.Services.ViewModelWrapperService.IsWrapped(Catel.MVVM.Views.IView)">
            <summary>
            Determines whether the specified view is already wrapped.
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if the specified view is already wrapped; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.ViewModelWrapperService.Wrap(Catel.MVVM.Views.IView,System.Object,Catel.Services.WrapOptions)">
            <summary>
            Wraps the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="viewModelSource">The view model source containing the <c>ViewModel</c> property.</param>
            <param name="wrapOptions">The wrap options.</param>
            <returns>The <see cref="T:Catel.MVVM.Views.IViewModelWrapper" />.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="view" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Services.ViewModelWrapperService.IsViewWrapped(Catel.MVVM.Views.IView)">
            <summary>
            Determines whether the specified view is wrapped.
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if the view is wrapped; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Catel.Services.ViewModelWrapperServiceBase">
            <summary>
            Abstract class to enable partial abstract methods.
            </summary>
        </member>
        <member name="M:Catel.Services.ViewModelWrapperServiceBase.IsViewWrapped(Catel.MVVM.Views.IView)">
            <summary>
            Determines whether the specified view is wrapped.
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if the view is wrapped; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Catel.Windows.Controls.Page">
            <summary>
            <see cref="T:Catel.Windows.Controls.Page"/> class that supports MVVM with Catel.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.Page.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.Page"/> class.
            </summary>
            <remarks>It is not possible to inject view models.</remarks>
        </member>
        <member name="P:Catel.Windows.Controls.Page.ViewModelType">
            <summary>
            Gets the type of the view model that this user control uses.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.Page.PreventViewModelCreation">
            <summary>
            Gets or sets a value indicating whether the view model container should prevent the 
            creation of a view model.
            <para />
            This property is very useful when using views in transitions where the view model is no longer required.
            </summary>
            <value><c>true</c> if the view model container should prevent view model creation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Controls.Page.ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.Windows.Controls.Page.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:Windows.UI.Xaml.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.Page.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.Page.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.Page.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.Windows.Controls.Page.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.Page.Catel#MVVM#Views#IView#Loaded">
            <summary>
            Occurs when the view is loaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.Page.Catel#MVVM#Views#IView#Unloaded">
            <summary>
            Occurs when the view is unloaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.Page.Catel#MVVM#Views#IView#DataContextChanged">
            <summary>
            Occurs when the data context has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnLoaded(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the page is loaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnUnloaded(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the page is unloaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a dependency property on this control has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current <see cref="P:Catel.Windows.Controls.Page.ViewModel"/> has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.Page.ViewModel"/> has changed.
            </summary>
            <remarks>
            This method does not implement any logic and saves a developer from subscribing/unsubscribing
            to the <see cref="E:Catel.Windows.Controls.Page.ViewModelChanged"/> event inside the same user control.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Controls.UserControl">
            <summary>
            <see cref="T:Catel.Windows.Controls.UserControl"/> that supports MVVM by using a <see cref="T:Catel.MVVM.IViewModel"/> typed parameter.
            If the user control is not constructed with the right view model by the developer, it will try to create
            the view model itself. It does this by keeping an eye on the <c>DataContext</c> property. If
            the property changes, the control will check the type of the DataContext and try to create the view model by using
            the DataContext value as the constructor. If the view model can be constructed, the DataContext of the UserControl will
            be replaced by the view model.
            </summary>
            <remarks>
            This control suffers a lot from the bugs, or features "by design" as Microsoft likes to call it, of WPF. Below are the most 
            common issues that this control suffers from:
            <list type="number">
              <item>
                <description>WPF sometimes invokes the Loaded multiple times, without invoking Unloaded.</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl"/> class.
            </summary>
            <remarks>
            This method is required for design time support.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.ViewModelType">
            <summary>
            Gets the type of the view model that this user control uses.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.PreventViewModelCreation">
            <summary>
            Gets or sets a value indicating whether the view model container should prevent the 
            creation of a view model.
            <para />
            This property is very useful when using views in transitions where the view model is no longer required.
            </summary>
            <value><c>true</c> if the view model container should prevent view model creation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            <c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:Windows.UI.Xaml.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para />
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            <c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.DefaultSupportParentViewModelContainersValue">
            <summary>
            Gets or sets a value for the <see cref="P:Catel.Windows.Controls.UserControl.SupportParentViewModelContainers"/> property. This way, the behavior
            can be changed an entire application to prevent disabling it on every control.
            <para />
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.UnloadBehavior">
            <summary>
            Gets or sets the unload behavior when the data context of the target control changes.
            </summary>
            <value>The unload behavior.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.DefaultUnloadBehaviorValue">
            <summary>
            Gets or sets the default value for the <see cref="P:Catel.Windows.Controls.UserControl.UnloadBehavior"/> property.
            <para />
            The default value is <see cref="F:Catel.MVVM.Providers.UnloadBehavior.SaveAndCloseViewModel"/>.
            </summary>
            <value>The unload behavior.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.TransferStylesAndTransitionsToViewModelGrid">
            <summary>
            Gets or sets a value indicating whether the styles and transitions from the content of the target control
            should be transfered to the view model grid which is created dynamically,.
            <para />
            The transfer is required to enable visual state transitions on root elements (which is replaced by this logic implementation).
            <para />
            The default value is <c>true</c>/
            </summary>
            <value><c>true</c> if the styles and transitions should be transfered to the view model grid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.DefaultTransferStylesAndTransitionsToViewModelGridValue">
            <summary>
            Gets or sets a value for the <see cref="P:Catel.Windows.Controls.UserControl.TransferStylesAndTransitionsToViewModelGrid"/> property. This way, the behavior
            can be changed an entire application to prevent disabling it on every control.
            <para />
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            <c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.IsLoaded">
            <summary>
            Gets a value indicating whether this instance is loaded.
            </summary>
            <value><c>true</c> if this instance is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:Windows.UI.Xaml.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.Catel#MVVM#Views#IView#Loaded">
            <summary>
            Occurs when the view is loaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.Catel#MVVM#Views#IView#Unloaded">
            <summary>
            Occurs when the view is unloaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.Catel#MVVM#Views#IView#DataContextChanged">
            <summary>
            Occurs when the data context has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has changed.
            </summary>
            <remarks>
            This method does not implement any logic and saves a developer from subscribing/unsubscribing
            to the <see cref="E:Catel.Windows.Controls.UserControl.ViewModelChanged"/> event inside the same user control.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnViewModelClosedAsync(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnLoaded(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the user control is loaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnUnloaded(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the user control is unloaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a dependency property on this control has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationResult">
            <summary>
            Dummy class to allow code sharing between WPF and Silverlight.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationResult"/> class.
            </summary>
            <remarks>
            This constructor is internal to make this object inaccessible to the outside assemblies.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationResult.ErrorContent">
            <summary>
            Gets or sets the content of the error.
            </summary>
            <value>The content of the error.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validation result is valid.
            </summary>
            <value><c>true</c> if the validation result is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationRule">
            <summary>
            Dummy class to allow code sharing between WPF and Silverlight.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationRule"/> class.
            </summary>
            <remarks>
            This constructor is internal to make this object inaccessible to the outside assemblies.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationType">
            <summary>
            Business validation type.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationType.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationEventAction">
            <summary>
            Validation event action.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Added">
            <summary>
            Added.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Removed">
            <summary>
            Removed.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Refresh">
            <summary>
            Refresh the validation, don't add or remove.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.ClearAll">
            <summary>
            All validation info of the specified object should be cleared.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.WarningAndErrorValidator">
            <summary>
            Control for adding business rule validation to the form. Assign a value or binding to source for the business object or 
            collection of business objects to validate.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.WarningAndErrorValidator._objectValidation">
            <summary>
            List of objects that are currently being validated. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.WarningAndErrorValidator.Source">
            <summary>
            Source for validation. This can be an business object which implements <see cref="T:System.ComponentModel.IDataErrorInfo"/> 
            and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> or an <see cref="T:System.Collections.IEnumerable"/> containing bussiness objects.
            In case of a <see cref="T:System.Collections.IEnumerable"/> then the content should be static or the interface <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <remarks>
            Wrapper for the Source dependency property.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.WarningAndErrorValidator.SourceProperty">
            <summary>
            DependencyProperty definition as the backing store for Source.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.WarningAndErrorValidator.UniqueIdentifier">
            <summary>
            Gets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="E:Catel.Windows.Controls.WarningAndErrorValidator.Validation">
            <summary>
            Occurs when validation is triggered.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.OnLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.OnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.Initialize">
            <summary>
            Initializes this instance. Loads all the errors and warnings that were added when the control was not yet loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CleanUp">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.UpdateSource(System.Object,System.Object)">
            <summary>
            Updates the source.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectsToWatchList(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Adds an <see cref="T:System.Collections.IEnumerable"/> of objects to the watch list.
            </summary>
            <param name="values">The values to add to the watch list.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectToWatchList(System.Object,System.Collections.IEnumerable)">
            <summary>
            Adds the object to the watch list.
            </summary>
            <param name="value">The object to add to the watch list.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RemoveObjectsFromWatchList(System.Collections.IEnumerable)">
            <summary>
            Removes an <see cref="T:System.Collections.IEnumerable"/> of objects from the watch list.
            </summary>
            <param name="values">The values to remove from the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RemoveObjectFromWatchList(System.Object)">
            <summary>
            Removes the object from watch list.
            </summary>
            <param name="value">The object to remove from the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckObjectValidation(System.Object,System.String,System.Collections.IEnumerable)">
            <summary>
            Checks a entity that either implements the <see cref="T:System.ComponentModel.IDataWarningInfo"/> or <see cref="T:System.ComponentModel.IDataErrorInfo"/> on warnings and errors.
            </summary>
            <param name="value">The object to check.</param>
            <param name="propertyChanged">The propery that has been changed. <c>null</c> if no specific property has changed.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
            <remarks>
            Internally calls the generic method with the same name.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckObjectValidationForFields(System.Object,System.String,System.Collections.ObjectModel.ObservableCollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Checks the object validation for fields warnings or errors.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyChanged">The property changed.</param>
            <param name="infoList">The info list containing the warning or error info.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckFieldWarningsOrErrors(System.Object,System.String,Catel.Windows.Controls.ValidationType)">
            <summary>
            Checks the field warnings or errors.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyChanged">The property changed.</param>
            <param name="validationType">Type of the validation.</param>
            <returns>
            List of warnings or errors returned by the object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.GetWarningOrError(System.Object,Catel.Windows.Controls.ValidationType)">
            <summary>
            Gets the warning or error message for the object.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>
            Warning or error message formatted for the object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForAllErrorsAndWarnings">
            <summary>
            Raises the events for all errors and warnings.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferences(System.Object,Catel.Windows.Controls.ValidationData,Catel.Windows.Controls.ValidationData)">
            <summary>
            Raises the events for differences.
            </summary>
            <param name="value">The value.</param>
            <param name="oldValidationData">The old validation data.</param>
            <param name="newValidationData">The new validation data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferencesInFields(System.Object,System.Collections.Generic.ICollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},System.Collections.Generic.ICollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises the events for differences in fields.
            </summary>
            <param name="value">The value.</param>
            <param name="oldFieldData">The old field data.</param>
            <param name="newFieldData">The new field data.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferencesInBusiness(System.Object,System.Collections.Generic.ICollection{Catel.Windows.Controls.BusinessWarningOrErrorInfo},System.Collections.Generic.ICollection{Catel.Windows.Controls.BusinessWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises the events for differences in business.
            </summary>
            <param name="value">The value.</param>
            <param name="oldBusinessData">The old business data.</param>
            <param name="newBusinessData">The new business data.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseBusinessValidationWarningOrError(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises an validation warning or error event.
            </summary>
            <param name="value">The value.</param>
            <param name="message">A message.</param>
            <param name="action">A action for handling the error event.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.iNotifyPropertyChanged_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handling changes of properties within entity.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.iNotifyCollectionChanged_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handling change of collection updating connections and error messages.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationData">
            <summary>
            Class containing all validation info (thus warnings and errors) about a specific object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationData"/> class.
            </summary>
            <param name="parentEnumerable">The parent ParentEnumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.ParentEnumerable">
            <summary>
            Gets or sets the parent enumerable.
            </summary>
            <value>The parent enumerable.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.FieldWarnings">
            <summary>
            Gets the field warnings.
            </summary>
            <value>The field warnings.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.BusinessWarnings">
            <summary>
            Gets the business warnings.
            </summary>
            <value>The business warnings.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.FieldErrors">
            <summary>
            Gets the field errors.
            </summary>
            <value>The field errors.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.BusinessErrors">
            <summary>
            Gets the business errors.
            </summary>
            <value>The business errors.</value>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.ClearWarningsAndErrors">
            <summary>
            Clears the warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.BusinessWarningOrErrorInfo">
            <summary>
            Information class about business warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.BusinessWarningOrErrorInfo"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Catel.Windows.Controls.BusinessWarningOrErrorInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.FieldWarningOrErrorInfo">
            <summary>
            Information class about field warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.FieldWarningOrErrorInfo"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Catel.Windows.Controls.FieldWarningOrErrorInfo.Field">
            <summary>
            Gets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Catel.Windows.Controls.FieldWarningOrErrorInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationEventArgs">
            <summary>
            Event arguments for event <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> Validation.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationEventArgs.#ctor(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationEventArgs"/> class.
            </summary>
            <param name="value">The value that contains the warning or error.</param>
            <param name="message">The actual warning or error message.</param>
            <param name="action">The action of the validation event.</param>
            <param name="type">The type of validation.</param>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Value">
            <summary>
            Gets the value that contains the warning or error.
            </summary>
            <value>The value that contains the warning or error.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Message">
            <summary>
            Gets the actual warning or error message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Action">
            <summary>
            A action for handling event.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Type">
            <summary>
            Gets the type of the validation.
            </summary>
            <value>The type of the validation.</value>
        </member>
        <member name="T:Catel.Windows.Data.BindingEvaluator">
            <summary>
            Class to help evaluate bindings at runtime.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.BindingEvaluator.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.BindingEvaluator"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="P:Catel.Windows.Data.BindingEvaluator.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs">
            <summary>
            Provides data for a <see cref="T:Catel.Windows.Data.DependencyPropertyChangedHelper"/> implementation.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.#ctor(System.String,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="e">The <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="e"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.#ctor(System.String,Windows.UI.Xaml.DependencyProperty,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="dependencyProperty">Dependency property.</param>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.FxEventArgs">
            <summary>
            Gets the framework event args.
            </summary>
            <value>The framework event args.</value>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.DependencyProperty">
            <summary>
            Gets the dependency property that has changed.
            </summary>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.OldValue">
            <summary>
             Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.NewValue">
            <summary>
            Gets the value of the property after the change.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.BindingHelper">
            <summary>
            Binding helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.BindingHelper.GetBindingValue(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Data.BindingBase)">
            <summary>
            Gets the binding value.
            </summary>
            <param name="frameworkElement">The dependency object.</param>
            <param name="binding">The binding.</param>
            <returns>The actual binding value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.BindingHelper.ClearBinding(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Clears a binding. This method implements the ClearBinding for both WPF and Silverlight.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyProperty">The dependency property.</param>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyChangedHelper">
            <summary>
            Dependency property changed helper. This helper class allows to subscribe to any dependency property
            changed of any framework element element.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyChangedHelper._dependencyProperties">
            <summary>
            Cache containing already registered dependency properties.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyChangedHelper._wrapperDependencyProperties">
            <summary>
            Dictionary containing a dependency to real dependency name mapping.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyChangedHelper._realDependencyPropertiesCache">
            <summary>
            Dictionary containing values whether a property is a real dependency property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.IsRealDependencyProperty(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Determines whether the specified dependency property is a real dependency or a wrapper or handler one for internal usage.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the property is a real dependency property; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.SubscribeToAllDependencyProperties(Windows.UI.Xaml.FrameworkElement,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Subscribes to all dependency properties of the specified <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="handler">The handler to subscribe.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.SubscribeToDataContext(Windows.UI.Xaml.FrameworkElement,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs},System.Boolean)">
            <summary>
            Subscribes to the change events of the inherited DataContext.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="handler">The handler to subscribe.</param>
            <param name="inherited">if set to <c>true</c>, check inherited data context as well.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.UnsubscribeFromAllDependencyProperties(Windows.UI.Xaml.FrameworkElement,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Unsubscribes from all dependency properties of the specified <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="handler">The handler to unsubscribe.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.UnsubscribeFromDataContext(Windows.UI.Xaml.FrameworkElement,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs},System.Boolean)">
            <summary>
            Unsubscribes from the change events of the inherited DataContext.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="handler">The handler to subscribe.</param>
            <param name="inherited">if set to <c>true</c>, check inherited data context as well.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.SubscribeToDependencyProperty(Windows.UI.Xaml.FrameworkElement,System.String,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Subscribes to the specified dependency property of the specified <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">The name of the dependency property to subscribe to.</param>
            <param name="handler">The handler to subscribe.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.UnsubscribeFromDependencyProperty(Windows.UI.Xaml.FrameworkElement,System.String,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Subscribes from the specified dependency property of the specified <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">The name of the dependency property to unsubscribe from.</param>
            <param name="handler">The handler to unsubscribe.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.OnDependencyPropertyChanged(System.Object,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a dependency property has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.GetDependencyProperty``1(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Gets the dependency property from the cache. If it does not yet exist, it will create the dependency property and
            add it to the cache.
            </summary>
            <typeparam name="T">The type of the dependency property.</typeparam>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The dependency property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.GetHandlerDependencyPropertyName(System.String)">
            <summary>
            Gets the name of the handler dependency property.
            </summary>
            <param name="propertyName">Name of the property.</param>`
            <returns>The name of the dependency property containing the changed handler for the actual dependency property.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyHelper">
            <summary>
            Helper class for dependency properties.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyHelper._cacheByParentType">
            <summary>
            Cache containing all dependency properties of a specific type.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyHelper._cacheByPropertyName">
            <summary>
            Cache containing a dependency property based on the type + propertyname, where the key is generated using the
            <see cref="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyCacheKey(System.Type,System.String)"/> method.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyHelper._cacheByDependencyProperty">
            <summary>
            Cache containing the names of all found dependency properties, required because it is not possible to get the name of a 
            dependency property in Silverlight and Windows Phone.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyHelper._cacheKeyCache">
            <summary>
            The cache for the cache keys.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyProperties(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets all dependency properties of the specified <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <returns>List containing all dependency properties of the specified <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyProperties(System.Type)">
            <summary>
            Gets all dependency properties of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="viewType">The view type.</param>
            <returns>List containing all dependency properties of the specified <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyByName(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Gets a the dependency property of a specific <see cref="T:Windows.UI.Xaml.FrameworkElement"/> by its name.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Windows.UI.Xaml.DependencyProperty"/> or <c>null</c> if the property cannot be found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyName(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Gets the name of the specified dependency property.
            </summary>
            <param name="frameworkElement">The framework element containing the dependency property.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <returns>The name of the dependency property or <c>null</c> if the name could not be found.</returns>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyCacheKeyPrefix(System.Type)">
            <summary>
            Gets the dependency property cache key prefix.
            </summary>
            <param name="viewType">The view type.</param>
            <returns>The dependency property cache key prefix based on the framework element..</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyCacheKey(System.Type,System.String)">
            <summary>
            Gets the dependency property key for the cache.
            </summary>
            <param name="viewType">The view type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The key to use in the cache.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.EnsureItemInCache(System.Type)">
            <summary>
            Ensures that the dependency properties of the specified <see cref="T:Windows.UI.Xaml.FrameworkElement"/> are in the cache.
            </summary>
            <param name="viewType">The view type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyInfo">
            <summary>
            Information about a dependency property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyInfo.#ctor(Windows.UI.Xaml.DependencyProperty,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.DependencyPropertyInfo"/> class.
            </summary>
            <param name="dependencyProperty">The dependency property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyProperty"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyInfo.DependencyProperty">
            <summary>
            Gets the dependency property.
            </summary>
            <value>The dependency property.</value>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyInfo.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:Catel.Windows.DependencyObjectExtensions">
            <summary>
            Extension methods for the <see cref="T:Windows.UI.Xaml.DependencyObject"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetAncestorObject``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the ancestory object of a <see cref="T:Windows.UI.Xaml.DependencyObject"/>.
            </summary>
            <typeparam name="T">Ancestor object.</typeparam>
            <param name="visualObject">Visual object to get the ancestor object for.</param>
            <returns><see cref="T:Windows.UI.Xaml.DependencyObject"/> or null if no ancestor object is found.</returns>
            <remarks>
            	If visualObject was of type T it was returned as ancestor, this is changed.
            	GetAncestorObject wil not return supplied parameter anymore.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalOrVisualAncestor(Windows.UI.Xaml.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the logical or visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalOrVisualAncestorByType``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Finds the logical or visual ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestor(Windows.UI.Xaml.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the logical ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestorByType``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Finds the logical ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalRoot(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Finds the logical root.
            </summary>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetLogicalParent(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the logical parent of the specified dependency object.
            </summary>
            <param name="element">The element to retrieve the parent from.</param>
            <returns>The parent or <c>null</c> if the parent could not be found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetVisualParent(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the logical parent of the specified dependency object.
            </summary>
            <param name="element">The element to retrieve the parent from.</param>
            <returns>The parent or <c>null</c> if the parent could not be found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestor(Windows.UI.Xaml.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestorByType``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Finds the visual ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendant(Windows.UI.Xaml.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the visual descendant.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendantByName(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Finds the visual descendant by name.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="name">The name of the element to search for.</param>
            <returns>object or <c>null</c> if the descendant is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendantByType``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Finds the visual descendant by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the descendant is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualRoot(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Finds the visual root.
            </summary>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetVisualChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the visual children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> of all children.
            </returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalNode(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Finds a logical node in the tree of the specified <see cref="T:Windows.UI.Xaml.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="name">The name of the control to find.</param>
            <returns>Child as <see cref="T:Windows.UI.Xaml.DependencyObject"/> or <c>null</c> if the child cannot be found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyObject"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.IsElementWithName(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Determines whether the specified <see cref="T:Windows.UI.Xaml.DependencyObject"/> has the specified name.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="name">The name that the name of the <see cref="T:Windows.UI.Xaml.DependencyObject"/> should match.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Windows.UI.Xaml.DependencyObject"/> has the specified name; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyObject"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.Windows.FrameworkElementExtensions">
            <summary>
            Extensions for <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <summary>
            Extensions for <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.FrameworkElementExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.TransferStylesAndTransitions(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Transfers the styles and transitions from two framework elements.
            </summary>
            <param name="oldElement">The old element.</param>
            <param name="newElement">The new element.</param>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.HideValidationAdorner(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Hides the validation adorner.
            </summary>
            <param name="frameworkElement">The framework element.</param>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.FixBlurriness(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Fixes the blurriness in WPF by setting both <c>SnapsToDevicePixels</c> and
            <c>UseLayoutRounding</c> to <c>true</c>.
            </summary>
            <param name="element">The UI element.</param>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.IsVisible(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Determines whether the specified element is visible.
            </summary>
            <param name="element">The element.</param>
            <returns><c>true</c> if the specified element is visible; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.IsVisibleToUser(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Determines whether the framework element is currently visible to the user.
            </summary>
            <returns><c>true</c> if the framework element is currently visible to the user; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.IsVisibleToUser(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Determines whether the specified element is currently visible to the user.
            </summary>
            <param name="element">The element.</param>
            <param name="container">The container.</param>
            <returns><c>true</c> if if the specified element is currently visible to the user; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetRelevantParent``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the relevant parent.
            </summary>
            <typeparam name="T">Type of the relevant parent</typeparam>
            <param name="obj">The object.</param>
            <returns>The relevant parent.</returns>
        </member>
        <member name="T:Catel.Windows.CommandLineHelper">
            <summary>
            The command line helper
            </summary>
        </member>
        <member name="M:Catel.Windows.CommandLineHelper.Parse(System.String)">
            <summary>
            Parse a command line arguments.
            </summary>
            <param name="arguments">A command line like argument string</param>
            <returns>An array of string</returns>
        </member>
        <member name="T:Catel.Windows.DataContextChangedHelper">
            <summary>
            Helper class to subscribe to the <c>DataContextChanged</c> event of UI elements.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataContextChangedHelper.AddDataContextChangedHandler(Windows.UI.Xaml.FrameworkElement,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Adds the data context changed handler.
            </summary>
            <param name="element">Element to which the handler is added.</param>
            <param name="handler">The handler to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.DataContextChangedHelper.RemoveDataContextChangedHandler(Windows.UI.Xaml.FrameworkElement,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Removes the data context changed handler.
            </summary>
            <param name="element">The element from which the handler has to be removed.</param>
            <param name="handler">The handler to remove.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.EffectsHelper">
            <summary>
            Helper class for special window or framework effects.
            </summary>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.EffectsHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Dimm(Windows.UI.Xaml.FrameworkElement,System.Action)">
            <summary>
            Dimms the specified framework element and sets the <see cref="P:Windows.UI.Xaml.UIElement.IsHitTestVisible"/> to <c>false</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Undimm(Windows.UI.Xaml.FrameworkElement,System.Action)">
            <summary>
            Undimms the specified framework element and sets the <see cref="P:Windows.UI.Xaml.UIElement.IsHitTestVisible"/> to <c>true</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.RunStoryboardWithCallback(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Animation.Storyboard,System.Action)">
            <summary>
            Runs the storyboard with the completed callback.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="storyboardToRun">The storyboard to run.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="storyboardToRun"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.ResourceHelper">
            <summary>
            Resource helper class.
            </summary>
        </member>
        <member name="F:Catel.Windows.ResourceHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.ResourceHelper.EnsurePackUriIsAllowed">
            <summary>
            Ensures that the pack URI is allowed. Sometimes, when no application object is instantiated
            yet, the pack URI is not allowed. This method takes care of that.
            </summary>
        </member>
        <member name="M:Catel.Windows.ResourceHelper.GetResourceUri(System.String,System.String)">
            <summary>
            Gets the resource URI for the specified resource and assembly name. The uri will
            be created like the following examples:
            <list type="bullet">
              <item>
                <description>pack://application:,,,/[RESOURCEURI]</description>
              </item>
              <item>
                <description>pack://application:,,,/[ASSEMBLY];component/[RESOURCEURI]</description>
              </item>
            </list>
            </summary>
            <param name="resourceUri">The resource URI.</param>
            <param name="shortAssemblyName">Name of the assembly. If <c>null</c> or empty, the current application will be used.
            If used, this must be the short name of the assembly.</param>
            <returns>The resource uri.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="resourceUri"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.ResourceHelper.XamlPageExists(System.String)">
            <summary>
            Determines whether the specified uri is pointing to a valid xaml file.
            </summary>
            <returns><c>true</c> if the specified uri is pointing to a valid xaml file; otherwise <c>false</c>.</returns>
            <remarks>
            Note that the <paramref name="uriString"/> must be a valid resource URI. The <see cref="M:Catel.Windows.ResourceHelper.GetResourceUri(System.String,System.String)"/> can be used to
            easily create a resource URI.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="uriString"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.ResourceHelper.XamlPageExists(System.Uri)">
            <summary>
            Determines whether the specified uri is pointing to a valid xaml file.
            </summary>
            <returns><c>true</c> if the specified uri is pointing to a valid xaml file; otherwise <c>false</c>.</returns>
            <remarks>
            Note that the <paramref name="uri"/> must be a valid resource URI. The <see cref="M:Catel.Windows.ResourceHelper.GetResourceUri(System.String,System.String)"/> can be used to
            easily create a resource URI.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Input.InputGestureExtensions">
            <summary>
            Extension methods for the <see cref="T:Catel.Windows.Input.InputGesture"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.InputGestureExtensions.IsEmpty(Catel.Windows.Input.InputGesture)">
            <summary>
            Determines whether the specified input gesture is empty.
            </summary>
            <param name="inputGesture">The input gesture.</param>
            <returns><c>true</c> if the specified input gesture is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Catel.Windows.Input.KeyboardHelper">
            <summary>
            Helper class for the keyboard.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.KeyboardHelper.AreKeyboardModifiersPressed(Windows.System.VirtualKeyModifiers,System.Boolean)">
            <summary>
            Determines whether the specified keyboard modifiers are currently pressed.
            </summary>
            <param name="modifier">One or more keyboard modifiers.</param>
            <param name="checkForExactModifiers">if set to <c>true</c>, this check requires the exact modifiers to be pressed.</param>
            <returns><c>true</c> if all the specified keyboard modifiers are being pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Input.KeyboardHelper.GetCurrentlyPressedModifiers">
            <summary>
            Gets the currently pressed modifiers.
            </summary>
            <returns>List of currently pressed modifiers.</returns>
        </member>
        <member name="T:Catel.Windows.Input.InputGesture">
            <summary>
            Input gesture class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.InputGesture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Input.InputGesture"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.InputGesture.#ctor(Windows.System.VirtualKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Input.InputGesture" /> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Catel.Windows.Input.InputGesture.#ctor(Windows.System.VirtualKey,Windows.System.VirtualKeyModifiers)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Input.InputGesture" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The modifiers.</param>
        </member>
        <member name="P:Catel.Windows.Input.InputGesture.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="F:Catel.Windows.Input.InputGesture.KeyProperty">
            <summary>
            Register the Key property so it is known in the class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.InputGesture.Modifiers">
            <summary>
            Gets the modifiers.
            </summary>
        </member>
        <member name="F:Catel.Windows.Input.InputGesture.ModifiersProperty">
            <summary>
            Register the Modifiers property so it is known in the class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.InputGesture.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Input.InputGesture.Equals(Catel.Windows.Input.InputGesture)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Catel.Windows.Input.InputGesture.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Catel.Windows.Input.InputGesture.Matches(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Checks whether this input gesture matches the specified event args.
            </summary>
            <param name="eventArgs">The <see cref="T:Windows.UI.Xaml.Input.KeyRoutedEventArgs"/> instance containing the event data.</param>
            <returns><c>true</c> if this gesture matches the event args, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Catel.Windows.Input.InputGesture.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Catel.Windows.Interactivity.AuthenticationAction">
            <summary>
            The available actions to perform when a user is not able to view a specific UI element.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.AuthenticationAction.Collapse">
            <summary>
            Collapses the associated control.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.AuthenticationAction.Disable">
            <summary>
            Disables the associated control.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.Authentication">
            <summary>
            Authentication behavior to show/hide UI elements based on the some authentication parameters.
            </summary>
            <remarks>
            In Silverlight, the <c>IsEnabled</c> property is declared on <see cref="T:Windows.UI.Xaml.Controls.Control"/> instead of <see cref="T:Windows.UI.Xaml.FrameworkElement"/>. If the
            <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is not a <see cref="T:Windows.UI.Xaml.Controls.Control"/>, but the <see cref="P:Catel.Windows.Interactivity.Authentication.Action"/> is set to <see cref="F:Catel.Windows.Interactivity.AuthenticationAction.Disable"/>,
            a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication._authenticationProvider">
            <summary>
            The authentication provider.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Authentication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.Authentication"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Authentication.Action">
            <summary>
            Gets or sets the action to execute when the user has no access to the specified UI element.
            </summary>
            <value>The action.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.ActionProperty">
            <summary>
            Using a DependencyProperty as the backing store for Action.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Authentication.AuthenticationTag">
            <summary>
            Gets or sets the authentication tag which can be used to provide additional information to the <see cref="T:Catel.MVVM.IAuthenticationProvider"/>.
            </summary>
            <value>The authentication tag.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.AuthenticationTagProperty">
            <summary>
            Using a DependencyProperty as the backing store for AuthenticationTag.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Authentication.OnAssociatedObjectLoaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been loaded.
            </summary>
            <exception cref="T:System.InvalidOperationException">No instance of <see cref="T:Catel.MVVM.IAuthenticationProvider"/> is registered in the <see cref="T:Catel.IoC.IServiceLocator"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Catel.Windows.Interactivity.Authentication.Action"/> is set to <see cref="F:Catel.Windows.Interactivity.AuthenticationAction.Disable"/> and the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is not a <see cref="T:Windows.UI.Xaml.Controls.Control"/>.</exception>
        </member>
        <member name="T:Catel.Windows.Interactivity.AutoCompletion">
            <summary>
            Auto complete behavior to support auto complete on a <c>TextBox</c> control.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.AutoCompletion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.AutoCompletion"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.AutoCompletion.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.AutoCompletion.PropertyNameProperty">
            <summary>
            The property name property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.AutoCompletion.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.AutoCompletion.ItemsSourceProperty">
            <summary>
            The items source property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.AutoCompletion.UseAutoCompletionService">
            <summary>
            Gets or sets a value indicating whether this behavior should use the auto completion service to filter the items source.
            <para />
            If this value is set to <c>false</c>, it will show the <see cref="P:Catel.Windows.Interactivity.AutoCompletion.ItemsSource"/> as auto completion source without filtering.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if this behavior should use the auto completion service; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.AutoCompletion.UseAutoCompletionServiceProperty">
            <summary>
            The use automatic completion service property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.AutoCompletion.OnAssociatedObjectLoaded">
            <summary>
            Called when the associated object is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.AutoCompletion.OnAssociatedObjectUnloaded">
            <summary>
            Called when the associated object is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.AutoCompletion.OnIsEnabledChanged">
            <summary>
            Called when the is enabled property has changed.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.AutoCompletionBehavior">
            <summary>
            Auto complete behavior to support auto complete on a <c>TextBox</c> control.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.AutoCompletionBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.AutoCompletionBehavior"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.AutoCompletionBehavior.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.AutoCompletionBehavior.PropertyNameProperty">
            <summary>
            The property name property.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.AutoCompletionBehavior.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.AutoCompletionBehavior.ItemsSourceProperty">
            <summary>
            The items source property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.AutoCompletionBehavior.OnAssociatedObjectLoaded">
            <summary>
            Called when the associated object is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.AutoCompletionBehavior.OnAssociatedObjectUnloaded">
            <summary>
            Called when the associated object is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.AutoCompletionBehavior.OnIsEnabledChanged">
            <summary>
            Called when the is enabled property has changed.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.Behavior`1">
            <summary>
            Base class for the behavior because the SDK for WinRT only ships with interfaces.
            <para />
            This class tries to mimic the WPF, Silverlight and Windows Phone behavior class to allow reusage of the behaviors in Catel.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Catel.Windows.Interactivity.Behavior`1.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject" /> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior" /> is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Behavior`1.Microsoft#Xaml#Interactivity#IBehavior#AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject" /> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior" /> is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="M:Catel.Windows.Interactivity.Behavior`1.Microsoft#Xaml#Interactivity#IBehavior#Attach(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="associatedObject">The <see cref="T:Windows.UI.Xaml.DependencyObject" /> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior" /> will be attached.</param>
            <exception cref="T:System.InvalidOperationException">The associated object is not of the expected type.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.Behavior`1.Microsoft#Xaml#Interactivity#IBehavior#Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Behavior`1.OnAttached">
            <summary>
            Called when the associated object is attached.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Behavior`1.OnDetaching">
            <summary>
            Called when the associated object is detached.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.BehaviorBase`1">
            <summary>
            Behavior base class that handles a safe unsubscribe and clean up because the default
            behavior class does not always call <c>OnDetaching</c>.
            <para />
            This class also adds some specific features such as <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.ValidateRequiredProperties"/>
            which is automatically called when the behavior is attached.
            </summary>
            <typeparam name="T">The <see cref="T:Catel.MVVM.Views.IView"/> this behavior should attach to.</typeparam>
        </member>
        <member name="P:Catel.Windows.Interactivity.BehaviorBase`1.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <value>
            <c>true</c> if the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Interactivity.BehaviorBase`1.IsInDesignMode">
            <summary>
            Gets a value indicating whether this instance is in design mode.
            </summary>
            <value><c>true</c> if this instance is in design mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.BehaviorBase`1.Culture">
            <summary>
            Gets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.BehaviorBase`1.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this behavior is enabled.
            </summary>
            <value><c>true</c> if this behavior is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.BehaviorBase`1.IsEnabledProperty">
            <summary>
            The IsEnabled property registration.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnIsEnabledChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.BehaviorBase`1.IsEnabled" /> property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This method is called when the object is attached, but before
            the <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.Initialize"/> is invoked.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.Initialize">
            <summary>
            Initializes the behavior. This method is called instead of the <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAttached"/> which is sealed
            to protect the additional behavior.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.Uninitialize">
            <summary>
            Uninitializes the behavior. This method is called when <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching"/> is called, or when the
            <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            <para />
            If dependency properties are used, it is very important to use 
            <see cref="M:Windows.UI.Xaml.DependencyObject.ClearValue(Windows.UI.Xaml.DependencyProperty)"/> to clear the value
            of the dependency properties in this method.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectLoadedInternal(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded. This method is introduced to prevent
            double initialization when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is already loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectLoaded">
            <summary>
            Called when the AssociatedObject is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectUnloadedInternal(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded. This method is introduced to prevent
            double uninitialization when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is already unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectUnloaded">
            <summary>
            Called when the AssociatedObject is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.CleanUp">
            <summary>
            Actually cleans up the behavior because <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching"/> is not always called.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.CommandBehaviorBase`1">
            <summary>
            Behavior base class that handles a safe unsubscribe and clean up because the default
            behavior class does not always call <c>OnDetaching</c>.
            <para />
            This class extends the <see cref="T:Catel.Windows.Interactivity.BehaviorBase`1"/> class by adding supports for commands.
            </summary>
            <typeparam name="T">The <see cref="T:Windows.UI.Xaml.FrameworkElement"/> this behavior should attach to.</typeparam>
        </member>
        <member name="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.Modifiers">
            <summary>
            Gets or sets the modifiers to check for.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.CommandBehaviorBase`1.ModifiersProperty">
            <summary>
            Using a DependencyProperty as the backing store for Modifiers.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.Command">
            <summary>
            Gets or sets the command to execute when the key is pressed.
            </summary>
            <value>The command.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandProperty">
            <summary>
            Using a DependencyProperty as the backing store for Command.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandParameter">
            <summary>
            Gets or sets the command parameter, which will override the parameter defined in the direct command binding.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandParameterProperty">
            <summary>
            The property definition for the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnCommandCanExecuteChangedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> state has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> state has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnCommandCanExecuteChanged">
            <summary>
            Called when the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> state has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnAssociatedObjectLoaded">
            <summary>
            Called when the associated object is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnAssociatedObjectUnloaded">
            <summary>
            Called when the associated object is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.SubscribeToCommand">
            <summary>
            Subscribes to the command.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.UnsubscribeFromCommand">
            <summary>
            Unsubscribes from the command.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnCommandChangedInternal(System.Windows.Input.ICommand)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.Command"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnCommandChanged">
            <summary>
            Invoked when the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.Command"/> property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnCommandParameterChangedInternal(System.Object)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandParameter"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.OnCommandParameterChanged">
            <summary>
            Invoked when the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandParameter"/> property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.CanExecuteCommand">
            <summary>
            Determines whether the command can be invoked. It does this by checking both the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.Modifiers"/> and
            the command itself.
            </summary>
            <returns><c>true</c> if the command can be invoked; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.CanExecuteCommand(System.Object)">
            <summary>
            Determines whether the command can be invoked. It does this by checking both the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.Modifiers"/> and
            the command itself.
            <para />
            If the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandParameter"/> should be used, use the <see cref="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.CanExecuteCommand"/> instead.
            </summary>
            <returns><c>true</c> if the command can be invoked; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.ExecuteCommand">
            <summary>
            Invokes the command with the specified parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.ExecuteCommand(System.Object)">
            <summary>
            Invokes the command with the overriden parameter.
            <para />
            If the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandParameter"/> should be used, use the <see cref="M:Catel.Windows.Interactivity.CommandBehaviorBase`1.ExecuteCommand"/> instead.
            </summary>
            <param name="parameter">The parameter that will override the <see cref="P:Catel.Windows.Interactivity.CommandBehaviorBase`1.CommandParameter"/>.</param>
        </member>
        <member name="T:Catel.Windows.Interactivity.DelayBindingUpdate">
            <summary>
            This behaviors sets the binding to <see cref="F:Windows.UI.Xaml.Data.UpdateSourceTrigger.Explicit"/> and manually updates the
            binding from view to view model after the delay.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.DelayBindingUpdate.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Catel.Windows.Interactivity.DelayBindingUpdate" /> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.UpdateDelay">
            <summary>
            Gets or sets the update delay. 
            <para />
            This is the value that is used between updates in milliseconds. The binding will be updated
            after the delay. When a new value becomes available, the timer is reset and starts all over.
            <para />
            The default value is <c>100</c>. If the value is smaller than <c>50</c>, the value
            will be ignored and there will be no delay between the value change and binding update. If the
            value is higher than <c>5000</c>, it will be set to <c>5000</c>.
            </summary>
            <value>The update delay.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
            <remarks>
            This property does not reflect to any changes, so this property must be set when the 
            <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.DependencyPropertyName">
            <summary>
            Gets or sets the name of the dependency property. This property is used before the <see cref="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName"/>. By
            default, this behavior tries to retrieve the dependency property via "[PropertyName]Property" (which is the default
            naming convention of dependency properties). In the rare case that this naming convention is not followed, it is
            possible to use this property.
            </summary>
            <value>The name of the property.</value>
            <remarks>
            This property does not reflect to any changes, so this property must be set when the 
            <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            <para />
            This property should only be used as backup if the <see cref="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName"/> property does not work.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.UsedDependencyPropertyName">
            <summary>
            Gets the name of the used dependency property. This property is introduced because a <see cref="T:Windows.UI.Xaml.DependencyProperty"/> in Silverlight
            doesn't have a name.
            </summary>
            <value>The name of the used property or <c>null</c> if no property is used.</value>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.ValidateRequiredProperties">
            <summary>
            Validates the required properties.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnAssociatedObjectLoaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnAssociatedObjectUnloaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnDependencyPropertyChanged(System.Object,Catel.Windows.Data.DependencyPropertyValueChangedEventArgs)">
            <summary>
            Called when the associated dependency property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnTimerTick(System.Object,System.Object)">
            <summary>
            Called when timer ticks.
            </summary>
            <param name = "sender">The sender.</param>
            <param name = "e">The <see cref = "T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.UpdateBinding">
            <summary>
            Updates the binding value.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.GetDependencyProperty">
            <summary>
            Gets the dependency property based on the properties of this behavior.
            </summary>
            <returns>The <see cref="T:Windows.UI.Xaml.DependencyProperty"/> of <c>null</c> if the dependency property is not found.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.GetDependencyProperty(System.String)">
            <summary>
            Gets the dependency property with the specified property name.
            </summary>
            <param name="dependencyPropertyName">Name of the property.</param>
            <returns>The <see cref="T:Windows.UI.Xaml.DependencyProperty"/> or <c>null</c> if the dependency property is not found.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.CreateBindingCopy(Windows.UI.Xaml.Data.Binding)">
            <summary>
            Creates the binding copy.
            </summary>
            <param name="binding">The binding.</param>
            <returns>The duplicated binding.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Interactivity.FocusMoment">
            <summary>
            Available moments on which the focus can be set.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.Loaded">
            <summary>
            Focus when the control is loaded.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.PropertyChanged">
            <summary>
            Focus when a property has changed.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.Event">
            <summary>
            Focus when a specific event occurs.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.Focus">
            <summary>
            Behavior to set focus to a <see cref="T:Windows.UI.Xaml.FrameworkElement"/>. This behavior sets the focus
            only once on the first time the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <remarks>In Silverlight, focusing a control seems very, very hard. Just calling Focus() isn't enough, so a timer is used to set the timer 500 milliseconds after the
            user control has been loaded. This is customizable via the <see cref="P:Catel.Windows.Interactivity.FocusBehaviorBase.FocusDelay"/> property.</remarks>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.Focus"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.FocusMoment">
            <summary>
            Gets or sets the focus moment.
            <para />
            When this value is <see cref="F:Catel.Windows.Interactivity.FocusMoment.Loaded" />, no other properties need to be set.
            <para />
            When this value is <see cref="F:Catel.Windows.Interactivity.FocusMoment.PropertyChanged" />, both the <see cref="P:Catel.Windows.Interactivity.Focus.Source" /> and 
            <see cref="P:Catel.Windows.Interactivity.Focus.PropertyName" /> must be set.
            <para />
            When this value is <see cref="F:Catel.Windows.Interactivity.FocusMoment.Event" />, both the <see cref="P:Catel.Windows.Interactivity.Focus.Source" /> and 
            <see cref="P:Catel.Windows.Interactivity.Focus.EventName" /> must be set.
            </summary>
            <value>The focus moment.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.FocusMomentProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusMoment.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.Source">
            <summary>
            Gets or sets the source. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment" /> property is either 
            <see cref="F:Catel.Windows.Interactivity.FocusMoment.PropertyChanged" /> or <see cref="F:Catel.Windows.Interactivity.FocusMoment.Event" />.
            </summary>
            <value>The source.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.SourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for Source.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.PropertyName">
            <summary>
            Gets or sets the name of the property. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment" /> property is 
            <see cref="F:Catel.Windows.Interactivity.FocusMoment.PropertyChanged" />.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.PropertyNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyName.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.EventName">
            <summary>
            Gets or sets the name of the event. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment" /> property is 
            <see cref="F:Catel.Windows.Interactivity.FocusMoment.Event" />.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.EventNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for EventName.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnAssociatedObjectLoaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourceEventOccurred(System.Object,System.EventArgs)">
            <summary>
            Called when the event on the <see cref="P:Catel.Windows.Interactivity.Focus.Source" /> has occurred.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourcePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Interactivity.Focus.Source" /> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourceChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the source has changed.
            </summary>
            <param name="e">The <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.Interactivity.FocusBehaviorBase">
            <summary>
            Base class for focus behaviors.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusBehaviorBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.FocusBehaviorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.FocusBehaviorBase"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.FocusBehaviorBase.IsFocusAlreadySet">
            <summary>
            Gets a value indicating whether this instance is focus already set.
            </summary>
            <value><c>true</c> if this instance is focus already set; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.FocusBehaviorBase.FocusDelay">
            <summary>
            Gets or sets the focus delay. If smaller than 25, no delay will be used. If larger than 5000, it will be set to 5000.
            <para />
            The default value in WPF is <c>0</c>. The default value in Silverlight is <c>500</c>.
            </summary>
            <value>The focus delay.</value>
            <example>
            </example>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusBehaviorBase.FocusDelayProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusDelay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.FocusBehaviorBase.StartFocus">
            <summary>
            Starts the focus.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.FocusBehaviorBase.OnTimerTick(System.Object,System.Object)">
            <summary>
            Called when the <see cref="E:Windows.UI.Xaml.DispatcherTimer.Tick" /> event occurs on the timer.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.FocusBehaviorBase.SetFocus">
            <summary>
            Sets the focus to the assoicated object.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.FocusOnKeyPress">
            <summary>
            Behavior to set the focus on a key press.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.FocusOnKeyPress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.FocusOnKeyPress"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.FocusOnKeyPress.Modifiers">
            <summary>
            Gets or sets the modifiers to check for.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusOnKeyPress.ModifiersProperty">
            <summary>
            Using a DependencyProperty as the backing store for Modifiers.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.FocusOnKeyPress.Key">
            <summary>
            Gets or sets the key to which the behavior should respond.
            </summary>
            <value>The key.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusOnKeyPress.KeyProperty">
            <summary>
            Using a DependencyProperty as the backing store for Key.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.FocusOnKeyPress.OnAssociatedObjectLoaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.FocusOnKeyPress.OnAssociatedObjectUnloaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.FocusOnKeyPress.OnKeyDown(System.Object,Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Called when the specified key is pressed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The key event args instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.Interactivity.HideUntilViewModelLoaded">
            <summary>
            Hides the view until the view model is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.HideUntilViewModelLoaded.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.HideUntilViewModelLoaded.Uninitialize">
            <summary>
            Uninitializes this instance.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.IBehavior">
            <summary>
            Behavior interface.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.KeyPressToCommand">
            <summary>
            Behavior that converts a key press on a specific UI element to a command.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.KeyPressToCommand.Key">
            <summary>
            Gets or sets the key to which the behavior should respond.
            </summary>
            <value>The key.</value>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.KeyProperty">
            <summary>
            Using a DependencyProperty as the backing store for Key.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnAssociatedObjectLoaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnAssociatedObjectUnloaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnKeyDown(System.Object,Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Called when the specified key is pressed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The key event args instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.Interactivity.SelectTextOnFocus">
            <summary>
            Selects all the text when the <see cref="T:Windows.UI.Xaml.Controls.TextBox"/> is focused.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnAssociatedObjectLoaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnAssociatedObjectUnloaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnGotFocus(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when the <c>UIElement.OnGotFocus</c> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Windows.UI.Xaml.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.SelectAllText">
            <summary>
            Selects all the text in the associated object.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.UpdateBindingBehaviorBase`1">
            <summary>
            Behavior base for all behaviors that should update a binding.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingBehaviorBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.UpdateBindingOnTextChanged"/> class.
            </summary>
            <param name="dependencyPropertyName">Name of the dependency property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="dependencyPropertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.Windows.Interactivity.UpdateBindingBehaviorBase`1.DependencyPropertyName">
            <summary>
            Gets the name of the dependency property.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.UpdateBindingBehaviorBase`1.DependencyProperty">
            <summary>
            Gets the dependency property, which is retrieved at runtime.
            <para />
            This property can only be used when the associated object is attached.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingBehaviorBase`1.UpdateBinding">
            <summary>
              Updates the binding value.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.UpdateBindingOnTextChanged">
            <summary>
            This behavior automatically updates the binding of a <see cref="T:Windows.UI.Xaml.Controls.TextBox"/> when the
            <c>TextChanged</c> event occurs.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.UpdateBindingOnTextChanged"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.UpdateDelay">
            <summary>
            Gets or sets the update delay.
            <para/>
            This is the value that is used between updates in milliseconds. The binding will be updated
            when no new text change event is detected within the delay.
            <para/>
            The default value is <c>250</c>. If the value is smaller than <c>50</c>, the value
            will be ignored and there will be no delay between the key down and the binding update. If the
            value is higher than <c>5000</c>, it will be set to <c>5000</c>.
            </summary>
            <value>The update delay.</value>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectLoaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectUnloaded">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectTextChanged(System.Object,Windows.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            Called when the <c>TextChanged</c> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The text change event args instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnTimerTick(System.Object,System.Object)">
            <summary>
            Called when timer ticks.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.Interactivity.BehaviorEventArgs">
            <summary>
            Behavior event args.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorEventArgs.#ctor(Catel.Windows.Interactivity.IBehavior)">
            <summary>
            Creates the event args.
            </summary>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="behavior"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.Interactivity.BehaviorEventArgs.Behavior">
            <summary>
            Gets the behavior.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.TriggerEventArgs">
            <summary>
            Trigger event args.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerEventArgs.#ctor(Catel.Windows.Interactivity.ITrigger)">
            <summary>
            Creates the event args.
            </summary>
            <param name="trigger">The trigger.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="trigger"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.Interactivity.TriggerEventArgs.Trigger">
            <summary>
            Gets the trigger.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.InteractivityManager">
            <summary>
            Interactivity manager to manage interactivity classes.
            </summary>
        </member>
        <member name="E:Catel.Windows.Interactivity.InteractivityManager.BehaviorLoaded">
            <summary>
            Raised when a behavior is loaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Interactivity.InteractivityManager.BehaviorUnloaded">
            <summary>
            Raised when a behavior is unloaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Interactivity.InteractivityManager.TriggerLoaded">
            <summary>
            Raised when a trigger is loaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Interactivity.InteractivityManager.TriggerUnloaded">
            <summary>
            Raised when a trigger is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.InteractivityManager.RegisterBehavior(Catel.Windows.Interactivity.IBehavior)">
            <summary>
            Registers the behavior.
            </summary>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="behavior"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.InteractivityManager.UnregisterBehavior(Catel.Windows.Interactivity.IBehavior)">
            <summary>
            Unregisters the behavior.
            </summary>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="behavior"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.InteractivityManager.RegisterTrigger(Catel.Windows.Interactivity.ITrigger)">
            <summary>
            Registers the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="trigger"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.InteractivityManager.UnregisterTrigger(Catel.Windows.Interactivity.ITrigger)">
            <summary>
            Unregisters the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="trigger"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.InteractivityManager.GetBehaviors">
            <summary>
            Gets all the currently loaded behaviors.
            </summary>
            <returns>All the behaviors.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.InteractivityManager.GetTriggers">
            <summary>
            Gets all the currently loaded triggers.
            </summary>
            <returns>All the triggers.</returns>
        </member>
        <member name="T:Catel.Windows.Interactivity.IInteractivityManager">
            <summary>
            Interactivity manager to manage interactivity classes.
            </summary>
        </member>
        <member name="E:Catel.Windows.Interactivity.IInteractivityManager.BehaviorLoaded">
            <summary>
            Raised when a behavior is loaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Interactivity.IInteractivityManager.BehaviorUnloaded">
            <summary>
            Raised when a behavior is unloaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Interactivity.IInteractivityManager.TriggerLoaded">
            <summary>
            Raised when a trigger is loaded.
            </summary>
        </member>
        <member name="E:Catel.Windows.Interactivity.IInteractivityManager.TriggerUnloaded">
            <summary>
            Raised when a trigger is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.IInteractivityManager.RegisterBehavior(Catel.Windows.Interactivity.IBehavior)">
            <summary>
            Registers the behavior.
            </summary>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="behavior"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.IInteractivityManager.UnregisterBehavior(Catel.Windows.Interactivity.IBehavior)">
            <summary>
            Unregisters the behavior.
            </summary>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="behavior"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.IInteractivityManager.RegisterTrigger(Catel.Windows.Interactivity.ITrigger)">
            <summary>
            Registers the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="trigger"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.IInteractivityManager.UnregisterTrigger(Catel.Windows.Interactivity.ITrigger)">
            <summary>
            Unregisters the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="trigger"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.IInteractivityManager.GetBehaviors">
            <summary>
            Gets all the currently loaded behaviors.
            </summary>
            <returns>All the behaviors.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.IInteractivityManager.GetTriggers">
            <summary>
            Gets all the currently loaded triggers.
            </summary>
            <returns>All the triggers.</returns>
        </member>
        <member name="T:Catel.Windows.Interactivity.ITrigger">
            <summary>
            Trigger interface.
            </summary>
        </member>
        <member name="T:Catel.Windows.Markup.CommandManagerBinding">
            <summary>
            Binds commands to the command manager.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.CommandManagerBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Markup.CommandManagerBinding"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.CommandManagerBinding.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Markup.CommandManagerBinding"/> class.
            </summary>
            <param name="commandName">Name of the command.</param>
        </member>
        <member name="P:Catel.Windows.Markup.CommandManagerBinding.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
            <value>The name of the command.</value>
        </member>
        <member name="M:Catel.Windows.Markup.CommandManagerBinding.OnTargetObjectLoaded">
            <summary>
            Called when the target object has been loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.CommandManagerBinding.OnTargetObjectUnloaded">
            <summary>
            Called when the target object has been unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.CommandManagerBinding.ProvideDynamicValue">
            <summary>
            Provides the dynamic value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Catel.Windows.Markup.MarkupExtension">
            <summary>
            Custom markup extension.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.MarkupExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Markup.MarkupExtension"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Markup.MarkupExtension.InternalBindingValue">
            <summary>
            Gets or sets the binding value.
            <para />
            Do not use this property, it's use to set up the binding manually.
            </summary>
            <value>The binding value.</value>
        </member>
        <member name="M:Catel.Windows.Markup.MarkupExtension.UpdateBinding">
            <summary>
            Updates the binding.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
            <returns>The object value to set on the property where the extension is applied.</returns>
        </member>
        <member name="E:Catel.Windows.Markup.MarkupExtension.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.MarkupExtension.RaisePropertyChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Catel.Windows.Markup.UpdatableMarkupExtension">
            <summary>
            Markup extension that allows an update of the binding values.
            </summary>
            <remarks>
            This class is found at http://www.thomaslevesque.com/2009/07/28/wpf-a-markup-extension-that-can-update-its-target/.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Markup.UpdatableMarkupExtension.TargetObject">
            <summary>
            Gets the target object.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:Catel.Windows.Markup.UpdatableMarkupExtension.TargetProperty">
            <summary>
            Gets the target property.
            </summary>
            <value>The target property.</value>
        </member>
        <member name="M:Catel.Windows.Markup.UpdatableMarkupExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
            <returns>The object value to set on the property where the extension is applied.</returns>
        </member>
        <member name="M:Catel.Windows.Markup.UpdatableMarkupExtension.OnTargetObjectLoaded">
            <summary>
            Called when the target object is loaded.
            <para />
            Note that this method will only be called if the target object is a <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.UpdatableMarkupExtension.OnTargetObjectUnloaded">
            <summary>
            Called when the target object is unloaded.
            <para />
            Note that this method will only be called if the target object is a <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.UpdatableMarkupExtension.UpdateValue">
            <summary>
            Updates the value.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.UpdatableMarkupExtension.GetValue">
            <summary>
            Gets the value by combining the rights methods (so we don't have to repeat ourselves).
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Catel.Windows.Markup.UpdatableMarkupExtension.ProvideDynamicValue">
            <summary>
            Provides the dynamic value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Catel.Windows.Markup.UpdatableMarkupExtension.ProvideDynamicValue(System.IServiceProvider)">
            <summary>
            Provides the dynamic value.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Catel.Windows.Threading.DispatcherExtensions">
            <summary>
            Extension methods for the dispatcher.
            </summary>
            <summary>
            Extension methods for the dispatcher.
            </summary>
            <summary>
            Extension methods for the dispatcher.
            </summary>
            <summary>
            Extension methods for the dispatcher.
            </summary>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherExtensions.BeginInvokeIfRequired(Windows.UI.Core.CoreDispatcher,System.Action)">
            <summary>
            Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on if required.
            <para />
            To check whether this is necessary, it will check whether the current thread has access to the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="action">The action.</param>
            <returns>The DispatcherOperation or <c>null</c> if the action was not dispatched but executed directly.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> is <c>null</c>.</exception>
            <remarks>For target frameworks where the <see cref="T:Windows.UI.Core.CoreDispatcher" /> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.</remarks>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherExtensions.BeginInvokeIfRequired(Windows.UI.Core.CoreDispatcher,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on if required.
            <para />
            To check whether this is necessary, it will check whether the current thread has access to the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <returns>The DispatcherOperation or <c>null</c> if the action was not dispatched but executed directly.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherExtensions.BeginInvoke(Windows.UI.Core.CoreDispatcher,System.Action,System.Boolean)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="action">The action.</param>
            <param name="onlyBeginInvokeWhenNoAccess">If set to <c>true</c>, the action will be executed directly if possible. Otherwise,
            <c>Dispatcher.BeginInvoke</c> will be used.</param>
            <returns>The DispatcherOperation or <c>null</c> if the action was not dispatched but executed directly.</returns>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherExtensions.Invoke(Windows.UI.Core.CoreDispatcher,System.Action)">
            <summary>
            Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> is <c>null</c>.</exception>
            <remarks>For target frameworks where the <see cref="T:Windows.UI.Core.CoreDispatcher" /> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.</remarks>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherExtensions.Invoke(Windows.UI.Core.CoreDispatcher,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is <c>null</c>.</exception>
            <remarks>For target frameworks where the <see cref="T:Windows.UI.Core.CoreDispatcher" /> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.</remarks>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherExtensions.InvokeIfRequired(Windows.UI.Core.CoreDispatcher,System.Action)">
            <summary>
            Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on if required.
            <para />
            To check whether this is necessary, it will check whether the current thread has access to the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> is <c>null</c>.</exception>
            <remarks>For target frameworks where the <see cref="T:Windows.UI.Core.CoreDispatcher" /> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.</remarks>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherExtensions.InvokeIfRequired(Windows.UI.Core.CoreDispatcher,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on if required.
            <para />
            To check whether this is necessary, it will check whether the current thread has access to the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherExtensions.Invoke(Windows.UI.Core.CoreDispatcher,System.Action,System.Boolean)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="action">The action.</param>
            <param name="onlyBeginInvokeWhenNoAccess">If set to <c>true</c>, the action will be executed directly if possible. Otherwise,
            <c>Dispatcher.BeginInvoke</c> will be used.</param>
        </member>
        <member name="T:Catel.Windows.Threading.DispatcherHelper">
            <summary>
            Dispatcher helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherHelper.CheckAccess(Windows.UI.Core.CoreDispatcher)">
            <summary>
            Checks the access of the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dispatcher"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherHelper.BeginInvoke(Windows.UI.Core.CoreDispatcher,System.Action)">
            <summary>
            Begins the invocation of an action using the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dispatcher"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.Threading.DispatcherHelper.CurrentDispatcher">
            <summary>
            Gets the current dispatcher. This property is compatible with WPF, Silverlight, Windows Phone, etc, and also works
            when there is no application object (for example, during unit tests).
            </summary>
            <value>The current dispatcher.</value>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherHelper.GetCurrentDispatcher">
            <summary>
            Gets the current dispatcher.
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Windows.Threading.DispatcherOperation">
            <summary>
            Class DispatcherOperation.
            </summary>
        </member>
        <member name="M:System.Windows.Threading.DispatcherOperation.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:System.Windows.Threading.DispatcherOperation.Default">
            <summary>
            Gets the default dispatcher operation.
            </summary>
        </member>
    </members>
</doc>
